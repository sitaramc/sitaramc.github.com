{
    "docs": [
        {
            "location": "/", 
            "text": "Hosting Git Repositories\n\uf0c1\n\n\n\n\nGitolite allows you to setup git hosting on a central server, with\nfine-grained access control and many more powerful features.\n\n\ninstall/setup\n\uf0c1\n\n\nIf you're installing via your package manager, make sure\nyou get the right one; it's often called \ngitolite3\n.\n\n\nSource code is at \nhttps://github.com/sitaramc/gitolite\n.\n\n\nIf your Unix-fu and ssh-fu are good, take a look at the \nquick install\n\npage.  Otherwise follow the documentation flow, skipping whatever you think\nyou don't need.\n\n\ndocumentation\n\uf0c1\n\n\n \n(April 2014): There's a\n\nbook on gitolite\n out\n.  I've received some emails over the years\nasking where to donate for gitolite to show your appreciation, and I've always\nrefused politely.  Well, if you insist... buy the book :-) \n\n\nIn general, the sections (see links in the navigation bar at the top) should\nbe fairly self-explanatory, and reading through the documentation as it flows\n(i.e., using the \"Next\" link at the top right of each page) should work fine.\nThere are some forward references here and there, but you can ignore those\nlinks on a first pass.\n\n\n\n\nIn addition:\n\n\nThere's a \nfool proof setup\n guide with detailed help showing one\nfool-proof way to install, as long as you follow instructions faithfully!\n\n\nOnce you've installed and setup, there's the \ncookbook\n with recipes\nfor common tasks.\n\n\n\n\nTROUBLESHOOTING\n\uf0c1\n\n\nThe \nemergencies\n page helps with all sorts of install/setup issues,\nrecovering from lost keys and other self-inflicted wounds, lists some common\n(and some uncommon!) errors and non-standard configs that may trip you up.\n\n\ncontact/support\n\uf0c1\n\n\nsecurity issues\n\uf0c1\n\n\nIf you think you found a possible \nsecurity issue\n, please email me\n(\n) directly.\n\n\nmailing list(s)\n\uf0c1\n\n\nFor all other communications, please use the mailing list.  \nNOTE\n: The\nfirst email from a new member is held until I can clear it; subsequent emails\nfrom the same email address do not get held up.\n\n\nMailing list for support and general discussion:\n\n\n\n\nSubscribe: \n\n\nPost: \n\n\n\n\nThere's also a low traffic, one-way, mailing list for release and security\nannouncements:\n\n\n\n\nSubscribe: \n\n\n\n\nIf you wish to send me code, please see the file called CONTRIBUTING in the\nsource distribution.\n\n\nIRC\n\uf0c1\n\n\nOur IRC channel is \n#gitolite\n on freenode.  I live in India (UTC+0530 time\nzone), but there are a few regulars (\nthanks, guys, you know who you are!\n)\nfrom other times zones.  That said, it's not heavy traffic and you may have to\nwait a while for an answer, depending on the time of day and day of week.\n\n\nThere are also many gitolite-knowledgeable people on the git channel \n#git\n.\n\n\nlicense\n\uf0c1\n\n\nThe gitolite software is copyright Sitaram Chamarty and is licensed under the\nGPL v2; please see the file called COPYING in the source distribution.\n\n\nThis \ndocumentation\n, which is maintained separately from the main gitolite\nsource code, is copyright Sitaram Chamarty and is provided under a \nCreative\nCommons Attribution-NonCommercial-ShareAlike 3.0 Unported\nLicense\n.\n\n\nHowever, certain parts are contributed by others who may have chosen other\nlicenses; their names and license will be mentioned in the respective files.\n\n\nDocumentation for a software product will naturally contain code examples.  I\nbelieve that the principle of fair use should cover use of those snippets; see\nespecially factors 3 and 4 in the list of factors\n\nhere\n.\n\n\nIf you're not convinced that it would be fair use, then you may consider those\ncode snippets, as well as associated \"comments\" if any, to be under the GPLv2\nlicense.  Licensing is about intent, and the intent of these examples is that\nyou use them wherever and however you can use gitolite itself.\n\n\n\n\nNote:\n\n\nGIT is a trademark of Software Freedom Conservancy and my use of\n\"Gitolite\" is under license.", 
            "title": "home"
        }, 
        {
            "location": "/#hosting-git-repositories", 
            "text": "Gitolite allows you to setup git hosting on a central server, with\nfine-grained access control and many more powerful features.", 
            "title": "Hosting Git Repositories"
        }, 
        {
            "location": "/#installsetup", 
            "text": "If you're installing via your package manager, make sure\nyou get the right one; it's often called  gitolite3 .  Source code is at  https://github.com/sitaramc/gitolite .  If your Unix-fu and ssh-fu are good, take a look at the  quick install \npage.  Otherwise follow the documentation flow, skipping whatever you think\nyou don't need.", 
            "title": "install/setup"
        }, 
        {
            "location": "/#documentation", 
            "text": "(April 2014): There's a book on gitolite  out .  I've received some emails over the years\nasking where to donate for gitolite to show your appreciation, and I've always\nrefused politely.  Well, if you insist... buy the book :-)   In general, the sections (see links in the navigation bar at the top) should\nbe fairly self-explanatory, and reading through the documentation as it flows\n(i.e., using the \"Next\" link at the top right of each page) should work fine.\nThere are some forward references here and there, but you can ignore those\nlinks on a first pass.   In addition:  There's a  fool proof setup  guide with detailed help showing one\nfool-proof way to install, as long as you follow instructions faithfully!  Once you've installed and setup, there's the  cookbook  with recipes\nfor common tasks.", 
            "title": "documentation"
        }, 
        {
            "location": "/#troubleshooting", 
            "text": "The  emergencies  page helps with all sorts of install/setup issues,\nrecovering from lost keys and other self-inflicted wounds, lists some common\n(and some uncommon!) errors and non-standard configs that may trip you up.", 
            "title": "TROUBLESHOOTING"
        }, 
        {
            "location": "/#contactsupport", 
            "text": "", 
            "title": "contact/support"
        }, 
        {
            "location": "/#security-issues", 
            "text": "If you think you found a possible  security issue , please email me\n( ) directly.", 
            "title": "security issues"
        }, 
        {
            "location": "/#mailing-lists", 
            "text": "For all other communications, please use the mailing list.   NOTE : The\nfirst email from a new member is held until I can clear it; subsequent emails\nfrom the same email address do not get held up.  Mailing list for support and general discussion:   Subscribe:   Post:    There's also a low traffic, one-way, mailing list for release and security\nannouncements:   Subscribe:    If you wish to send me code, please see the file called CONTRIBUTING in the\nsource distribution.", 
            "title": "mailing list(s)"
        }, 
        {
            "location": "/#irc", 
            "text": "Our IRC channel is  #gitolite  on freenode.  I live in India (UTC+0530 time\nzone), but there are a few regulars ( thanks, guys, you know who you are! )\nfrom other times zones.  That said, it's not heavy traffic and you may have to\nwait a while for an answer, depending on the time of day and day of week.  There are also many gitolite-knowledgeable people on the git channel  #git .", 
            "title": "IRC"
        }, 
        {
            "location": "/#license", 
            "text": "The gitolite software is copyright Sitaram Chamarty and is licensed under the\nGPL v2; please see the file called COPYING in the source distribution.  This  documentation , which is maintained separately from the main gitolite\nsource code, is copyright Sitaram Chamarty and is provided under a  Creative\nCommons Attribution-NonCommercial-ShareAlike 3.0 Unported\nLicense .  However, certain parts are contributed by others who may have chosen other\nlicenses; their names and license will be mentioned in the respective files.  Documentation for a software product will naturally contain code examples.  I\nbelieve that the principle of fair use should cover use of those snippets; see\nespecially factors 3 and 4 in the list of factors here .  If you're not convinced that it would be fair use, then you may consider those\ncode snippets, as well as associated \"comments\" if any, to be under the GPLv2\nlicense.  Licensing is about intent, and the intent of these examples is that\nyou use them wherever and however you can use gitolite itself.   Note:  GIT is a trademark of Software Freedom Conservancy and my use of\n\"Gitolite\" is under license.", 
            "title": "license"
        }, 
        {
            "location": "/overview/", 
            "text": "gitolite overview\n\uf0c1\n\n\n\n\nGitolite allows you to setup git hosting on a central server, with\nfine-grained access control and many more powerful features.\n\n\nwhat is gitolite?\n\uf0c1\n\n\nGitolite is an access control layer on top of git.  Here are the features that\nmost people see:\n\n\n\n\nUse a single unix user (\"real\" user) on the server.\n\n\nProvide access to many gitolite users:\n\n\nthey are not \"real\" users,\n\n\nso they do not get shell access.\n\n\n\n\n\n\nControl access to many git repositories:\n\n\nread access controlled at the repo level,\n\n\nwrite access controlled at the branch/tag/file/directory level,\n    including who can rewind, create, and delete branches/tags.\n\n\n\n\n\n\nCan be installed without root access, assuming git and perl are already\n    installed.\n\n\nAuthentication is most commonly done using sshd, but you can also use\n    \"smart http\" mode if you prefer (this may require root access for the\n    initial setup).\n\n\n\n\nwhy might you need it?\n\uf0c1\n\n\naccess control\n\uf0c1\n\n\nGit by itself does not do any access control -- it relies on the transport\nmedium to do authentication (\"who are you?\"), and on OS file permissions to do\nauthorisation (\"what are you allowed to do?\").\n\n\nGit also comes with a program called \"git-shell\" which can act as a restricted\nlogin shell if you don't want users getting a proper shell.  Using this and\njudicious use of Unix groups, you can allow some people read-only access while\nothers get read-write access, etc.  This is probably sufficient if your needs\nare simple and don't change too often.\n\n\nHowever, gitolite does this much better, and offers many more features.\n\n\nbasic use case\n\uf0c1\n\n\nGitolite is useful in any server that is going to host multiple git\nrepositories, each with many developers, where \"anyone can do anything to any\nrepo\" is not a good idea.  Here're two examples to illustrate.\n\n\n\n\nThis first example has 3 repos and 3 developers with different levels of\naccess to each repo.  It's a very simple, readable, syntax, and makes it easy\nto answer questions like \"what repos can bob push to\" (answer: only 'bar').\n\n\n\n\nrepo \nfoo\n\n    RW+\n     \n=   alice\n\n    RW\n      \n=   carol\n\n\nrepo \nbar\n\n    RW+\n     \n=   bob\n\n    R\n       \n=   alice\n\n\nrepo \nbaz\n\n    RW+\n     \n=   carol\n\n    R\n       \n=   alice bob\n\n\n\n\n\n\nThis second example allows different levels of access to different branches\nand tags for different developers:\n\n\n\n\nrepo \nfoo\n\n    RW+\n                         \n=   alice\n\n    RW\n  master                  \n=   bob\n\n    RW+\n dev/                    \n=   bob\n\n    RW\n  refs/heads/tags/v[0-9]  \n=   ashok\n\n\n\n\nother features\n\uf0c1\n\n\nGitolite has many more features, as you might guess from the amount of\ndocumentation (see links in the nav bar at the top).  Here's a quick sample:\n\n\n\n\nVery powerful rule language (rules most often based on branch/tag name, or\n    files/directories touched, but many other factors can be used, such as\n    size of changed files, number of changed files, etc.).\n\n\nConvenience features for writing the rules (repo groups, user groups, get\n    user group info from LDAP, include files, macros...)\n\n\nHighly customisable and scriptable, especially custom commands for users.\n    Many built-in commands and options.\n\n\nPowerful and flexible mirroring system.\n\n\nUsers can create their own repos and set access rights (if you allow\n    them).\n\n\n\n\nalternatives to gitolite\n\uf0c1\n\n\nunix permissions and ACLs\n\uf0c1\n\n\nIf you're a masochist, you could probably do example 1 with Unix permissions\nand facls.  But you can't do example 2 -- git is not designed to allow that!\n\n\nHere are some other disadvantages of the Unix ACL method:\n\n\n\n\nEvery user needs a userid and password on the server.\n\n\nChanging access rights involves complex \nusermod -G ...\n mumblings\n    (I.e., the \"pain\" mentioned above is not a one-time pain!)\n\n\nViewing\n the current set of permissions requires running multiple\n    commands to list directories and their permissions/ownerships, users and\n    their group memberships, and then correlating all these manually.\n\n\nAuditing historical permissions or permission changes is impossible.\n\n\n\n\nGerrit Code Review\n\uf0c1\n\n\nThe best real alternative to gitolite is Gerrit Code Review.  If code review\nis an essential part of your workflow, you should use Gerrit.\n\n\nHere're some high level differences between gitolite and Gerrit (as of about\nmid-2012 or so):\n\n\nSize\n: 3000+ lines of perl versus of 56,000+ lines of Java\n\n\nArchitecture\n: Gitolite sits on top of \"standard\" git and openssh, which\nare assumed to already be installed.  Gerrit includes its own git stack (jgit)\nand sshd (Apache Mina).  In Java tradition, they all come bundled together.\n\n\n(Corollary: As far as I know jgit does not support the same hooks that 'man\ngithooks' talks about).\n\n\nGitolite uses a plain text config file; gerrit uses a database.\n\n\nUser view\n: Gitolite is invisible to users except when access is denied.\nGerrit is much more visible to devs because of its role in enforcing code\nreview, approvals, and workflow.\n\n\nOn a related note, gitolite does not do anything special with signed or\nannotated tags, nor does it check author/committer identity.  However, it is\ntrivial to add your own code to do either (or if someone contributes it, to\njust \"enable\" what ships with gitolite in a disabled state).\n\n\ngitlab, gogs, gitblit, and others\n\uf0c1\n\n\nThere are several alternatives which offer a full web-based GUI, for\nadministrators or users or both.  They also offer a lot of enterprise features\n(for example LDAP integration), and social coding features (issue trackers,\ndiscussions, comments on code, pull requests, etc.)\n\n\nHowever, they are unlikely to be as \ncustomisable\n as gitolite is,\nif you care about that sort of thing.\n\n\nhow does it work?\n\uf0c1\n\n\nAt a very high level, gitolite relies on \nsshd\n (or \nhttpd\n if you're\nusing the smart http mode) to authenticate the user and supply the username.\nBased on this, and the command given, it decides whether to allow or deny the\nrequest.\n\n\nConsider a push command in ssh mode.  Normally (i.e., without gitolite) this\nwould invoke \ngit-receive-pack\n on the server, and the flow would be somewhat\nlike this (left side is client, right side is server):\n\n\n\n\n\n\nWhen you install gitolite and setup the user, gitolite sets up ssh to\n\nforce\n the \ngitolite-shell\n command to run first, instead of the command\nrequested:\n\n\nThe \ngitolite-shell\n program uses the username supplied by ssh, and the repo\nname in the command, to decide if the user has write access to the repo or\nnot.\n\n\nIf he does have \nsome\n write access, git-receive-pack is called, but that's\nnot the end of the story.  The branch/tag/file(s) he is pushing also need to\nbe checked, and gitolite sets up the update hook on the repo to do that.\n\n\n\n\nA more detailed explanation, with figures, is \nhere\n.\n\n\nwho uses it?\n\uf0c1\n\n\n\n\nIf you're using gitolite and find it very useful in some way, I would love\nto describe your use of it or add a link to your own description of it\nhere.  Of course, you can anonymise it as much as you need to.\n\n\n\n\nThe \nFedora Project\n controls access to over 10,000 package management\nrepositories accessed by over 1,000 package maintainers \nusing\ngitolite\n.  This is probably the largest \nconfirmed\n gitolite\ninstallation anywhere.  The whole \"big-config\" option back in v2 (in v3\nthis is the default!) was initially done for them (their config file was so\nbig that without the big-config changes gitolite would just run out of memory\nand die!).\n\n\nThe \nKDE project\n \nuses\n gitolite (in combination with redmine for\nissue tracking and reviewboard for code review).  Apart from the usual access\ncontrol, the KDE folks are heavy users of the \"ad hoc repo creation\" features\nenabled by wildrepos and the accompanying commands.  Several of the changes to\nthe \"admin defined commands\" were also inspired by KDE's needs.  See \nsection\n5\n and \nsection 6\n of the above linked page for details.\n\n\nProf. Hiren Patel\n of the University of Waterloo is responsible for the\nexistence of the fairly popular \"\nwildrepos\n\" feature.  The\ndocumentation was pretty much written with his use case in mind, but of course\nit turns out to be useful for a lot of people, as you can see from the\nprevious para on KDE's use of gitolite.\n\n\nIn fact, he surprised the heck out of me once by saying that if it hadn't been\nfor this feature, he might not have used git itself -- which is a pretty\nserious compliment if you think about the magnitude of the git project and my\nlittle one-man show!\n\n\nHe explains his use of it \nhere\n.\n\n\nGentoo Linux\n has \njust moved\n their git repositories from gitosis\nto gitolite. There are about 200 repositories, some of them are the so called\n\noverlays\n, official and unofficial/user overlays, plus several\ndeveloper and project repositories, used by more than 1000 people. That number\nwill be increased in the near future, as they are going to migrate some of\ntheir CVS/SVN repositories there, plus they are offering overlays hosting for\nusers as well.\n\n\nkernel.org\n, the official distribution point for the Linux kernel, is the\nlatest (as of 2011-10) high-visibility installation.  According to \nthis\nemail\n to the lkml, kernel.org decided to use gitolite for access\ncontrolling their git repos.  Their \nFAQ entry\n describes at a high\nlevel why they chose gitolite.\n\n\nThis move also prompted the first ever security audit of gitolite by an\noutside party.  Gitolite did great; see \nhere\n for details.  [NOTE: v3\nhas not had such an audit yet; if you did one, please let me know what you\nfound.  If you want to do one and need clarifications on anything or general\nbackground let me know].\n\n\nIn addition, kernel.org was responsible for a serious rethink of a few rough\nedges in gitolite, and smoothing them out was fun (the \"playing with gitolite\"\nstuff, making the test suite simpler, \"deny\" rules for the entire repo).\n\n\nThe \nMageia Project\n is \nusing\n gitolite 3 to manage its\ngit repositories and access control. The repositories are \ndefined\n\nin yaml files. A tool called \nmgagit\n has been created and is\nrepsonsible for the generation of the gitolite configuration from the\nyaml repos definitions, and the extraction of users' ssh keys from an\nldap directory into the gitolite configuration.\n\n\nGitolite and mgagit are installed using rpm packages and\n\na puppet module\n.\n\n\n\n\nA general note: if you see the list of high-profile users above, you will see\nthat gitolite benefits as much as they do; possibly more.\n\n\n\n\n\n\nNote:\n\n\nGIT is a trademark of Software Freedom Conservancy and my use of\n\"Gitolite\" is under license.", 
            "title": "overview"
        }, 
        {
            "location": "/overview/#gitolite-overview", 
            "text": "Gitolite allows you to setup git hosting on a central server, with\nfine-grained access control and many more powerful features.", 
            "title": "gitolite overview"
        }, 
        {
            "location": "/overview/#what-is-gitolite", 
            "text": "Gitolite is an access control layer on top of git.  Here are the features that\nmost people see:   Use a single unix user (\"real\" user) on the server.  Provide access to many gitolite users:  they are not \"real\" users,  so they do not get shell access.    Control access to many git repositories:  read access controlled at the repo level,  write access controlled at the branch/tag/file/directory level,\n    including who can rewind, create, and delete branches/tags.    Can be installed without root access, assuming git and perl are already\n    installed.  Authentication is most commonly done using sshd, but you can also use\n    \"smart http\" mode if you prefer (this may require root access for the\n    initial setup).", 
            "title": "what is gitolite?"
        }, 
        {
            "location": "/overview/#why-might-you-need-it", 
            "text": "", 
            "title": "why might you need it?"
        }, 
        {
            "location": "/overview/#access-control", 
            "text": "Git by itself does not do any access control -- it relies on the transport\nmedium to do authentication (\"who are you?\"), and on OS file permissions to do\nauthorisation (\"what are you allowed to do?\").  Git also comes with a program called \"git-shell\" which can act as a restricted\nlogin shell if you don't want users getting a proper shell.  Using this and\njudicious use of Unix groups, you can allow some people read-only access while\nothers get read-write access, etc.  This is probably sufficient if your needs\nare simple and don't change too often.  However, gitolite does this much better, and offers many more features.", 
            "title": "access control"
        }, 
        {
            "location": "/overview/#basic-use-case", 
            "text": "Gitolite is useful in any server that is going to host multiple git\nrepositories, each with many developers, where \"anyone can do anything to any\nrepo\" is not a good idea.  Here're two examples to illustrate.   This first example has 3 repos and 3 developers with different levels of\naccess to each repo.  It's a very simple, readable, syntax, and makes it easy\nto answer questions like \"what repos can bob push to\" (answer: only 'bar').   repo  foo     RW+       =   alice     RW        =   carol repo  bar     RW+       =   bob     R         =   alice repo  baz     RW+       =   carol     R         =   alice bob   This second example allows different levels of access to different branches\nand tags for different developers:   repo  foo     RW+                           =   alice     RW   master                   =   bob     RW+  dev/                     =   bob     RW   refs/heads/tags/v[0-9]   =   ashok", 
            "title": "basic use case"
        }, 
        {
            "location": "/overview/#other-features", 
            "text": "Gitolite has many more features, as you might guess from the amount of\ndocumentation (see links in the nav bar at the top).  Here's a quick sample:   Very powerful rule language (rules most often based on branch/tag name, or\n    files/directories touched, but many other factors can be used, such as\n    size of changed files, number of changed files, etc.).  Convenience features for writing the rules (repo groups, user groups, get\n    user group info from LDAP, include files, macros...)  Highly customisable and scriptable, especially custom commands for users.\n    Many built-in commands and options.  Powerful and flexible mirroring system.  Users can create their own repos and set access rights (if you allow\n    them).", 
            "title": "other features"
        }, 
        {
            "location": "/overview/#alternatives-to-gitolite", 
            "text": "", 
            "title": "alternatives to gitolite"
        }, 
        {
            "location": "/overview/#unix-permissions-and-acls", 
            "text": "If you're a masochist, you could probably do example 1 with Unix permissions\nand facls.  But you can't do example 2 -- git is not designed to allow that!  Here are some other disadvantages of the Unix ACL method:   Every user needs a userid and password on the server.  Changing access rights involves complex  usermod -G ...  mumblings\n    (I.e., the \"pain\" mentioned above is not a one-time pain!)  Viewing  the current set of permissions requires running multiple\n    commands to list directories and their permissions/ownerships, users and\n    their group memberships, and then correlating all these manually.  Auditing historical permissions or permission changes is impossible.", 
            "title": "unix permissions and ACLs"
        }, 
        {
            "location": "/overview/#gerrit-code-review", 
            "text": "The best real alternative to gitolite is Gerrit Code Review.  If code review\nis an essential part of your workflow, you should use Gerrit.  Here're some high level differences between gitolite and Gerrit (as of about\nmid-2012 or so):  Size : 3000+ lines of perl versus of 56,000+ lines of Java  Architecture : Gitolite sits on top of \"standard\" git and openssh, which\nare assumed to already be installed.  Gerrit includes its own git stack (jgit)\nand sshd (Apache Mina).  In Java tradition, they all come bundled together.  (Corollary: As far as I know jgit does not support the same hooks that 'man\ngithooks' talks about).  Gitolite uses a plain text config file; gerrit uses a database.  User view : Gitolite is invisible to users except when access is denied.\nGerrit is much more visible to devs because of its role in enforcing code\nreview, approvals, and workflow.  On a related note, gitolite does not do anything special with signed or\nannotated tags, nor does it check author/committer identity.  However, it is\ntrivial to add your own code to do either (or if someone contributes it, to\njust \"enable\" what ships with gitolite in a disabled state).", 
            "title": "Gerrit Code Review"
        }, 
        {
            "location": "/overview/#gitlab-gogs-gitblit-and-others", 
            "text": "There are several alternatives which offer a full web-based GUI, for\nadministrators or users or both.  They also offer a lot of enterprise features\n(for example LDAP integration), and social coding features (issue trackers,\ndiscussions, comments on code, pull requests, etc.)  However, they are unlikely to be as  customisable  as gitolite is,\nif you care about that sort of thing.", 
            "title": "gitlab, gogs, gitblit, and others"
        }, 
        {
            "location": "/overview/#how-does-it-work", 
            "text": "At a very high level, gitolite relies on  sshd  (or  httpd  if you're\nusing the smart http mode) to authenticate the user and supply the username.\nBased on this, and the command given, it decides whether to allow or deny the\nrequest.  Consider a push command in ssh mode.  Normally (i.e., without gitolite) this\nwould invoke  git-receive-pack  on the server, and the flow would be somewhat\nlike this (left side is client, right side is server):    When you install gitolite and setup the user, gitolite sets up ssh to force  the  gitolite-shell  command to run first, instead of the command\nrequested:  The  gitolite-shell  program uses the username supplied by ssh, and the repo\nname in the command, to decide if the user has write access to the repo or\nnot.  If he does have  some  write access, git-receive-pack is called, but that's\nnot the end of the story.  The branch/tag/file(s) he is pushing also need to\nbe checked, and gitolite sets up the update hook on the repo to do that.   A more detailed explanation, with figures, is  here .", 
            "title": "how does it work?"
        }, 
        {
            "location": "/overview/#who-uses-it", 
            "text": "If you're using gitolite and find it very useful in some way, I would love\nto describe your use of it or add a link to your own description of it\nhere.  Of course, you can anonymise it as much as you need to.   The  Fedora Project  controls access to over 10,000 package management\nrepositories accessed by over 1,000 package maintainers  using\ngitolite .  This is probably the largest  confirmed  gitolite\ninstallation anywhere.  The whole \"big-config\" option back in v2 (in v3\nthis is the default!) was initially done for them (their config file was so\nbig that without the big-config changes gitolite would just run out of memory\nand die!).  The  KDE project   uses  gitolite (in combination with redmine for\nissue tracking and reviewboard for code review).  Apart from the usual access\ncontrol, the KDE folks are heavy users of the \"ad hoc repo creation\" features\nenabled by wildrepos and the accompanying commands.  Several of the changes to\nthe \"admin defined commands\" were also inspired by KDE's needs.  See  section\n5  and  section 6  of the above linked page for details.  Prof. Hiren Patel  of the University of Waterloo is responsible for the\nexistence of the fairly popular \" wildrepos \" feature.  The\ndocumentation was pretty much written with his use case in mind, but of course\nit turns out to be useful for a lot of people, as you can see from the\nprevious para on KDE's use of gitolite.  In fact, he surprised the heck out of me once by saying that if it hadn't been\nfor this feature, he might not have used git itself -- which is a pretty\nserious compliment if you think about the magnitude of the git project and my\nlittle one-man show!  He explains his use of it  here .  Gentoo Linux  has  just moved  their git repositories from gitosis\nto gitolite. There are about 200 repositories, some of them are the so called overlays , official and unofficial/user overlays, plus several\ndeveloper and project repositories, used by more than 1000 people. That number\nwill be increased in the near future, as they are going to migrate some of\ntheir CVS/SVN repositories there, plus they are offering overlays hosting for\nusers as well.  kernel.org , the official distribution point for the Linux kernel, is the\nlatest (as of 2011-10) high-visibility installation.  According to  this\nemail  to the lkml, kernel.org decided to use gitolite for access\ncontrolling their git repos.  Their  FAQ entry  describes at a high\nlevel why they chose gitolite.  This move also prompted the first ever security audit of gitolite by an\noutside party.  Gitolite did great; see  here  for details.  [NOTE: v3\nhas not had such an audit yet; if you did one, please let me know what you\nfound.  If you want to do one and need clarifications on anything or general\nbackground let me know].  In addition, kernel.org was responsible for a serious rethink of a few rough\nedges in gitolite, and smoothing them out was fun (the \"playing with gitolite\"\nstuff, making the test suite simpler, \"deny\" rules for the entire repo).  The  Mageia Project  is  using  gitolite 3 to manage its\ngit repositories and access control. The repositories are  defined \nin yaml files. A tool called  mgagit  has been created and is\nrepsonsible for the generation of the gitolite configuration from the\nyaml repos definitions, and the extraction of users' ssh keys from an\nldap directory into the gitolite configuration.  Gitolite and mgagit are installed using rpm packages and a puppet module .   A general note: if you see the list of high-profile users above, you will see\nthat gitolite benefits as much as they do; possibly more.    Note:  GIT is a trademark of Software Freedom Conservancy and my use of\n\"Gitolite\" is under license.", 
            "title": "who uses it?"
        }, 
        {
            "location": "/concepts/", 
            "text": "concepts, conventions, and terminology\n\uf0c1\n\n\n\n\n(I assume you're at least somewhat familiar with \ngit\n\nitself.  If not, the \n\"before you start...\"\n page has a list of topics\nthat you need to be familiar with, in order to use gitolite.)\n\n\nThis page will help newcomers get used to what we're talking about elsewhere.\nIt also explains the special \ngitolite-admin\n repo and how it is used to do te\nday-to-day management of a gitolite server.\n\n\nauthentication and authorisation\n\uf0c1\n\n\nGitolite does not do authentication.  It only does\nauthorisation.\n\n\nSo let's loosely define these words:\n\n\n\n\nAuthentication\n is the process of verifying that you are who you claim\n  to be.  An authentication system will establish that I am the user\n  \"sitaram\" on my work system.  The one behind gmail will similarly\n  establish that I am \"sitaramc\".  And so on...\n\n\nAuthorisation\n is the process of asking what you want to do and\n  deciding if you're allowed to do it or not.\n\n\n\n\nWhen you install gitolite, your users will authenticate themselves to your\nserver's \"sshd\" (ssh daemon) \nor\n to your web server.  If authentication\nsucceeds, sshd or httpd will pass control to gitolite, which then performs the\nauthorisation check -- i.e., figure out whether to allow you to do whatever it\nis you want to whatever repo you decided to touch.\n\n\nssh mode and http mode\n\uf0c1\n\n\nGit allows authenticated remote access using these two mechanisms: ssh and\nhttp.  Gitolite supports both.\n\n\nSsh mode is much easier to install and setup; most systems already have\nwhatever you need, and -- except for creating the \"hosting user\" -- you don't\nneed to do anything as root.  However, your users have to generate an ssh\nkeypair for themselves (using \"ssh-keygen\") if they don't already have a\nkeypair, and they have to send you the public key (the file ending in \".pub\"),\nwhich you add to gitolite.\n\n\nHttp mode requires a bit more work in terms of setting things up.  Once setup,\nhowever, it may be a little easier for your users.  Authentication is by\nusername + password, which, although much less secure than ssh keypairs, is\nconceptually easier for users.\n\n\nThe \"hosting user\"\n\uf0c1\n\n\nIf you're wondering how it distinguishes between different\nusers when they are all logging into \"git\", \nthis page\n has answers!\n\n\nWhen you install gitolite in ssh mode, you pick one specific user on the Unix\nsystem to be the \"hosting user\".  This is the user whose name goes into the\nrepo URLs your users will be cloning, for example \nssh://git@server/repo\n, or\nthe simpler form \ngit@server:repo\n.\n\n\nUsually\n, this is \"git\", and that is what we assume in this documentation.\nHowever, it can actually be any user on the system, and I think both the\nFedora RPM and the Debian DEB use \"gitolite\", so adjust instructions and\nexamples accordingly.  \nUnless otherwise stated, everything that we do \"on\nthe server\" is done in this userid (for ssh mode installations).\n\n\nOf course you can have any number of \"hosting users\", but that's rare.\n\n\nthe \"logical repo name\"\n\uf0c1\n\n\nGitolite refers to repos using a logical repo name, which is whatever name you\nspecified in the gitolite.conf file (described later).  The actual repo will\nbe in \n$HOME/repositories\n, and will have a \".git\" suffix.  So, for example,\nthe logical repo name \"foo\" will be \n$HOME/repositories/foo.git\n on disk, and\n\"bar/baz\" will be \n$HOME/repositories/bar/baz.git\n.  The logical repo name is\nwhat you must use for all interactions with gitolite (within the conf file,\nrepo name arguments to gitolite commands or API functions, etc.) unless\nspecifically documented otherwise.\n\n\nOne exception: you're allowed to add the \".git\" extension in git commands\n(clone, fetch, push, ls-remote, archive) if you wish, because git itself\nallows it, and we'd like to be as transparent as possible.  The\n\n$HOME/repositories\n prefix should never be specified.  If you do specify it,\nand things appear to work, \nsomething is wrong!\n.\n\n\nthe special gitolite-admin repo\n\uf0c1\n\n\nGitolite manages git repos.  Among them is a repo called \"gitolite-admin\",\nwhich is a very special repository that helps you add and remove users and\nrepos, as well as define access rules for them. \nMost day-to-day management\nof gitolite is done by cloning this repository, making changes to it, and\npushing the changes back to the server.\n\n\nSpecifically, it contains a directory called \"keydir\", in which you place\nfiles with names like \"alice.pub\", \"bob.pub\", etc.  These are the public keys\nof you and your users.  (Of course this applies only to ssh mode).\n\n\nIt also contains a file called \"conf/gitolite.conf\", in which you add access\nrules specifying who gets what level of access to each repo.  Here's a simple\nexample:\n\n\n\n\n# these lines were already in the file\n\n\nrepo \nfoo\n\n    RW+\n     \n=   alice\n\n    RW\n      \n=   bob\n\n\n# these lines were added just now\n\n\nrepo \nbar\n\n    RW+\n     \n=   bob\n\n    R\n       \n=   alice\n\n\n\n\n\n\nHere's what happens when you commit the changes/additions to these files and\npush them to the server.  Since we've already seen the ssh/sshd part of this\nprocess (in the \noverview\n page), we'll start off from\n\"git-receive-pack\":\n\n\n\n\n\n\n\n\nThe \ngitolite-admin\n repo has a special \npost-update\n hook, installed by\n    gitolite, which is invoked by \ngit-receive-pack\n.  This is how gitolite gets\n    in on the action.\n\n\n\n\n\n\nGitolite looks at the keys in keydir, and updates ssh's authorized keys\n    file using those keys, so ssh knows who the valid users are.  A ton of\n    detail about this is in the \nssh pages\n.\n\n\n\n\n\n\nIt then updates some internal files in \n~/.gitolite\n\n\n\n\n\n\nFor new repositories (repos that do not exist in \n~/repositories\n, but are\n    mentioned in \nconf/gitolite.conf\n), it \ncreates\n the repository.\n\n\n\n\n\n\nFor each repository, it updates a special file inside the repository that\n    contains the rules pertaining to that repository.\n\n\n\n\n\n\nAnd that, boys and girls, is how gitolite does its thing.  That is also why\nyou should NEVER touch any of those files yourself, unless you know what\nyou're doing!", 
            "title": "concepts, conventions, terminology"
        }, 
        {
            "location": "/concepts/#concepts-conventions-and-terminology", 
            "text": "(I assume you're at least somewhat familiar with  git \nitself.  If not, the  \"before you start...\"  page has a list of topics\nthat you need to be familiar with, in order to use gitolite.)  This page will help newcomers get used to what we're talking about elsewhere.\nIt also explains the special  gitolite-admin  repo and how it is used to do te\nday-to-day management of a gitolite server.", 
            "title": "concepts, conventions, and terminology"
        }, 
        {
            "location": "/concepts/#authentication-and-authorisation", 
            "text": "Gitolite does not do authentication.  It only does\nauthorisation.  So let's loosely define these words:   Authentication  is the process of verifying that you are who you claim\n  to be.  An authentication system will establish that I am the user\n  \"sitaram\" on my work system.  The one behind gmail will similarly\n  establish that I am \"sitaramc\".  And so on...  Authorisation  is the process of asking what you want to do and\n  deciding if you're allowed to do it or not.   When you install gitolite, your users will authenticate themselves to your\nserver's \"sshd\" (ssh daemon)  or  to your web server.  If authentication\nsucceeds, sshd or httpd will pass control to gitolite, which then performs the\nauthorisation check -- i.e., figure out whether to allow you to do whatever it\nis you want to whatever repo you decided to touch.", 
            "title": "authentication and authorisation"
        }, 
        {
            "location": "/concepts/#ssh-mode-and-http-mode", 
            "text": "Git allows authenticated remote access using these two mechanisms: ssh and\nhttp.  Gitolite supports both.  Ssh mode is much easier to install and setup; most systems already have\nwhatever you need, and -- except for creating the \"hosting user\" -- you don't\nneed to do anything as root.  However, your users have to generate an ssh\nkeypair for themselves (using \"ssh-keygen\") if they don't already have a\nkeypair, and they have to send you the public key (the file ending in \".pub\"),\nwhich you add to gitolite.  Http mode requires a bit more work in terms of setting things up.  Once setup,\nhowever, it may be a little easier for your users.  Authentication is by\nusername + password, which, although much less secure than ssh keypairs, is\nconceptually easier for users.", 
            "title": "ssh mode and http mode"
        }, 
        {
            "location": "/concepts/#the-hosting-user", 
            "text": "If you're wondering how it distinguishes between different\nusers when they are all logging into \"git\",  this page  has answers!  When you install gitolite in ssh mode, you pick one specific user on the Unix\nsystem to be the \"hosting user\".  This is the user whose name goes into the\nrepo URLs your users will be cloning, for example  ssh://git@server/repo , or\nthe simpler form  git@server:repo .  Usually , this is \"git\", and that is what we assume in this documentation.\nHowever, it can actually be any user on the system, and I think both the\nFedora RPM and the Debian DEB use \"gitolite\", so adjust instructions and\nexamples accordingly.   Unless otherwise stated, everything that we do \"on\nthe server\" is done in this userid (for ssh mode installations).  Of course you can have any number of \"hosting users\", but that's rare.", 
            "title": "The \"hosting user\""
        }, 
        {
            "location": "/concepts/#the-logical-repo-name", 
            "text": "Gitolite refers to repos using a logical repo name, which is whatever name you\nspecified in the gitolite.conf file (described later).  The actual repo will\nbe in  $HOME/repositories , and will have a \".git\" suffix.  So, for example,\nthe logical repo name \"foo\" will be  $HOME/repositories/foo.git  on disk, and\n\"bar/baz\" will be  $HOME/repositories/bar/baz.git .  The logical repo name is\nwhat you must use for all interactions with gitolite (within the conf file,\nrepo name arguments to gitolite commands or API functions, etc.) unless\nspecifically documented otherwise.  One exception: you're allowed to add the \".git\" extension in git commands\n(clone, fetch, push, ls-remote, archive) if you wish, because git itself\nallows it, and we'd like to be as transparent as possible.  The $HOME/repositories  prefix should never be specified.  If you do specify it,\nand things appear to work,  something is wrong! .", 
            "title": "the \"logical repo name\""
        }, 
        {
            "location": "/concepts/#the-special-gitolite-admin-repo", 
            "text": "Gitolite manages git repos.  Among them is a repo called \"gitolite-admin\",\nwhich is a very special repository that helps you add and remove users and\nrepos, as well as define access rules for them.  Most day-to-day management\nof gitolite is done by cloning this repository, making changes to it, and\npushing the changes back to the server.  Specifically, it contains a directory called \"keydir\", in which you place\nfiles with names like \"alice.pub\", \"bob.pub\", etc.  These are the public keys\nof you and your users.  (Of course this applies only to ssh mode).  It also contains a file called \"conf/gitolite.conf\", in which you add access\nrules specifying who gets what level of access to each repo.  Here's a simple\nexample:   # these lines were already in the file  repo  foo     RW+       =   alice     RW        =   bob # these lines were added just now  repo  bar     RW+       =   bob     R         =   alice   Here's what happens when you commit the changes/additions to these files and\npush them to the server.  Since we've already seen the ssh/sshd part of this\nprocess (in the  overview  page), we'll start off from\n\"git-receive-pack\":     The  gitolite-admin  repo has a special  post-update  hook, installed by\n    gitolite, which is invoked by  git-receive-pack .  This is how gitolite gets\n    in on the action.    Gitolite looks at the keys in keydir, and updates ssh's authorized keys\n    file using those keys, so ssh knows who the valid users are.  A ton of\n    detail about this is in the  ssh pages .    It then updates some internal files in  ~/.gitolite    For new repositories (repos that do not exist in  ~/repositories , but are\n    mentioned in  conf/gitolite.conf ), it  creates  the repository.    For each repository, it updates a special file inside the repository that\n    contains the rules pertaining to that repository.    And that, boys and girls, is how gitolite does its thing.  That is also why\nyou should NEVER touch any of those files yourself, unless you know what\nyou're doing!", 
            "title": "the special gitolite-admin repo"
        }, 
        {
            "location": "/quick_install/", 
            "text": "quick install and setup\n\uf0c1\n\n\n\n\n\n\nIf your Unix-fu and ssh-fu are good, this will work for you.  Otherwise,\nplease click the \"next\" button up there on the right for a more leisurely,\ndetailed, drive through the install process.\n\n\n\n\ndistro package install\n\uf0c1\n\n\nTip: look for packages called 'gitolite3' before you look for 'gitolite'.\n\n\ninstall from source\n\uf0c1\n\n\nIf you're comfortable with Unix and ssh, just copy your ssh public key from\nyour workstation to the hosting user, then do something like this:\n\n\n\nsu - git\n\nmkdir\n \n-p\n ~/bin\n\ngit clone git://github.com/sitaramc/gitolite\ngitolite/install \n-ln\n ~/bin          \n# please use absolute path here\n\ngitolite setup \n-pk\n yourname.pub\n\n\n\n\nPlease be sure to read any messages produced by these steps, especially the\nlast one, to make sure things went OK.\n\n\nNotes:\n\n\n\n\nIf your \nhosting user\n is not 'git', substitute accordingly.\n\n\nMake sure \n~/bin\n is in \n$PATH\n.  If it is not, add something to your\n    shell startup files to make it so.  If some other writable directory is in\n    the path, you can use that if you like.\n\n\nSubstitute your name for \"yourname\" :-)", 
            "title": "(unix/ssh experts) quick install and setup"
        }, 
        {
            "location": "/quick_install/#quick-install-and-setup", 
            "text": "If your Unix-fu and ssh-fu are good, this will work for you.  Otherwise,\nplease click the \"next\" button up there on the right for a more leisurely,\ndetailed, drive through the install process.", 
            "title": "quick install and setup"
        }, 
        {
            "location": "/quick_install/#distro-package-install", 
            "text": "Tip: look for packages called 'gitolite3' before you look for 'gitolite'.", 
            "title": "distro package install"
        }, 
        {
            "location": "/quick_install/#install-from-source", 
            "text": "If you're comfortable with Unix and ssh, just copy your ssh public key from\nyour workstation to the hosting user, then do something like this:  \nsu - git mkdir   -p  ~/bin\n\ngit clone git://github.com/sitaramc/gitolite\ngitolite/install  -ln  ~/bin           # please use absolute path here \ngitolite setup  -pk  yourname.pub  Please be sure to read any messages produced by these steps, especially the\nlast one, to make sure things went OK.  Notes:   If your  hosting user  is not 'git', substitute accordingly.  Make sure  ~/bin  is in  $PATH .  If it is not, add something to your\n    shell startup files to make it so.  If some other writable directory is in\n    the path, you can use that if you like.  Substitute your name for \"yourname\" :-)", 
            "title": "install from source"
        }, 
        {
            "location": "/install/", 
            "text": "install and setup\n\uf0c1\n\n\n\n\nIMPORTANT\n\n\nAlmost nothing in gitolite requires \nroot\n (with some obvious exceptions).\nUnless the documentation says \"do this from \nroot\n\", assume it is to be\ndone from the \nhosting user\n account.\n\n\n\n\n\n\n\n\nThis page is about an ssh mode installation.  It should work for most\npeople, but if you are an absolute newbie to Unix etc., you may want to\nclick \nhere\n for a very detailed, step-by-step,\nhopefully fool-proof set of instructions.\n\n\nIf ssh is not your thing, there's a different page for \nhttp mode\n\ninstallation.\n\n\n\n\nbefore you start... (pre-requisites)\n\uf0c1\n\n\nyour skills\n\uf0c1\n\n\n\n\n\n\nPlease DO read the \nconcepts and terminology\n page before doing\n    anything here.\n\n\n\n\n\n\nIf you're installing gitolite, you're a \"system admin\", like it or not.\n    Since most people use the ssh mode, \nssh\n is therefore a necessary\n    skill.  Please take the time to learn at least enough to get passwordless\n    access working.\n\n\n\n\n\n\nYou also need to be somewhat familiar with git itself.  You cannot\n    administer a whole bunch of git repositories if you don't know the basics\n    of git.\n\n\nPlease make sure you understand at least the following concepts: \nbare\nversus non-bare repos, cloning a repo, making changes and committing them,\npushing commits to a 'remote', the special remote called 'origin',\ndifference between a fast-forward push and a rewind push, 'refs' (i.e.,\nbranches and tags)\n.\n\n\nIt also helps to understand git's hooks mechanism, git-config, and so on.\n\n\n\n\n\n\nSome familiarity with Unix and shells is probably required.\n\n\n\n\n\n\nRegular expressions\n are a big part of gitolite in many places but\n    familiarity is not necessary to do \nbasic\n access control.\n\n\n\n\n\n\nyour server\n\uf0c1\n\n\n\n\nAny Unix system with a posix compatible \"sh\" and a \nsane\n file system.\n\n\nGit version 1.6.6 or later.\n\n\nPerl 5.8.8 or later (see \nhttps://lwn.net/Articles/348084/\n if this does\n    not seem to be enough).\n\n\n\n\nOpenssh (almost any version).  Optional if you're using \nsmart http\n.\n\n\n\n\nIMPORTANT\n: although a default openssh config will not do this (AFAIK),\n    \ndo not\n allow the user to set environment variables if you care about\n    security at all.\n\n\n\n\n\n\n\n\nA dedicated Unix userid to be the hosting user, usually \"git\" but it can\n    be any user, even your own normal one.  (If you're using an RPM/DEB the\n    install probably created one called \"gitolite\").\n\n\n\n\n\n\nyou and your users' clients\n\uf0c1\n\n\n\n\nOpenssh client.\n\n\nGit 1.6.6 or later.  Almost any git client will work, as long as it knows\n    how to use ssh keys and send the right one along.\n\n\n\n\ncautions and caveats\n\uf0c1\n\n\nPlease take note of the following points\n:\n\n\n\n\n\n\nIf you're bringing existing repos into gitolite, please see\n    \nthis\n first.\n\n\n\n\n\n\nGitolite expects all the directories and files it manages/uses to be owned\n    by the \nhosting user\n and not have strange permissions and ownerships.\n\n\n\n\n\n\nGitolite does NOT like it if you fiddle with \nfiles and directories it cares about\n in any way except as directed in the documentation.\n\n\n\n\n\n\nGitolite depends on several system-installed packages: openssh, git, perl,\n    sh being the main ones.  They should all be configured sensibly and with\n    most of the normal defaults.  (For example, if your sshd config says the\n    authorized keys file should be placed in some directory other than the\n    default, expect trouble).\n\n\n\n\n\n\ntrying out gitolite safely\n\uf0c1\n\n\nIf you're not sure if gitolite is right for you or your system, it's easy to\ntake it for a trial run, in ssh mode, and play with all of its features\n(except mirroring).  This is very safe, and does not affect anything on your\nsystem permanently.\n\n\nWARNING: this will clobber \nthese files and\ndirectories\n in your \n$HOME\n.  Ideally, you should use a throwaway\nuserid\n.\n\n\nJust create a \nthrow-away userid\n, log in to it, then run these commands:\n\n\ngit clone git://github.com/sitaramc/gitolite\ncd gitolite\nprove t/ssh*\n\n\n\nYou will get an error that forces you to read \nt/README\n and set an env var\nbefore the test can proceed.  This is intentional; I've had people who don't\npay attention to the \"data loss\" warning, and then complain that it was not\nprominent enough.  Forcing them to read a much smaller page appears to focus\ntheir attention better!\n\n\nIf it doesn't work, re-read this page to see if you may have missed something\nthat gitolite requires, or ask for \nsupport\n.\n\n\nIf it works, you get a gitolite installation with 7 gitolite users (\"admin\",\nand \"u1\" through \"u6\").\n\n\nDon't forget that the client and the server are all on the same user on the\nsame machine; we're \nsimulating\n 7 gitolite users using ssh keys!  (How?\nMaybe \n~/.ssh/config\n will give you a hint).\n\n\nURLs look like \nuser:repo\n, so for example you can clone the admin repo by\n\ngit clone admin:gitolite-admin\n.  Remote commands look like \nssh u1 info\n.\n\n\nSo start by cloning the admin repo, and try out whatever you want!\n\n\ninstall and setup\n\uf0c1\n\n\nThis section talks about installing the software manually (i.e., not using a\npackage manager) and setting it up.  The install step gets the code to where\nyou want it.  The setup step creates the files and directories gitolite needs,\nincluding the special gitolite-admin repo, and makes you an administrator so\nyou can manage it remotely.\n\n\nIf you install gitolite using a package manager, you should check your\ndistro-standard mechanisms or distro-supplied documentation for how to\ncomplete the installation.\n\n\n\n\nImportant:\n\n\nOn package manager installs\n: make sure you get gitolite \nv3.x\n.\nThe correct package you want may be called \"gitolite3\", even though\n\"gitolite\" also exists.  If you want to know what the latest gitolite\nversion is, the gitolite \nCHANGELOG\n will tell you.\n\n\n\n\n(a graphical overview)\n\uf0c1\n\n\nHere's a graphical overview of what files/directories are affected by each\nstep in the install+setup process.  Alice is installing gitolite, with herself\nas the administrator.\n\n\n\n\nThe files names you see there are \nonly for information\n.  You do \nnot\n\nhave to do anything to them yourself; in fact you should not!  You only need\nthe command for each numbered step shown:\n\n\n\n\nCopy the admin's pubkey to the server as \"alice.pub\".\n\n\nRun \ngit clone git://github.com/sitaramc/gitolite\n or equivalent.\n\n\nRun \ngitolite/install -ln\n.\n\n\nRun \ngitolite setup -pk alice.pub\n.\n\n\n\n\nNote also that you only need ONE real user on the server.  In our example it\nis git.  In particular, you do NOT create Unix userids for your gitolite\nusers.\n\n\nprepare for the install\n\uf0c1\n\n\nThe simplest, most foolproof, way of ensuring that your gitolite install +\nsetup will succeed is to use a brand new userid as the hosting user.  If that\nis not possible, make sure the following do NOT exist in that user's home\ndirectory: \n~/.gitolite.rc\n, \n~/.gitolite\n, \n~/repositories\n, and\n\n~/.ssh/authorized_keys\n.\n\n\nBefore you go trashing that authorized keys file, please make sure you\nknow the password to the 'git' user, or know the root password on the\nmachine!\n\n\nThe authorized keys file \ncan\n exist, actually, as long as none of the\nkeys you intend to use with gitolite are present in it.  But again, if you're\nnot an ssh guru, you should probably play safe.\n\n\nget the software\n\uf0c1\n\n\nGet the software using git-clone:\n\n\n\ngit clone git://github.com/sitaramc/gitolite\n\n\n\n\nYou can use this as is, or you can check out the latest tag to make sure\nyou're running a tagged version instead of just the current 'master'.\n\n\ninstall\n\uf0c1\n\n\nGitolite has one server side command: \ngitolite\n.  You don't need to place it\nanywhere special; in the worst case you can run it with the full path.\n\n\n\"Installation\" consists of deciding where to put it:\n\n\n\n\nKeep the sources anywhere and use the full path to run the \ngitolite\n\n    command.\n\n\nKeep the sources anywhere and symlink \njust\n the \ngitolite\n program to\n    some directory on your \n$PATH\n.\n\n\nCopy the sources somewhere and use that path to run the \ngitolite\n\n    command.\n\n\n\n\nOption 2 is the best for general use, but here's the scoop on all of them:\n\n\n\n\n# option 1\n\ngitolite/install\n\n\n# option 2\n\ngitolite/install \n-ln\n\n\n# defaults to $HOME/bin (which is assumed to exist)\n\n\n#   ** or **\n\n\n# or use a specific directory (please supply FULL path):\n\ngitolite/install \n-ln\n /usr/local/bin\n\n\n# option 3\n\n\n# (again, please supply a FULL path)\n\ngitolite/install \n-to\n /usr/local/gitolite/bin\n\n\n\n\nCreating a symlink doesn't need a separate program but 'install' also runs\n\ngit describe\n to create a VERSION file, which can be very important if you\nwant support :-)\n\n\nsetup\n\uf0c1\n\n\nFor the first-time setup, you need to have a public key file (usually from\nthe admin's workstation) ready.  If the main gitolite admin's username is\n\"alice\", this file should be named \"alice.pub\" and copied to the server.\n\n\nOnce that is done, run:\n\n\ngitolite setup -pk alice.pub\n\n\n\nIf that completes without any warnings, you are done.  If it had a warning,\nyou probably supplied a key which already has shell access to the server.\nThat won't work; you'll have to generate and use a different key pair for\ngitolite access and use \nhost aliases\n to distinguish between the two.\nWhile you're there, read both the \nssh\n pages.  Twice.\n\n\n\n\nThe 'setup' command has other uses, so you will be running it at other times\nafter the install as well:\n\n\n\n\n\n\nTo setup the update hook when you move \nexisting\n repos to gitolite.\n    This also applies if someone has been fiddling with the hooks on some\n    repos and you want to put them all right quickly.\n\n\n\n\n\n\nTo replace a \nlost admin key\n.\n\n\n\n\n\n\nTo setup gitolite for http mode (run 'gitolite setup -h' for more info).\n\n\n\n\n\n\nWhen in doubt, run \ngitolite setup\n anyway; it doesn't do any harm, though it\nmay take a minute or so if you have more than a few thousand repos!\n\n\nupgrades\n\uf0c1\n\n\n\n\nUpdate your clone of the gitolite source.\n\n\nRepeat the install command you used earlier (make sure you use the same\n    arguments as before).\n\n\nRun \ngitolite setup\n.\n\n\n\n\nAfter you upgrade gitolite, you may also want to upgrade your rc file\n(\n~/.gitolite.rc\n).  See the \nrc file\n documentation for that.\n\n\nmoving servers\n\uf0c1\n\n\n\n\n\nNothing in any of the gitolite install/setup/etc will ever touch the \ndata\n in\nany repository except the gitolite-admin repo.  The only thing it will\nnormally touch is the \nupdate\n hook.  So one fool-proof way of \"moving\"\nservers is this:\n\n\n\n\n\n\nClone the latest gitolite-admin repo from the old server to your\n    workstation.  Make sure you have an admin key that has RW+ rights to the\n    gitolite-admin repo; you will need this later.\n\n\n\n\n\n\nInstall gitolite on the new server, using the same key for the admin as\n    for the old server.\n\n\n\n\n\n\nCopy the \nrc\n file from the old server, overwriting this one.\n\n\n\n\n\n\nDisable\n the old server so people won't push to it.\n\n\n\n\n\n\nCopy all the repos over from the old server.  Make sure the files end up\n    with the right ownership and permissions; if not, chown/chmod them.\n\n\nThe gitolite-admin repo already exists on the new server (it's just a bare\nbones conf file).  Do NOT overwrite it.  (Not because it contains anything\nuseful, but because the next step will then fail!)\n\n\n\n\n\n\nGo to the clone you made in step 1, add a new remote (or change an\n    existing one) to point to the new server, then \ngit push -f\n to it.\n\n\n\n\n\n\nRun \ngitolite setup\n on the server.", 
            "title": "normal ssh mode install and setup"
        }, 
        {
            "location": "/install/#install-and-setup", 
            "text": "IMPORTANT  Almost nothing in gitolite requires  root  (with some obvious exceptions).\nUnless the documentation says \"do this from  root \", assume it is to be\ndone from the  hosting user  account.     This page is about an ssh mode installation.  It should work for most\npeople, but if you are an absolute newbie to Unix etc., you may want to\nclick  here  for a very detailed, step-by-step,\nhopefully fool-proof set of instructions.  If ssh is not your thing, there's a different page for  http mode \ninstallation.", 
            "title": "install and setup"
        }, 
        {
            "location": "/install/#before-you-start-pre-requisites", 
            "text": "", 
            "title": "before you start... (pre-requisites)"
        }, 
        {
            "location": "/install/#your-skills", 
            "text": "Please DO read the  concepts and terminology  page before doing\n    anything here.    If you're installing gitolite, you're a \"system admin\", like it or not.\n    Since most people use the ssh mode,  ssh  is therefore a necessary\n    skill.  Please take the time to learn at least enough to get passwordless\n    access working.    You also need to be somewhat familiar with git itself.  You cannot\n    administer a whole bunch of git repositories if you don't know the basics\n    of git.  Please make sure you understand at least the following concepts:  bare\nversus non-bare repos, cloning a repo, making changes and committing them,\npushing commits to a 'remote', the special remote called 'origin',\ndifference between a fast-forward push and a rewind push, 'refs' (i.e.,\nbranches and tags) .  It also helps to understand git's hooks mechanism, git-config, and so on.    Some familiarity with Unix and shells is probably required.    Regular expressions  are a big part of gitolite in many places but\n    familiarity is not necessary to do  basic  access control.", 
            "title": "your skills"
        }, 
        {
            "location": "/install/#your-server", 
            "text": "Any Unix system with a posix compatible \"sh\" and a  sane  file system.  Git version 1.6.6 or later.  Perl 5.8.8 or later (see  https://lwn.net/Articles/348084/  if this does\n    not seem to be enough).   Openssh (almost any version).  Optional if you're using  smart http .   IMPORTANT : although a default openssh config will not do this (AFAIK),\n     do not  allow the user to set environment variables if you care about\n    security at all.     A dedicated Unix userid to be the hosting user, usually \"git\" but it can\n    be any user, even your own normal one.  (If you're using an RPM/DEB the\n    install probably created one called \"gitolite\").", 
            "title": "your server"
        }, 
        {
            "location": "/install/#you-and-your-users-clients", 
            "text": "Openssh client.  Git 1.6.6 or later.  Almost any git client will work, as long as it knows\n    how to use ssh keys and send the right one along.", 
            "title": "you and your users' clients"
        }, 
        {
            "location": "/install/#cautions-and-caveats", 
            "text": "Please take note of the following points :    If you're bringing existing repos into gitolite, please see\n     this  first.    Gitolite expects all the directories and files it manages/uses to be owned\n    by the  hosting user  and not have strange permissions and ownerships.    Gitolite does NOT like it if you fiddle with  files and directories it cares about  in any way except as directed in the documentation.    Gitolite depends on several system-installed packages: openssh, git, perl,\n    sh being the main ones.  They should all be configured sensibly and with\n    most of the normal defaults.  (For example, if your sshd config says the\n    authorized keys file should be placed in some directory other than the\n    default, expect trouble).", 
            "title": "cautions and caveats"
        }, 
        {
            "location": "/install/#trying-out-gitolite-safely", 
            "text": "If you're not sure if gitolite is right for you or your system, it's easy to\ntake it for a trial run, in ssh mode, and play with all of its features\n(except mirroring).  This is very safe, and does not affect anything on your\nsystem permanently.  WARNING: this will clobber  these files and\ndirectories  in your  $HOME .  Ideally, you should use a throwaway\nuserid .  Just create a  throw-away userid , log in to it, then run these commands:  git clone git://github.com/sitaramc/gitolite\ncd gitolite\nprove t/ssh*  You will get an error that forces you to read  t/README  and set an env var\nbefore the test can proceed.  This is intentional; I've had people who don't\npay attention to the \"data loss\" warning, and then complain that it was not\nprominent enough.  Forcing them to read a much smaller page appears to focus\ntheir attention better!  If it doesn't work, re-read this page to see if you may have missed something\nthat gitolite requires, or ask for  support .  If it works, you get a gitolite installation with 7 gitolite users (\"admin\",\nand \"u1\" through \"u6\").  Don't forget that the client and the server are all on the same user on the\nsame machine; we're  simulating  7 gitolite users using ssh keys!  (How?\nMaybe  ~/.ssh/config  will give you a hint).  URLs look like  user:repo , so for example you can clone the admin repo by git clone admin:gitolite-admin .  Remote commands look like  ssh u1 info .  So start by cloning the admin repo, and try out whatever you want!", 
            "title": "trying out gitolite safely"
        }, 
        {
            "location": "/install/#install-and-setup_1", 
            "text": "This section talks about installing the software manually (i.e., not using a\npackage manager) and setting it up.  The install step gets the code to where\nyou want it.  The setup step creates the files and directories gitolite needs,\nincluding the special gitolite-admin repo, and makes you an administrator so\nyou can manage it remotely.  If you install gitolite using a package manager, you should check your\ndistro-standard mechanisms or distro-supplied documentation for how to\ncomplete the installation.   Important:  On package manager installs : make sure you get gitolite  v3.x .\nThe correct package you want may be called \"gitolite3\", even though\n\"gitolite\" also exists.  If you want to know what the latest gitolite\nversion is, the gitolite  CHANGELOG  will tell you.", 
            "title": "install and setup"
        }, 
        {
            "location": "/install/#a-graphical-overview", 
            "text": "Here's a graphical overview of what files/directories are affected by each\nstep in the install+setup process.  Alice is installing gitolite, with herself\nas the administrator.   The files names you see there are  only for information .  You do  not \nhave to do anything to them yourself; in fact you should not!  You only need\nthe command for each numbered step shown:   Copy the admin's pubkey to the server as \"alice.pub\".  Run  git clone git://github.com/sitaramc/gitolite  or equivalent.  Run  gitolite/install -ln .  Run  gitolite setup -pk alice.pub .   Note also that you only need ONE real user on the server.  In our example it\nis git.  In particular, you do NOT create Unix userids for your gitolite\nusers.", 
            "title": "(a graphical overview)"
        }, 
        {
            "location": "/install/#prepare-for-the-install", 
            "text": "The simplest, most foolproof, way of ensuring that your gitolite install +\nsetup will succeed is to use a brand new userid as the hosting user.  If that\nis not possible, make sure the following do NOT exist in that user's home\ndirectory:  ~/.gitolite.rc ,  ~/.gitolite ,  ~/repositories , and ~/.ssh/authorized_keys .  Before you go trashing that authorized keys file, please make sure you\nknow the password to the 'git' user, or know the root password on the\nmachine!  The authorized keys file  can  exist, actually, as long as none of the\nkeys you intend to use with gitolite are present in it.  But again, if you're\nnot an ssh guru, you should probably play safe.", 
            "title": "prepare for the install"
        }, 
        {
            "location": "/install/#get-the-software", 
            "text": "Get the software using git-clone:  \ngit clone git://github.com/sitaramc/gitolite  You can use this as is, or you can check out the latest tag to make sure\nyou're running a tagged version instead of just the current 'master'.", 
            "title": "get the software"
        }, 
        {
            "location": "/install/#install", 
            "text": "Gitolite has one server side command:  gitolite .  You don't need to place it\nanywhere special; in the worst case you can run it with the full path.  \"Installation\" consists of deciding where to put it:   Keep the sources anywhere and use the full path to run the  gitolite \n    command.  Keep the sources anywhere and symlink  just  the  gitolite  program to\n    some directory on your  $PATH .  Copy the sources somewhere and use that path to run the  gitolite \n    command.   Option 2 is the best for general use, but here's the scoop on all of them:   # option 1 \ngitolite/install # option 2 \ngitolite/install  -ln  # defaults to $HOME/bin (which is assumed to exist)  #   ** or **  # or use a specific directory (please supply FULL path): \ngitolite/install  -ln  /usr/local/bin # option 3  # (again, please supply a FULL path) \ngitolite/install  -to  /usr/local/gitolite/bin  Creating a symlink doesn't need a separate program but 'install' also runs git describe  to create a VERSION file, which can be very important if you\nwant support :-)", 
            "title": "install"
        }, 
        {
            "location": "/install/#setup", 
            "text": "For the first-time setup, you need to have a public key file (usually from\nthe admin's workstation) ready.  If the main gitolite admin's username is\n\"alice\", this file should be named \"alice.pub\" and copied to the server.  Once that is done, run:  gitolite setup -pk alice.pub  If that completes without any warnings, you are done.  If it had a warning,\nyou probably supplied a key which already has shell access to the server.\nThat won't work; you'll have to generate and use a different key pair for\ngitolite access and use  host aliases  to distinguish between the two.\nWhile you're there, read both the  ssh  pages.  Twice.   The 'setup' command has other uses, so you will be running it at other times\nafter the install as well:    To setup the update hook when you move  existing  repos to gitolite.\n    This also applies if someone has been fiddling with the hooks on some\n    repos and you want to put them all right quickly.    To replace a  lost admin key .    To setup gitolite for http mode (run 'gitolite setup -h' for more info).    When in doubt, run  gitolite setup  anyway; it doesn't do any harm, though it\nmay take a minute or so if you have more than a few thousand repos!", 
            "title": "setup"
        }, 
        {
            "location": "/install/#upgrades", 
            "text": "Update your clone of the gitolite source.  Repeat the install command you used earlier (make sure you use the same\n    arguments as before).  Run  gitolite setup .   After you upgrade gitolite, you may also want to upgrade your rc file\n( ~/.gitolite.rc ).  See the  rc file  documentation for that.", 
            "title": "upgrades"
        }, 
        {
            "location": "/install/#moving-servers", 
            "text": "Nothing in any of the gitolite install/setup/etc will ever touch the  data  in\nany repository except the gitolite-admin repo.  The only thing it will\nnormally touch is the  update  hook.  So one fool-proof way of \"moving\"\nservers is this:    Clone the latest gitolite-admin repo from the old server to your\n    workstation.  Make sure you have an admin key that has RW+ rights to the\n    gitolite-admin repo; you will need this later.    Install gitolite on the new server, using the same key for the admin as\n    for the old server.    Copy the  rc  file from the old server, overwriting this one.    Disable  the old server so people won't push to it.    Copy all the repos over from the old server.  Make sure the files end up\n    with the right ownership and permissions; if not, chown/chmod them.  The gitolite-admin repo already exists on the new server (it's just a bare\nbones conf file).  Do NOT overwrite it.  (Not because it contains anything\nuseful, but because the next step will then fail!)    Go to the clone you made in step 1, add a new remote (or change an\n    existing one) to point to the new server, then  git push -f  to it.    Run  gitolite setup  on the server.", 
            "title": "moving servers"
        }, 
        {
            "location": "/fool_proof_setup/", 
            "text": "fool-proof, step-by-step, install and setup\n\uf0c1\n\n\n\n\nThis page is useful if the normal \ninstall\n instructions did not work for\nyou.\n\n\npre-requisites, etc\n\uf0c1\n\n\nThese are the pre-requisites:\n\n\n\n\nAny Linux machine on which git has already been installed.\n\n\nProbably any BSD or legacy system like Solaris will also work, but I have\n    not tested them.\n\n\nI do not consider Apple devices to be Unix enough; it should work, but\n    please do not ask me for help if it does not.\n\n\n\n\n\n\n\n\nThis page has several restrictions and constraints that seem unnecessary to\npeople who \ndo\n understand ssh. That's the whole point -- I'm compensating\nfor lack of ssh knowledge by removing things that trip people up.\n\n\nIf even this page does not help you install gitolite, I probably cannot help\nyou.  Either you did not follow the instructions carefully \n(maybe some task has to be run on your workstation, but you ran\nit on the server, or you ran something as root when it should be as the\nhosting user, etc.)\n, or your environment is far too different from\nstandard Unix, or you have some other problem.  In any case, it is not\nsomething I can help with.  Sorry.\n\n\nassumptions\n\uf0c1\n\n\n\n\n\n\nYour name is Ron.  Substitute accordingly in the instructions below.\n\n\n\n\n\n\nYou have a workstation.\n\n\n\n\n\n\nYou have a server called \nserver\n.\n\n\n\n\n\n\nYou have root access on this server.\n\n\n\n\n\n\ninstallation tasks\n\uf0c1\n\n\n\n\n\n\nCreate a new userid on the server, say \ngit\n.  This will be the \nhosting\n    user\n.  (\"hosting user\" means when you're done installing, your users\n    will use URLs like \ngit@server:reponame\n or \nssh://git@server/reponame\n).\n\n\nMake sure this is a NEW userid\n.\n\n\nIf the name you want already exists, then:\n\n\n\n\nLog in as root.\n\n\nIf you have any data on that user's HOME directory save it somewhere\n    else.\n\n\nDelete the userid.\n\n\nCompletely wipe out (erase) the home directory of the user (since on\n    most systems merely deleting the user does not remove the home\n    directory).\n\n\nRe-create the userid again.\n\n\n\n\n\n\n\n\nIf you don't already have one, make yourself an ssh keypair \non your\n    workstation\n.\n\n\nDo NOT add this public key to the authorised keys file on the newly\ncreated hosting user!\n\n\nYour ONLY access to the new (\ngit\n) userid should be by logging onto the\nserver as root, then running \nsu - git\n.\n\n\n\n\n\n\nNow copy the pubkey from your workstation (\n~/.ssh/id_rsa.pub\n) to the\n    server as \n/tmp/ron.pub\n.  (Your name is Ron, remember?)\n\n\n\n\n\n\nLog on to the server as root.\n\n\n\n\n\n\nSwitch to the \ngit\n user:\n\n\nsu - git\n\n\n\n\n\n\n\nClone the gitolite source code\n\n\ngit clone git://github.com/sitaramc/gitolite\n\n\n\n\n\n\n\nInstall it\n\n\ncd $HOME\nmkdir -p bin\ngitolite/install -to $HOME/bin\n\n\n\n\n\n\n\nSet it up\n\n\ncd $HOME\n$HOME/bin/gitolite setup -pk /tmp/ron.pub\n\n\n\n\n\n\n\nNow go to your workstation and type in\n\n\ngit ls-remote git@server:gitolite-admin\n\n\n\nThis should return something like\n\n\n9dd8aab60bac5e54ccf887a87b4f3d35c96b05e4    HEAD\n9dd8aab60bac5e54ccf887a87b4f3d35c96b05e4    refs/heads/master\n\n\n\n(do I have to mention that your SHAs will be different?)\n\n\n\n\n\n\nadministration tasks\n\uf0c1\n\n\nMost day-to-day administration is done by making changes to a clone of the\ngitolite-admin repo and pushing.  (There are some things that are done by\nediting \n$HOME/.gitolite.rc\n on the server, but those are too advanced for\nthis tutorial so we will ignore that).\n\n\n\n\n\n\nTo start administering gitolite, clone the gitolite-admin repo:\n\n\ngit clone git@server:gitolite-admin\n\n\n\n\n\n\n\nNow go to the new directory this creates, and look around:\n\n\ncd gitolite-admin\nls -A\n\n\n\nwhich gives you\n\n\nconf/  .git/  keydir/\n\n\n\nIgnoring the \".git\" and exploring further:\n\n\nls -A conf keydir\n\n\n\nwhich says:\n\n\nconf:\ngitolite.conf\n\nkeydir:\nron.pub\n\n\n\n\n\n\n\nLet's say you want to add your colleague Alice.  She has sent you her ssh\n    public key by email (the file is called \nid_rsa.pub\n).  Save this file as\n    /tmp/alice.pub, then do this:\n\n\n# still in your gitolite-admin clone, from the previous step\ncp /tmp/alice.pub keydir\ngit add keydir\ngit commit -m 'new user alice'\ngit push\n\n\n\n\n\n\n\nWell, that might not be sufficient.  There aren't any new repos for alice\n    to play with, yet.  So here's what you do: edit \"conf/gitolite.conf\" and\n    add something like to the end:\n\n\nrepo foo\n    RW+     =   alice\n    R       =   ron\n\n\n\nSave the file, then \ngit add conf; git commit -m 'new repo foo'; git\npush\n.\n\n\nThis will automatically create a brand new repo called \"foo\" on the server, and\nalice will be able to clone from it, or push anything to it.", 
            "title": "(if all else fails) fool-proof, step-by-step, install and setup"
        }, 
        {
            "location": "/fool_proof_setup/#fool-proof-step-by-step-install-and-setup", 
            "text": "This page is useful if the normal  install  instructions did not work for\nyou.", 
            "title": "fool-proof, step-by-step, install and setup"
        }, 
        {
            "location": "/fool_proof_setup/#pre-requisites-etc", 
            "text": "These are the pre-requisites:   Any Linux machine on which git has already been installed.  Probably any BSD or legacy system like Solaris will also work, but I have\n    not tested them.  I do not consider Apple devices to be Unix enough; it should work, but\n    please do not ask me for help if it does not.     This page has several restrictions and constraints that seem unnecessary to\npeople who  do  understand ssh. That's the whole point -- I'm compensating\nfor lack of ssh knowledge by removing things that trip people up.  If even this page does not help you install gitolite, I probably cannot help\nyou.  Either you did not follow the instructions carefully  (maybe some task has to be run on your workstation, but you ran\nit on the server, or you ran something as root when it should be as the\nhosting user, etc.) , or your environment is far too different from\nstandard Unix, or you have some other problem.  In any case, it is not\nsomething I can help with.  Sorry.", 
            "title": "pre-requisites, etc"
        }, 
        {
            "location": "/fool_proof_setup/#assumptions", 
            "text": "Your name is Ron.  Substitute accordingly in the instructions below.    You have a workstation.    You have a server called  server .    You have root access on this server.", 
            "title": "assumptions"
        }, 
        {
            "location": "/fool_proof_setup/#installation-tasks", 
            "text": "Create a new userid on the server, say  git .  This will be the  hosting\n    user .  (\"hosting user\" means when you're done installing, your users\n    will use URLs like  git@server:reponame  or  ssh://git@server/reponame ).  Make sure this is a NEW userid .  If the name you want already exists, then:   Log in as root.  If you have any data on that user's HOME directory save it somewhere\n    else.  Delete the userid.  Completely wipe out (erase) the home directory of the user (since on\n    most systems merely deleting the user does not remove the home\n    directory).  Re-create the userid again.     If you don't already have one, make yourself an ssh keypair  on your\n    workstation .  Do NOT add this public key to the authorised keys file on the newly\ncreated hosting user!  Your ONLY access to the new ( git ) userid should be by logging onto the\nserver as root, then running  su - git .    Now copy the pubkey from your workstation ( ~/.ssh/id_rsa.pub ) to the\n    server as  /tmp/ron.pub .  (Your name is Ron, remember?)    Log on to the server as root.    Switch to the  git  user:  su - git    Clone the gitolite source code  git clone git://github.com/sitaramc/gitolite    Install it  cd $HOME\nmkdir -p bin\ngitolite/install -to $HOME/bin    Set it up  cd $HOME\n$HOME/bin/gitolite setup -pk /tmp/ron.pub    Now go to your workstation and type in  git ls-remote git@server:gitolite-admin  This should return something like  9dd8aab60bac5e54ccf887a87b4f3d35c96b05e4    HEAD\n9dd8aab60bac5e54ccf887a87b4f3d35c96b05e4    refs/heads/master  (do I have to mention that your SHAs will be different?)", 
            "title": "installation tasks"
        }, 
        {
            "location": "/fool_proof_setup/#administration-tasks", 
            "text": "Most day-to-day administration is done by making changes to a clone of the\ngitolite-admin repo and pushing.  (There are some things that are done by\nediting  $HOME/.gitolite.rc  on the server, but those are too advanced for\nthis tutorial so we will ignore that).    To start administering gitolite, clone the gitolite-admin repo:  git clone git@server:gitolite-admin    Now go to the new directory this creates, and look around:  cd gitolite-admin\nls -A  which gives you  conf/  .git/  keydir/  Ignoring the \".git\" and exploring further:  ls -A conf keydir  which says:  conf:\ngitolite.conf\n\nkeydir:\nron.pub    Let's say you want to add your colleague Alice.  She has sent you her ssh\n    public key by email (the file is called  id_rsa.pub ).  Save this file as\n    /tmp/alice.pub, then do this:  # still in your gitolite-admin clone, from the previous step\ncp /tmp/alice.pub keydir\ngit add keydir\ngit commit -m 'new user alice'\ngit push    Well, that might not be sufficient.  There aren't any new repos for alice\n    to play with, yet.  So here's what you do: edit \"conf/gitolite.conf\" and\n    add something like to the end:  repo foo\n    RW+     =   alice\n    R       =   ron  Save the file, then  git add conf; git commit -m 'new repo foo'; git\npush .  This will automatically create a brand new repo called \"foo\" on the server, and\nalice will be able to clone from it, or push anything to it.", 
            "title": "administration tasks"
        }, 
        {
            "location": "/http/", 
            "text": "installing on a smart http git server\n\uf0c1\n\n\n\n\n\n\nNote:\n\n\n\"smart http\" refers to the feature that came with git 1.6.6, late 2009 or\nso.  The base documentation for this is \nman git-http-backend\n.  Do\n\nNOT\n read \nDocumentation/howto/setup-git-server-over-http.txt\n and\nthink that is the same or even relevant -- that is from 2006 and is quite\ndifferent (and arguably obsolete).\n\n\n\n\nWARNINGS and important notes\n\uf0c1\n\n\n\n\n\n\nPlease read \nauthentication versus authorisation\n first, and make\n    sure you understand what is gitolite's responsibility and what isn't.\n\n\n\n\n\n\nI have tested this only on stock Fedora (whatever is the current version);\n    YDMV.\n\n\n\n\n\n\nassumptions:\n\uf0c1\n\n\n\n\nApache 2.x and git installed.\n\n\nHttpd runs under the \"apache\" userid; adjust instructions below if not.\n\n\nSimilarly for \"/var/www\" and other file names/locations.\n\n\n\n\ninstructions\n\uf0c1\n\n\nIn place of detailed instructions, there is a script called\n\nt/smart-http.root-setup\n.  \nDo NOT run this script as is -- it is actually\nmeant for my testing setup and deletes stuff\n.  However, it does provide an\nexcellent (and working!) narration of what you need to do to install gitolite\nin smart http mode.\n\n\nMake a copy of the script, go through it carefully, (possibly removing lines\nthat delete files etc.), change values per your system, and only then run it.\n\n\n\n\nNote:\n\n\nThe \nGIT_PROJECT_ROOT\n variable (see \"man git-http-backend\") is no longer\noptional.  Make sure you set it to some place outside apache's\n\nDOCUMENT_ROOT\n.\n\n\n\n\nallowing unauthenticated access\n\uf0c1\n\n\nIf you want users to see repos without performing any HTTP authentication, you\nshould first decide what repos they should have unauthenticated access to:\n\n\nrepo foo bar baz        # or maybe '@all'?\n    R   =   nobody\n\n\n\nThen in the rc file (\n~/.gitolite.rc\n), in the section marked \"rc variables\nused by various features\", add this (including the trailing comma):\n\n\nHTTP_ANON_USER      =\n  'nobody',\n\n\n\nMaking repositories available to both ssh and http mode clients\n\uf0c1\n\n\nThis section has been contributed by Thomas Hager (duke at sigsegv dot at),\nand is available \nhere\n.\n\n\nusage\n\uf0c1\n\n\nclient side\n\uf0c1\n\n\nGit URLs look like \nhttp://user:password@server/git/reponame.git\n.\n\n\nThe custom commands, like \"info\", \"expand\" should be handled as follows.  The\ncommand name will come just after the \n/git/\n, followed by a \n?\n, followed by\nthe arguments, with \n+\n representing a space.  Here are some examples:\n\n\n\n\n# ssh git@server info\n\ncurl \nhttp://user:password@server/git/info\n\n\n# ssh git@server info repopatt\n\ncurl \nhttp://user:password@server/git/info?repopatt\n\n\n# ssh git@server info repopatt user1 user2\n\ncurl \nhttp://user:password@server/git/info?repopatt+user1+user2\n\n\n\n\n\nWith a few nice shell aliases, you won't even notice the horrible convolutions\nhere ;-)  See t/smart-http for a couple of useful ones.\n\n\nserver side\n\uf0c1\n\n\nThe \ngitolite\n command (for example, \ngitolite compile\n, \ngitolite query-rc\n,\nand so on) \ncan\n be run on the server, but it's not straightforward.  Assuming\nyou installed exactly as given in this page, you should\n\n\n\n\nget a shell by using, say, \nsu -s /bin/bash - apache\n\n\nrun \nexport HOME=$HOME/gitolite-home\n\n\nrun \nexport PATH=$PATH:$HOME/bin\n\n\n\n\nand \nthen\n you can run \ngitolite \nsubcommand", 
            "title": "HTTP mode install"
        }, 
        {
            "location": "/http/#installing-on-a-smart-http-git-server", 
            "text": "Note:  \"smart http\" refers to the feature that came with git 1.6.6, late 2009 or\nso.  The base documentation for this is  man git-http-backend .  Do NOT  read  Documentation/howto/setup-git-server-over-http.txt  and\nthink that is the same or even relevant -- that is from 2006 and is quite\ndifferent (and arguably obsolete).", 
            "title": "installing on a smart http git server"
        }, 
        {
            "location": "/http/#warnings-and-important-notes", 
            "text": "Please read  authentication versus authorisation  first, and make\n    sure you understand what is gitolite's responsibility and what isn't.    I have tested this only on stock Fedora (whatever is the current version);\n    YDMV.", 
            "title": "WARNINGS and important notes"
        }, 
        {
            "location": "/http/#assumptions", 
            "text": "Apache 2.x and git installed.  Httpd runs under the \"apache\" userid; adjust instructions below if not.  Similarly for \"/var/www\" and other file names/locations.", 
            "title": "assumptions:"
        }, 
        {
            "location": "/http/#instructions", 
            "text": "In place of detailed instructions, there is a script called t/smart-http.root-setup .   Do NOT run this script as is -- it is actually\nmeant for my testing setup and deletes stuff .  However, it does provide an\nexcellent (and working!) narration of what you need to do to install gitolite\nin smart http mode.  Make a copy of the script, go through it carefully, (possibly removing lines\nthat delete files etc.), change values per your system, and only then run it.   Note:  The  GIT_PROJECT_ROOT  variable (see \"man git-http-backend\") is no longer\noptional.  Make sure you set it to some place outside apache's DOCUMENT_ROOT .", 
            "title": "instructions"
        }, 
        {
            "location": "/http/#allowing-unauthenticated-access", 
            "text": "If you want users to see repos without performing any HTTP authentication, you\nshould first decide what repos they should have unauthenticated access to:  repo foo bar baz        # or maybe '@all'?\n    R   =   nobody  Then in the rc file ( ~/.gitolite.rc ), in the section marked \"rc variables\nused by various features\", add this (including the trailing comma):  HTTP_ANON_USER      =   'nobody',", 
            "title": "allowing unauthenticated access"
        }, 
        {
            "location": "/http/#making-repositories-available-to-both-ssh-and-http-mode-clients", 
            "text": "This section has been contributed by Thomas Hager (duke at sigsegv dot at),\nand is available  here .", 
            "title": "Making repositories available to both ssh and http mode clients"
        }, 
        {
            "location": "/http/#usage", 
            "text": "", 
            "title": "usage"
        }, 
        {
            "location": "/http/#client-side", 
            "text": "Git URLs look like  http://user:password@server/git/reponame.git .  The custom commands, like \"info\", \"expand\" should be handled as follows.  The\ncommand name will come just after the  /git/ , followed by a  ? , followed by\nthe arguments, with  +  representing a space.  Here are some examples:   # ssh git@server info \ncurl  http://user:password@server/git/info  # ssh git@server info repopatt \ncurl  http://user:password@server/git/info?repopatt  # ssh git@server info repopatt user1 user2 \ncurl  http://user:password@server/git/info?repopatt+user1+user2   With a few nice shell aliases, you won't even notice the horrible convolutions\nhere ;-)  See t/smart-http for a couple of useful ones.", 
            "title": "client side"
        }, 
        {
            "location": "/http/#server-side", 
            "text": "The  gitolite  command (for example,  gitolite compile ,  gitolite query-rc ,\nand so on)  can  be run on the server, but it's not straightforward.  Assuming\nyou installed exactly as given in this page, you should   get a shell by using, say,  su -s /bin/bash - apache  run  export HOME=$HOME/gitolite-home  run  export PATH=$PATH:$HOME/bin   and  then  you can run  gitolite  subcommand", 
            "title": "server side"
        }, 
        {
            "location": "/migr/", 
            "text": "migrating from gitolite v2\n\uf0c1\n\n\n\n\nGitolite v3 came out in April 2012.  Until now, my policy was that I would not\nsupport it except for critical issues, but I think by now (I am writing this\nin Feb 2017), it's time to cut it completely.\n\n\nAs such, migration is also not supported.  Please perform a clean install of\nthe latest gitolite and bring your existing repos into this new installation.\nDetails below.\n\n\nThe old, detailed, migration document is still available in the \narchive\ndirectory\n of the gitolite-doc repo, if you really need it, but you're\non your own.  After five years, it makes little sense to maintain all that in\nthe active document hierarchy.\n\n\nDespite all that, this document \ndoes\n list some of the more important issues,\nmainly those that cause a significant change in behaviour.\n\n\nstep 1: backups\n\uf0c1\n\n\n\n\ntake a backup of all \n~/repositories\n from the v2 server\n\n\ntake an extra backup, in the form of a normal \ngit clone\n, of the\n    \ngitolite-admin\n repository\n\n\ntake a backup of \n~/.gitolite.rc\n and keep it handy\n\n\n(\noptional but suggested\n) take a backup of \n~/.gitolite\n and \n~/.ssh\n\n\n\n\nstep 2: install gitolite\n\uf0c1\n\n\n\n\nImportant:\n\n\nIf you are reusing the same \nhosting user\n on the same server, for the\nnew setup, you will need to clean out the old one as much as you can so\nits artefacts don't interfere with the new installation.  This means all\nthe files and directories you backed up above, including the optional\nones.\n\n\n\n\nTo install, use one or more of the links in the \"install\" section in the\nnavigation bar at the top.\n\n\n\n\nImportant:\n\n\nDo \nNOT\n change the \ngitolite.conf\n from the minimal one that a fresh\ninstall creates at this stage.\n\n\n\n\nSmoke test the installation by cloning the \ntesting\n repo and pushing some\nminor change to it.\n\n\nstep 3: add existing repos\n\uf0c1\n\n\nOnce the install is done, follow the instructions \nhere\n to bring in\nexisting repos.\n\n\nAt the point where it talks about adding repos to the gitolite.conf file, you\ncan copy relevant bits from your old gitolite-admin repo.\n\n\nstep 4: identify any remaining changes needed\n\uf0c1\n\n\nIf you're using any of the following features in your old (v2) setup, please\nmake the appropriate changes as indicated.\n\n\nNAME rules\n\uf0c1\n\n\nNAME/\n rules must be changed to \nVREF/NAME/\n.  Also, fallthru on all VREFs is\n\"success\" now, so any \nNAME/\n rules you have \nMUST\n change the rule list in\nsome way to maintain the same restrictions.  The simplest is to add the\nfollowing line to the end of each repo's rule list:\n\n\n-   VREF/NAME/       =   @all\n\n\n\nsubconf\n command\n\uf0c1\n\n\n(This is also affected by the previous issue, 'NAME rules'; please read that\nas well).\n\n\nIf you're using delegation in your admin conf setup, please add the following\nlines to the end of the gitolite-admin rules in your conf/gitolite.conf file:\n\n\nrepo gitolite-admin\n    -   VREF/NAME/       =   @all\n\nsubconf \"fragments/*.conf\"\n\n\n\nThe first part compensates for fallthru now being a success when processing\n\nVREF\n rules (NAME rules are just one specific VREF).  Although,\n\nideally\n, you should change your rule list so that you no longer require\nthat line.\n\n\nThe second part explicitly says when and where to include the subconf files.\n(Before subconf was invented, this used to happen implicitly at the end of the\nmain conf file, and was hardcoded to that specific glob.)\n\n\nmirroring\n\uf0c1\n\n\n\n\n\nThere are \nseveral\n important differences in mirroring; if you're using\nmirroring \nplease start from a clean slate on all slaves\n, using the v3\ndocumentation on \nmirroring\n.\n\n\nIf you're not willing to do that, you may be able to use the older, more\ndetailed, documentation \nhere\n to manage the migration.  However, I\ncannot support that (mainly due to lack of time).\n\n\nrc file settings\n\uf0c1\n\n\nMany rc file settings have been dropped.  You should be able to get by without\nmost of them, but some of them cause a significant change to behaviour:\n\n\n\n\n\n\nGL_ALL_INCLUDES_SPECIAL\n: @all always includes gitweb and daemon now.\n    Use deny-rules if you want to say \nR = @all\n but not have the repo(s) be\n    visible to gitweb or daemon.\n\n\n\n\n\n\nGL_NO_DAEMON_NO_GITWEB\n: the default will clobber your projects.list file\n    and git-daemon-export-ok files.\n\n\nComment out the 'daemon' and 'gitweb' lines in the ENABLE list in the rc\nfile.  Gitweb and daemon can now be separately disabled, instead of both\nbeing tied to the same setting.\n\n\n\n\n\n\nGL_NO_SETUP_AUTHKEYS\n:  default will clobber your authkeys file.\n\n\nComment out all the line(s) that call ssh-authkeys in the rc file.\n\n\n\n\n\n\nADMIN_POST_UPDATE_CHAINS_TO\n and \nUPDATE_CHAINS_TO\n:\n\n\nFor the former, add your script to the \nPOST_COMPILE\n \ntrigger\n\nchain.  For the latter, use a \nvref\n.  Don't forget to add a rule that\nreferences the new VREF!\n\n\n\n\n\n\nwild repos\n\uf0c1\n\n\n\n\n\n\ngl-creater\n files: these files need to be renamed to \ngl-creator\n (the\n    correct spelling at last, hooray!).  Suggested command sequence:\n\n\n\n\ncd\n \n$HOME\n/repositories\n\nfind\n . \n-type d \n-name\n \n*.git\n \n-prune\n | \nwhile \nread\n \nr\n\n\ndo\n\n    \nmv\n \n$r\n/gl-creater \n$r\n/gl-creator\n\ndone\n \n2\n/dev/null\n\n\n\n\n\n\n\ngl-perms\n files: setting perms of R and RW will no longer work; you have\n    to say READERS and WRITERS now.  Suggested command:\n\n\n\n\nfind\n \n`\ngitolite query-rc GL_REPO_BASE\n`\n \n-name\n gl-perms |\n    xargs perl \n-pi\n \n-e\n \n'\ns/\\bR\\b/READERS/;s/\\bRW\\b/WRITERS/\n'", 
            "title": "migrating from v2"
        }, 
        {
            "location": "/migr/#migrating-from-gitolite-v2", 
            "text": "Gitolite v3 came out in April 2012.  Until now, my policy was that I would not\nsupport it except for critical issues, but I think by now (I am writing this\nin Feb 2017), it's time to cut it completely.  As such, migration is also not supported.  Please perform a clean install of\nthe latest gitolite and bring your existing repos into this new installation.\nDetails below.  The old, detailed, migration document is still available in the  archive\ndirectory  of the gitolite-doc repo, if you really need it, but you're\non your own.  After five years, it makes little sense to maintain all that in\nthe active document hierarchy.  Despite all that, this document  does  list some of the more important issues,\nmainly those that cause a significant change in behaviour.", 
            "title": "migrating from gitolite v2"
        }, 
        {
            "location": "/migr/#step-1-backups", 
            "text": "take a backup of all  ~/repositories  from the v2 server  take an extra backup, in the form of a normal  git clone , of the\n     gitolite-admin  repository  take a backup of  ~/.gitolite.rc  and keep it handy  ( optional but suggested ) take a backup of  ~/.gitolite  and  ~/.ssh", 
            "title": "step 1: backups"
        }, 
        {
            "location": "/migr/#step-2-install-gitolite", 
            "text": "Important:  If you are reusing the same  hosting user  on the same server, for the\nnew setup, you will need to clean out the old one as much as you can so\nits artefacts don't interfere with the new installation.  This means all\nthe files and directories you backed up above, including the optional\nones.   To install, use one or more of the links in the \"install\" section in the\nnavigation bar at the top.   Important:  Do  NOT  change the  gitolite.conf  from the minimal one that a fresh\ninstall creates at this stage.   Smoke test the installation by cloning the  testing  repo and pushing some\nminor change to it.", 
            "title": "step 2: install gitolite"
        }, 
        {
            "location": "/migr/#step-3-add-existing-repos", 
            "text": "Once the install is done, follow the instructions  here  to bring in\nexisting repos.  At the point where it talks about adding repos to the gitolite.conf file, you\ncan copy relevant bits from your old gitolite-admin repo.", 
            "title": "step 3: add existing repos"
        }, 
        {
            "location": "/migr/#step-4-identify-any-remaining-changes-needed", 
            "text": "If you're using any of the following features in your old (v2) setup, please\nmake the appropriate changes as indicated.", 
            "title": "step 4: identify any remaining changes needed"
        }, 
        {
            "location": "/migr/#name-rules", 
            "text": "NAME/  rules must be changed to  VREF/NAME/ .  Also, fallthru on all VREFs is\n\"success\" now, so any  NAME/  rules you have  MUST  change the rule list in\nsome way to maintain the same restrictions.  The simplest is to add the\nfollowing line to the end of each repo's rule list:  -   VREF/NAME/       =   @all", 
            "title": "NAME rules"
        }, 
        {
            "location": "/migr/#subconf-command", 
            "text": "(This is also affected by the previous issue, 'NAME rules'; please read that\nas well).  If you're using delegation in your admin conf setup, please add the following\nlines to the end of the gitolite-admin rules in your conf/gitolite.conf file:  repo gitolite-admin\n    -   VREF/NAME/       =   @all\n\nsubconf \"fragments/*.conf\"  The first part compensates for fallthru now being a success when processing VREF  rules (NAME rules are just one specific VREF).  Although, ideally , you should change your rule list so that you no longer require\nthat line.  The second part explicitly says when and where to include the subconf files.\n(Before subconf was invented, this used to happen implicitly at the end of the\nmain conf file, and was hardcoded to that specific glob.)", 
            "title": "subconf command"
        }, 
        {
            "location": "/migr/#mirroring", 
            "text": "There are  several  important differences in mirroring; if you're using\nmirroring  please start from a clean slate on all slaves , using the v3\ndocumentation on  mirroring .  If you're not willing to do that, you may be able to use the older, more\ndetailed, documentation  here  to manage the migration.  However, I\ncannot support that (mainly due to lack of time).", 
            "title": "mirroring"
        }, 
        {
            "location": "/migr/#rc-file-settings", 
            "text": "Many rc file settings have been dropped.  You should be able to get by without\nmost of them, but some of them cause a significant change to behaviour:    GL_ALL_INCLUDES_SPECIAL : @all always includes gitweb and daemon now.\n    Use deny-rules if you want to say  R = @all  but not have the repo(s) be\n    visible to gitweb or daemon.    GL_NO_DAEMON_NO_GITWEB : the default will clobber your projects.list file\n    and git-daemon-export-ok files.  Comment out the 'daemon' and 'gitweb' lines in the ENABLE list in the rc\nfile.  Gitweb and daemon can now be separately disabled, instead of both\nbeing tied to the same setting.    GL_NO_SETUP_AUTHKEYS :  default will clobber your authkeys file.  Comment out all the line(s) that call ssh-authkeys in the rc file.    ADMIN_POST_UPDATE_CHAINS_TO  and  UPDATE_CHAINS_TO :  For the former, add your script to the  POST_COMPILE   trigger \nchain.  For the latter, use a  vref .  Don't forget to add a rule that\nreferences the new VREF!", 
            "title": "rc file settings"
        }, 
        {
            "location": "/migr/#wild-repos", 
            "text": "gl-creater  files: these files need to be renamed to  gl-creator  (the\n    correct spelling at last, hooray!).  Suggested command sequence:   cd   $HOME /repositories find  .  -type d  -name   *.git   -prune  |  while  read   r  do \n     mv   $r /gl-creater  $r /gl-creator done   2 /dev/null    gl-perms  files: setting perms of R and RW will no longer work; you have\n    to say READERS and WRITERS now.  Suggested command:   find   ` gitolite query-rc GL_REPO_BASE `   -name  gl-perms |\n    xargs perl  -pi   -e   ' s/\\bR\\b/READERS/;s/\\bRW\\b/WRITERS/ '", 
            "title": "wild repos"
        }, 
        {
            "location": "/basic-admin/", 
            "text": "basic administration\n\uf0c1\n\n\n\n\nIf you really, really, really want to manage\ngitolite directly on the server, i.e., without cloning the gitolite-admin\nrepo, you can -- \nhere's how\n.  This is likely to be of interest mainly\nto puppet/chef type installations.\n\n\nDay-to-day management of a gitolite site is done by cloning the special\n'gitolite-admin' repo, making appropriate changes to it, and pushing it back\nto the server.  The \nconcepts and terminology\n page has a section\nwith some details on what happens after the push.\n\n\nIn other words, do \nNOT\n add new repos or users manually on the\nserver!\n\n\nclone the gitolite-admin repo\n\uf0c1\n\n\nTo clone the admin repo, go to the workstation where the public key used in\n'setup' came from, and run this:\n\n\ngit clone git@host:gitolite-admin\n\n\n\nNOTE that (1) you must not include the \nrepositories/\n part (gitolite handles\nthat internally), and (2) you may include the \".git\" at the end but it is\noptional.\n\n\nIf this step fails, be sure to look at the two pages linked from the \nssh\n\npage before asking for help.  A very basic first step is to run the \ninfo\n\ncommand (\nssh git@host info\n); \nthis\n page tells you what to expect.\n\n\nadd/remove users\n\uf0c1\n\n\nNOTE: This section only applies to ssh mode.  If you've installed\ngitolite in http mode, adding and removing users is outside the scope of\ngitolite.\n\n\nStrictly speaking, gitolite doesn't know where users come from.  (If that\nsurprises you, go back to the \nconcepts\n page and read the section on\n\"authentication and authorisation\"). However, gitolite does help with\nssh-based authentication, by making it easy to add and remove users from\n\n~/.ssh/authorized_keys\n.\n\n\nTo add or remove users, you have to clone the gitolite-admin repository, then\nadd or remove ssh pubkey files from the \"keydir/\" directory in the clone.\nThen commit those changes and push.\n\n\nHere's how to add users to gitolite.  \"alice\" is the administrator and is\nadding \"bob\" and \"carol\".\n\n\n\n\nAll this is done from the admin (Alice)'s workstation.  The steps are:\n\n\n\n\n\n\nRun \ngit clone git@server:gitolite-admin\n.\n\n\n\n\n\n\nObtain pubkeys from each user; email, USB, DHL, pigeon post, owl mail, any\n    method you like.\n\n\nRename each received file to the name of the user, add a \".pub\" at the\nend, copy it into \nkeydir/\n in the gitolite-admin repo you cloned.\n\n\n\n\n\n\nRun \ngit add keydir\n, then \ngit commit\n, then \ngit push\n.\n\n\n\n\n\n\nYou do NOT need to add Carol or Bob as \nreal\n (Unix) users.  You do NOT add\ntheir keys directly anywhere on the server, and you most definitely do NOT\nfiddle with the authorized_keys file on the server directly!\n\n\nTo \nremove\n a user, \ngit rm keydir/alice.pub\n.\n\n\nCommit and push the changes.  On receiving the push, gitolite will carry out\nthe changes specified.\n\n\nNOTE\n: your users' public key is typically\n\n$HOME/.ssh/id_rsa.pub\n on her workstation.  Please make sure it is in\nopenssh's default format.\n\n\nmultiple keys per user\n\uf0c1\n\n\nYou can put pubkeys in subdirectories within \"keydir/\", because the user name\nis simply the \nbase name\n of the public key file name.  That is,\n'keydir/alice.pub', 'keydir/home/alice.pub', 'keydir/laptop/alice.pub', (or\neven 'keydir/work/desktop/alice.pub' -- any number of subdirectory levels are\nOK) all resolve to user \"alice\".\n\n\nThis is the simplest and most understandable way to allow multiple keys per\nuser.\n\n\nPlease see appendix 2 at the bottom of this document for an older way that\nwill continue to be supported but has proved hard to explain!\n\n\nadd, remove, and rename repos\n\uf0c1\n\n\n\n\nNote: this page describes how to add \nnew\n repos.  To bring already\nexisting repos under gitolite's control, click \nhere\n.\n\n\n\n\nTo \nadd\n a new repo, you have to clone the gitolite-admin repository, then\nedit the \nconf/gitolite.conf\n file. In that file, add the repo, along\nwith at least one user with some permissions.\n\n\nYou can add the new repo in its own paragraph,\n\n\n\n\nrepo \nbar\n\n    RW+\n     \n=   alice\n\n\n\n\nor you can add it to an existing repo line, if the new repo is intended to\nhave the same access rules:\n\n\n\n\nrepo \nfoo bar\n\n    RW+\n     \n=   alice\n\n\n\n\nEither way, commit and push the changes.  Gitolite will create a bare, empty,\nrepo on the server that is ready to be cloned and pushed to.\n\n\n\n\nAs you can see, the \"repo\" line can have any number of repo names or repo\ngroup names in it. However, it can only be one line; this will not work:\n\n\n\n\nrepo \nfoo\n\nrepo \nbar   \n # WRONG; 'foo' is now forgotten\n\n\n    RW+\n     \n=   alice\n\n\n\n\nIf you have too many to fit on one line comfortably, you can create and use a\n\nrepo group\n:\n\n\n\n\n@myrepos\n    =   foo\n\n@myrepos\n    =   bar\n    .\n    .\n    .\n\n@myrepos\n    =   zzq\n\n\nrepo \n@myrepos\n\n\n    RW+\n     \n=   alice\n\n\n\n\nremoving/renaming a repo\n\uf0c1\n\n\nRemoving a repo is not so straightforward.  You certainly must remove the\nappropriate lines from the \nconf/gitolite.conf\n file, but gitolite will not\nautomatically delete the repo from the server.  You have to log on to the\nserver and do the dirty deed yourself :-)\n\n\nIt is best to make the change in the conf file, push it, and \nthen\n go to the\nserver and do what you need to.\n\n\nRenaming a repo is also not automatic.  Here's what you do (and the order is\nimportant):\n\n\n\n\nGo to the server and rename the repo at the Unix command line.  Don't\n    forget to retain the \".git\" extension on the directory name.\n\n\nChange the name in the conf/gitolite.conf file in your gitolite-admin repo\n    clone, and add/commit/push.\n\n\n\n\nappendix 1: bringing existing repos into gitolite\n\uf0c1\n\n\n\n\nWarning!\n\n\nGitolite \nwill clobber\n any existing \nupdate\n hook in your repos when\nyou do this.  Please see either the \ncookbook\n or the \nnon-core\n page\nfor information on how to make your existing update hook work with\ngitolite.\n\n\nGitolite \nmay clobber\n any existing \"git-daemon-export-ok\" file in your\nrepo; see the page on \nallowing access to gitweb and\ngit-daemon\n for how to enable that via gitolite.\n\n\n\n\nWith that out of the way, here's how to do this:\n\n\nFirst, on the server:\n\n\n\n\n\n\nMove the repos to \n$HOME/repositories\n.\n\n\n\n\n\n\nMake sure that:\n\n\n\n\nThey are all \nbare\n repos.\n\n\nAll the repo names end in \".git\".\n\n\nAll the files and directories are owned and writable by the gitolite\n    \nhosting user\n (especially true if you copied them as root).\n\n\nThere are no symbolic links left over from wherever the files were\n    brought from.\n\n\n\n\n\n\n\n\nRun \ngitolite setup\n.  \nIf you forget this step, you can also forget\n    about write access control!\n\n\n\n\n\n\nThen, back on your workstation:\n\n\n\n\n\n\nIf the repos are normal repos, add them to the \nconf/gitolite.conf\n in\n    your clone of the admin repo, then commit and push the change.\n\n\nIf the repos are \nwildcard\n repos that already match some repo regex\nin the conf file, you need to manually create the gl-creator file, like\nso:\n\n\necho username \n ~/repositories/path/to/repo.git/gl-creator\n\n\n\nI haven't yet found this to be common enough to bother wrapping it in a\nnice interface or command.\n\n\n\n\n\n\nappendix 2: old style multi-keys\n\uf0c1\n\n\nThere is another way that involves creating key files like \nalice@home.pub\n\nand \nalice@laptop.pub\n, but there is a complication because gitolite also\nallows \nfull email addresses\n as user names.  (i.e., \nsitaramc@gmail.com.pub\n\ndenotes the user called \nsitaramc@gmail.com\n).\n\n\nThis older method of enabling multi-keys was developed to deal with that.  It\nwill continue to work and be supported in \ncode\n, simply because I prefer it.\nBut I will not accept questions or doc patches for it, because it seems it is\ntoo difficult to understand for a lot of people.  This table of sample pubkey\nfilenames and the corresponding derived usernames is all you get:\n\n\n\n\n\n\nplain username, no multikey\n\n\nsitaramc.pub                            sitaramc\n\n\n\n\n\n\n\nplain username, with multikeys\n\n\nsitaramc@laptop.pub                     sitaramc\nsitaramc@desktop.pub                    sitaramc\n\n\n\n\n\n\n\nemail address as username, no multikey\n\n\nsitaramc@gmail.com.pub                  sitaramc@gmail.com\n\n\n\n\n\n\n\nemail address as username, with multikeys\n\n\nsitaramc@gmail.com@laptop.pub           sitaramc@gmail.com\nsitaramc@gmail.com@desktop.pub          sitaramc@gmail.com", 
            "title": "basic administration"
        }, 
        {
            "location": "/basic-admin/#basic-administration", 
            "text": "If you really, really, really want to manage\ngitolite directly on the server, i.e., without cloning the gitolite-admin\nrepo, you can --  here's how .  This is likely to be of interest mainly\nto puppet/chef type installations.  Day-to-day management of a gitolite site is done by cloning the special\n'gitolite-admin' repo, making appropriate changes to it, and pushing it back\nto the server.  The  concepts and terminology  page has a section\nwith some details on what happens after the push.  In other words, do  NOT  add new repos or users manually on the\nserver!", 
            "title": "basic administration"
        }, 
        {
            "location": "/basic-admin/#clone-the-gitolite-admin-repo", 
            "text": "To clone the admin repo, go to the workstation where the public key used in\n'setup' came from, and run this:  git clone git@host:gitolite-admin  NOTE that (1) you must not include the  repositories/  part (gitolite handles\nthat internally), and (2) you may include the \".git\" at the end but it is\noptional.  If this step fails, be sure to look at the two pages linked from the  ssh \npage before asking for help.  A very basic first step is to run the  info \ncommand ( ssh git@host info );  this  page tells you what to expect.", 
            "title": "clone the gitolite-admin repo"
        }, 
        {
            "location": "/basic-admin/#addremove-users", 
            "text": "NOTE: This section only applies to ssh mode.  If you've installed\ngitolite in http mode, adding and removing users is outside the scope of\ngitolite.  Strictly speaking, gitolite doesn't know where users come from.  (If that\nsurprises you, go back to the  concepts  page and read the section on\n\"authentication and authorisation\"). However, gitolite does help with\nssh-based authentication, by making it easy to add and remove users from ~/.ssh/authorized_keys .  To add or remove users, you have to clone the gitolite-admin repository, then\nadd or remove ssh pubkey files from the \"keydir/\" directory in the clone.\nThen commit those changes and push.  Here's how to add users to gitolite.  \"alice\" is the administrator and is\nadding \"bob\" and \"carol\".   All this is done from the admin (Alice)'s workstation.  The steps are:    Run  git clone git@server:gitolite-admin .    Obtain pubkeys from each user; email, USB, DHL, pigeon post, owl mail, any\n    method you like.  Rename each received file to the name of the user, add a \".pub\" at the\nend, copy it into  keydir/  in the gitolite-admin repo you cloned.    Run  git add keydir , then  git commit , then  git push .    You do NOT need to add Carol or Bob as  real  (Unix) users.  You do NOT add\ntheir keys directly anywhere on the server, and you most definitely do NOT\nfiddle with the authorized_keys file on the server directly!  To  remove  a user,  git rm keydir/alice.pub .  Commit and push the changes.  On receiving the push, gitolite will carry out\nthe changes specified.  NOTE : your users' public key is typically $HOME/.ssh/id_rsa.pub  on her workstation.  Please make sure it is in\nopenssh's default format.", 
            "title": "add/remove users"
        }, 
        {
            "location": "/basic-admin/#multiple-keys-per-user", 
            "text": "You can put pubkeys in subdirectories within \"keydir/\", because the user name\nis simply the  base name  of the public key file name.  That is,\n'keydir/alice.pub', 'keydir/home/alice.pub', 'keydir/laptop/alice.pub', (or\neven 'keydir/work/desktop/alice.pub' -- any number of subdirectory levels are\nOK) all resolve to user \"alice\".  This is the simplest and most understandable way to allow multiple keys per\nuser.  Please see appendix 2 at the bottom of this document for an older way that\nwill continue to be supported but has proved hard to explain!", 
            "title": "multiple keys per user"
        }, 
        {
            "location": "/basic-admin/#add-remove-and-rename-repos", 
            "text": "Note: this page describes how to add  new  repos.  To bring already\nexisting repos under gitolite's control, click  here .   To  add  a new repo, you have to clone the gitolite-admin repository, then\nedit the  conf/gitolite.conf  file. In that file, add the repo, along\nwith at least one user with some permissions.  You can add the new repo in its own paragraph,   repo  bar     RW+       =   alice  or you can add it to an existing repo line, if the new repo is intended to\nhave the same access rules:   repo  foo bar     RW+       =   alice  Either way, commit and push the changes.  Gitolite will create a bare, empty,\nrepo on the server that is ready to be cloned and pushed to.   As you can see, the \"repo\" line can have any number of repo names or repo\ngroup names in it. However, it can only be one line; this will not work:   repo  foo repo  bar     # WRONG; 'foo' is now forgotten      RW+       =   alice  If you have too many to fit on one line comfortably, you can create and use a repo group :   @myrepos     =   foo @myrepos     =   bar\n    .\n    .\n    . @myrepos     =   zzq repo  @myrepos      RW+       =   alice", 
            "title": "add, remove, and rename repos"
        }, 
        {
            "location": "/basic-admin/#removingrenaming-a-repo", 
            "text": "Removing a repo is not so straightforward.  You certainly must remove the\nappropriate lines from the  conf/gitolite.conf  file, but gitolite will not\nautomatically delete the repo from the server.  You have to log on to the\nserver and do the dirty deed yourself :-)  It is best to make the change in the conf file, push it, and  then  go to the\nserver and do what you need to.  Renaming a repo is also not automatic.  Here's what you do (and the order is\nimportant):   Go to the server and rename the repo at the Unix command line.  Don't\n    forget to retain the \".git\" extension on the directory name.  Change the name in the conf/gitolite.conf file in your gitolite-admin repo\n    clone, and add/commit/push.", 
            "title": "removing/renaming a repo"
        }, 
        {
            "location": "/basic-admin/#appendix-1-bringing-existing-repos-into-gitolite", 
            "text": "Warning!  Gitolite  will clobber  any existing  update  hook in your repos when\nyou do this.  Please see either the  cookbook  or the  non-core  page\nfor information on how to make your existing update hook work with\ngitolite.  Gitolite  may clobber  any existing \"git-daemon-export-ok\" file in your\nrepo; see the page on  allowing access to gitweb and\ngit-daemon  for how to enable that via gitolite.   With that out of the way, here's how to do this:  First, on the server:    Move the repos to  $HOME/repositories .    Make sure that:   They are all  bare  repos.  All the repo names end in \".git\".  All the files and directories are owned and writable by the gitolite\n     hosting user  (especially true if you copied them as root).  There are no symbolic links left over from wherever the files were\n    brought from.     Run  gitolite setup .   If you forget this step, you can also forget\n    about write access control!    Then, back on your workstation:    If the repos are normal repos, add them to the  conf/gitolite.conf  in\n    your clone of the admin repo, then commit and push the change.  If the repos are  wildcard  repos that already match some repo regex\nin the conf file, you need to manually create the gl-creator file, like\nso:  echo username   ~/repositories/path/to/repo.git/gl-creator  I haven't yet found this to be common enough to bother wrapping it in a\nnice interface or command.", 
            "title": "appendix 1: bringing existing repos into gitolite"
        }, 
        {
            "location": "/basic-admin/#appendix-2-old-style-multi-keys", 
            "text": "There is another way that involves creating key files like  alice@home.pub \nand  alice@laptop.pub , but there is a complication because gitolite also\nallows  full email addresses  as user names.  (i.e.,  sitaramc@gmail.com.pub \ndenotes the user called  sitaramc@gmail.com ).  This older method of enabling multi-keys was developed to deal with that.  It\nwill continue to work and be supported in  code , simply because I prefer it.\nBut I will not accept questions or doc patches for it, because it seems it is\ntoo difficult to understand for a lot of people.  This table of sample pubkey\nfilenames and the corresponding derived usernames is all you get:    plain username, no multikey  sitaramc.pub                            sitaramc    plain username, with multikeys  sitaramc@laptop.pub                     sitaramc\nsitaramc@desktop.pub                    sitaramc    email address as username, no multikey  sitaramc@gmail.com.pub                  sitaramc@gmail.com    email address as username, with multikeys  sitaramc@gmail.com@laptop.pub           sitaramc@gmail.com\nsitaramc@gmail.com@desktop.pub          sitaramc@gmail.com", 
            "title": "appendix 2: old style multi-keys"
        }, 
        {
            "location": "/conf/", 
            "text": "the \"conf\" file (\nconf/gitolite.conf\n)\n\uf0c1\n\n\n(part 1)\n\n\n\n\nYou might recall from the \nbasic\nadministration\n page that this file is part of the gitolite-admin\nrepo.  You need to clone that repo, make and commit changes to this file, and\npush the commits back.\n\n\nThe \nconf/gitolite.conf\n file (often called just \"the conf file\" for short) is\none of the two most important files in gitolite.  It specifies repo names and\naccess rules, as well as repo options of various kinds and git-config values.\n\n\nPretty much all day-to-day management, except \nmanaging users\n, happens\nfrom this file.\n\n\nWe'll use the following example to describe it's features.  \n(A tip of\nthe hat to Teemu Matilainen's gitolite vim-syntax file for the\ncolors.)\n\n\n\n\n@staff\n              =   dilbert alice          \n # groups\n\n\n@projects\n           =   foo bar\n\n\nrepo \n@projects\n baz                             \n # repos\n\n\n    RW+\n             \n=   \n@staff\n                 \n # rules\n\n\n    -\n       master  \n=\n   ashok\n\n\n    RW\n              \n=   ashok\n\n    R\n               \n=   wally\n\n    option deny-rules           =   1          \n # options\n\n\n    config \nhooks.emailprefix    \n= '[%GL_REPO] '\n # git-config\n\n\n\n\n\nbasic syntax\n\uf0c1\n\n\nAs the example above shows, the syntax is fairly straightforward and simple.\n\n\n\n\nIn general, everything is \nspace separated\n; there are no commas,\n    semicolons, etc., in the syntax.\n\n\nComments\n are in the usual shell-ish style.\n\n\nUser names\n and \nrepo names\n are as simple as possible; they must\n    start with an alphanumeric, but after that they can also contain \n.\n, \n_\n,\n    or \n-\n. Usernames can optionally be followed by an \n@\n and a domainname\n    containing at least one \n.\n (this allows you to use an email address as\n    someone's username).\n\n\nGroup names\n are like simple usernames (i.e., not email addresses) but\n    start with an \n@\n sign.\n\n\nReponames can contain \n/\n characters (this allows you to put your repos in\n    a tree-structure for convenience).\n\n\nThere are no continuation lines by default.  You do not need them; the\n    section on \ngroups\n will tell you how you can break up large lists of\n    names in a group definition into multiple lines. \n(But if you \nmust\n\n    have them, you can optionally enable them; look for \"continuation-lines\"\n    in \n~/.gitolite.rc\n).\n\n\n\n\ninclude files\n\uf0c1\n\n\nGitolite allows you to break up the configuration into multiple files and\ninclude them in the main file for convenience.  For example:\n\n\ninclude \"foo.conf\"\n\n\n\nwill include the contents of the file \"conf/foo.conf\".\n\n\n\n\n\n\nYou can also use a glob (\ninclude \"*.conf\"\n), or put your include files\n    into subdirectories of \"conf\" (\ninclude \"foo/bar.conf\"\n), or both\n    (\ninclude \"repos/*.conf\"\n).\n\n\n\n\n\n\nIncluded files are always searched from the gitolite-admin repo's \nconf/\n\n    directory, unless you supplied an absolute path.  (Note: in the interests\n    of cloning the admin-repo sanely you should avoid absolute paths!)\n\n\n\n\n\n\nIf you end up recursing, files that have been already processed once are\n    skipped, with a warning.\n\n\n\n\n\n\nIt is not a fatal error for an include file to be missing.  If it is a\n    glob, you won't even get a warning.\n\n\n\n\n\n\nAdvanced users: \nsubconf\n, a command that is very closely\nrelated to \ninclude\n, is documented \nhere\n.\n\n\nPlease note\n that whenever you see \"the \nconf/gitolite.conf\n file\" or \"the\nconf file\" in gitolite documentation, it means the combined text after the\ninclude processing is done.\n\n\ngroup definitions\n\uf0c1\n\n\nYou can group repos or users for convenience.  The syntax is the same for both\nand does not distinguish; until you \nuse\n the group name it could really be\neither.\n\n\nHere's an example:\n\n\n\n\n@developers\n     =   dilbert alice wally\n\n\n\n\nGroup definitions accumulate; this is the same as the above:\n\n\n\n\n@developers\n     =   dilbert\n\n@developers\n     =   alice\n\n@developers\n     =   wally\n\n\n\n\nYou can use one group in another group definition; the values will be expanded\nimmediately (meaning later additions will not appear in the second group):\n\n\n\n\n@developers\n     =   dilbert alice\n\n@interns\n        =   ashok\n\n@staff\n          =   \n@interns\n \n@developers\n\n\n@developers\n     =   wally\n\n\n# wally is \nNOT\n part of @staff\n\n\n\n\n\nHere's a very simple but complete example of using groups:\n\n\n\n\n@developers\n     =   dilbert alice wally\n\n@foss-repos\n     =   git gitolite\n\n\nrepo \n@foss-repos\n\n\n    RW+\n         \n=   \n@developers\n\n\n\n\n\nspecial group \n@all\n\uf0c1\n\n\n@all\n is a special group name that is often convenient to use if you really\nmean \"all repos\" or \"all users\".\n\n\nwarnings on undefined groups\n\uf0c1\n\n\nGitolite cannot truly catch undefined groups because the conf parser is\n1-pass, and you're allowed to define a group \nafter\n it is used, like so:\n\n\n\n\nrepo \nfoo\n\n    RW\n  \n=   \n@foo\n\n\n@foo\n = u1 u2\n\n\n\n\n(v3.5.3+)\n However, in a simplistic attempt to help\npeople tearing their hair out because of a typo, gitolite will warn if a group\nis not defined when it is used.  So if you defined it later, either ignore the\nwarning or move the definition up.\n\n\nNote that these warnings do NOT appear if you're \ngetting user group info from\nLDAP\n.\n\n\ngetting user group info from LDAP\n\uf0c1\n\n\nGitolite's groups are pretty convenient, but some organisations already have\nsimilar (or sufficient) information in their LDAP store.\n\n\nGitolite can tap into that information, with a little help.  Write a program\nwhich, given a username, queries your LDAP store and returns a space-separated\nlist of groups that the user is a member of.  Then put the full path to this\nprogram in an \nrc\n variable called \nGROUPLIST_PGM\n, like so:\n\n\nGROUPLIST_PGM           =\n  '/home/git/bin/ldap-query-groups',\n\n\n\nNow you can use those groupnames in access rules in gitolite, because the user\nis a member of those groups as well as any normal gitolite groups you may have\nadded him to in the conf file.\n\n\nCaution: your program must do its own logging if you want the audit trail of\n\"why/how did this user get access to this repo at this time?\" to resolve\nproperly.  Gitolite does not do any logging of the results of the queries\nbecause for people who don't need it that would be a huge waste.\n\n\naccess rules\n\uf0c1\n\n\nSome of the pictures are thanks (\nenormous\n thanks!) to someone who\ncontributed them but does not want to be named (go figure!).  She even\nconverted them to ditaa format when I asked; these are not as pretty as what\nshe sent me originally but they're vim-editable in source form :-)\n\n\nThis section talks about how gitolite's access rules work.  It's a \nvery\nimportant\n section, and well worth spending some time on.\n\n\nGitolite's access rules are designed to be easy to use for common situations,\nsuch as some of the examples you saw earlier.  However, they also pack a lot\nof power and flexibility.\n\n\nAccess rules decide whether a particular access is allowed or denied.  An\naccess is defined by four pieces of data: \"reponame, username, operation, and\nref\".  Each rule also has four similar pieces of data, and of course there are\nseveral rules -- some people have thousands! -- in the conf file. This section\nwill try and explain how these rules are used to decide if a given operation\nis to be allowed or denied.\n\n\n\n\nwhat does a rule look like?\n\uf0c1\n\n\nYou've seen some simple rules so far, for example in the \nbasic\nadministration\n page.  Here's a slightly more complex one, just\nfor illustration.\n\n\n\n\nrepo \nfoo bar\n\n\n    RW+\n                     \n=   alice \n@teamleads\n\n\n    -\n   master              \n=\n   dilbert @devteam\n\n\n    -\n   refs/tags/v[0-9]    \n=\n   dilbert @devteam\n\n\n    RW+\n dev/                \n=   dilbert \n@devteam\n\n\n    RW\n                      \n=   dilbert \n@devteam\n\n\n    R\n                       \n=   \n@managers\n\n\n\n\n\nA \"repo\" line names one or more repos, and is followed by one or more rule\nlines. All the rules from then till the next \"repo\" line apply to the repo(s)\nspecified in the repo line -- in this example, the 'foo' and 'bar' repos.\n\n\nEach rule line has a \"permission\" field, zero or more \"refex\"es, and one or\nmore user or user group name after the equal sign.\n\n\nThe \"repo\" line can also have repo groups, as we have seen in the\nsection on \ngroups\n above.  Also, it can have regular expressions that match\nmultiple repos.\n\n\nBefore describing the various fields more formally, here's a description of\nwhat this specific rule list is saying:\n\n\n\n\n\n\nalice and the team leads can do whatever they want (i.e., push, rewind, or\n    delete any branch or tag).\n\n\n\n\n\n\ndilbert and the dev team has these restrictions\n\n\n\n\nthey can do anything to branches whose names start with \"dev/\"\n\n\nthey can create or fast-forward push, but not rewind or delete, any\n    branch except master\n\n\nthey can create (but not update/delete) any tag except tags starting\n    with \"v\" followed by a digit.\n\n\n\n\n\n\n\n\nmanagers can read the repo but they can't push anything.\n\n\n\n\n\n\nMore formally, a rule line has the following fields:\n\n\nthe permission field\n\uf0c1\n\n\nThe permission field gives the type of access this rule line permits. The most\ncommonly used permissions are:\n\n\n\n\nR, to allow read operations only\n\n\nRW, to allow fast-forward push of a branch, or create new branch/tag\n\n\nRW+, to allow pretty much anything -- fast-forward, rewind or delete\n    branches or tags\n\n\n-\n (the minus sign), to \ndeny\n access.\n\n\n\n\n\n\nThere are also other, less commonly used, \ntypes of permissions\n.\n\n\n\n\nthe \"refex\" field\n\uf0c1\n\n\nYou cannot write rules for all possible branch and tag names (i.e., refs) that\nusers will push.  The only sensible way to do this is to use \nregular\nexpressions\n instead.\n\n\nA refex is a word I made up to mean \"a regex that matches a ref\".\n\n\nIn addition:\n\n\n\n\n\n\nIf no refex is supplied, it defaults to \nrefs/.*\n, for example in a rule\n    like this:\n\n\nRW              =   alice\n\n\n\n\n\n\n\nA refex not starting with \nrefs/\n \n(or \nVREF/\n)\n is assumed to\n    start with \nrefs/heads/\n.  This means normal branches can be conveniently\n    written like this:\n\n\nRW  master      =   alice\n# becomes 'refs/heads/master' internally\n\n\n\nwhile tags will need to be fully qualified\n\n\nRW  refs/tags/v[0-9]    =   bob\n\n\n\n\n\n\n\nA refex is implicitly anchored at the start, but not at the end.  In\n    regular expression lingo, a \n^\n is assumed at the start (but no \n$\n at the\n    end is assumed).  So a refex of \nmaster\n will match all these refs:\n\n\nrefs/heads/master\nrefs/heads/master1\nrefs/heads/master2\nrefs/heads/master/full\n\n\n\nMore commonly, a refex of \nrefs/tags/v[0-9]\n will match all versioned tags\n(i.e., not just \nv1\n but also \nv12\n, \nv1.2\n, \nv12345\n, etc.)\n\n\nIf you want to restrict the match to just the one specific ref, add a $ at\nthe end, for example:\n\n\nRW  master$     =   alice\n\n\n\n\n\n\n\nYou can also use \nvirtual refs\n to perform extra checks and\ncontrols that you can't do with just the normal ref (like refs/heads/master)\nbeing pushed.  The most common example is restricting pushes by dir/file name,\nbut there are lots of other possibilities.\n\n\nuser/user group list\n\uf0c1\n\n\nLike the repos on the repo line, you can have any number of user names and/or\nuser group names on the rule line.  (However, please note that there is no\nconcept of regular expressions for user names).\n\n\nSECTION SUMMARY\n: at this point you know that each rule basically specifies\na repo, user, permission, and a \"refex\".\n\n\n\n\nrule accumulation\n\uf0c1\n\n\nAll\n the rules for a repo need not be specified in one place.  For example,\nyou might see something like this, perhaps at the top or bottom of the conf\nfile:\n\n\n\n\n# managers should be able to read any repo\n\n\nrepo \n@all\n\n\n    R\n   \n=   \n@managers\n\n\n\n\n\nor perhaps this:\n\n\n\n\n# anyone can clone open source repos\n\n\nrepo \n@FOSS\n\n\n    R\n   \n=   \n@all\n\n\n\n\n\nClearly, both these constructs affect repos which may have their own rules\nelsewhere.\n\n\nIf a bunch of projects share some naming convention, you can specify any rules\nthat are common to all of them by specifying the set of repos that are\naffected as a regular expression.  Notice that the regex can be defined\ndirectly in the repo line, or it can be defined in a group and the \ngroup\n\nused in the repo line; it's all the same to gitolite.\n\n\n\n\nrepo \nFOSS/..*\n\n   \n # ...rules for repos under FOSS/\n\n\n\n@secret\n     =   \nsecret/..*\n \nprivate/..*\n\n\nrepo \n@secret\n\n   \n # ...rules for repos under secret/ and private/\n\n\n\n\n\nFinally, although not very common, you can certainly do things like this:\n\n\n\n\nrepo \nfoo\n   \n # ...some rules...\n\n\n\n# ...other repos and rules...\n\n\n\nrepo \nfoo\n   \n # ...more rules for foo...\n\n\n\n\n\nNote that the \"other repos and rules\" may indirectly include repo \"foo\" (for\nexample it there were rules for \"repo @all\", or some other group that \"foo\"\nwas a member of).\n\n\nWhen access is being checked for an operation against a repo, \nall the rules\nthat pertain to that repo are collected, in the order they were seen in the\nconf file\n.\n\n\nGitolite then \ndiscards those rules that do \nnot\n apply to the user whose\naccess is being checked\n.  (A rule applies to a user if the user's name\nappears in the rule (after the equal sign), or if he is a member of any of the\ngroup names that appear in the rule.)\n\n\ndefining \"user\" and \"repo\"\n\uf0c1\n\n\nTo be very specific, when we speak of \"user\" and \"repo\" in rules,\n\n\n\n\n\"user\" means \"user or a \ngroup\n that he/she is a member of\", and\n\n\n\"repo\" means \"repo, or a group that it is a member of, or a regex that\n    matches it, or a group that contains a regex that matches it\".", 
            "title": "the \"conf\" file (part 1)"
        }, 
        {
            "location": "/conf/#the-conf-file-confgitoliteconf", 
            "text": "(part 1)   You might recall from the  basic\nadministration  page that this file is part of the gitolite-admin\nrepo.  You need to clone that repo, make and commit changes to this file, and\npush the commits back.  The  conf/gitolite.conf  file (often called just \"the conf file\" for short) is\none of the two most important files in gitolite.  It specifies repo names and\naccess rules, as well as repo options of various kinds and git-config values.  Pretty much all day-to-day management, except  managing users , happens\nfrom this file.  We'll use the following example to describe it's features.   (A tip of\nthe hat to Teemu Matilainen's gitolite vim-syntax file for the\ncolors.)   @staff               =   dilbert alice            # groups  @projects            =   foo bar repo  @projects  baz                               # repos      RW+               =    @staff                    # rules      -        master   =    ashok      RW                =   ashok     R                 =   wally\n\n    option deny-rules           =   1            # options      config  hooks.emailprefix     = '[%GL_REPO] '  # git-config", 
            "title": "the \"conf\" file (conf/gitolite.conf)"
        }, 
        {
            "location": "/conf/#basic-syntax", 
            "text": "As the example above shows, the syntax is fairly straightforward and simple.   In general, everything is  space separated ; there are no commas,\n    semicolons, etc., in the syntax.  Comments  are in the usual shell-ish style.  User names  and  repo names  are as simple as possible; they must\n    start with an alphanumeric, but after that they can also contain  . ,  _ ,\n    or  - . Usernames can optionally be followed by an  @  and a domainname\n    containing at least one  .  (this allows you to use an email address as\n    someone's username).  Group names  are like simple usernames (i.e., not email addresses) but\n    start with an  @  sign.  Reponames can contain  /  characters (this allows you to put your repos in\n    a tree-structure for convenience).  There are no continuation lines by default.  You do not need them; the\n    section on  groups  will tell you how you can break up large lists of\n    names in a group definition into multiple lines.  (But if you  must \n    have them, you can optionally enable them; look for \"continuation-lines\"\n    in  ~/.gitolite.rc ).", 
            "title": "basic syntax"
        }, 
        {
            "location": "/conf/#include-files", 
            "text": "Gitolite allows you to break up the configuration into multiple files and\ninclude them in the main file for convenience.  For example:  include \"foo.conf\"  will include the contents of the file \"conf/foo.conf\".    You can also use a glob ( include \"*.conf\" ), or put your include files\n    into subdirectories of \"conf\" ( include \"foo/bar.conf\" ), or both\n    ( include \"repos/*.conf\" ).    Included files are always searched from the gitolite-admin repo's  conf/ \n    directory, unless you supplied an absolute path.  (Note: in the interests\n    of cloning the admin-repo sanely you should avoid absolute paths!)    If you end up recursing, files that have been already processed once are\n    skipped, with a warning.    It is not a fatal error for an include file to be missing.  If it is a\n    glob, you won't even get a warning.    Advanced users:  subconf , a command that is very closely\nrelated to  include , is documented  here .  Please note  that whenever you see \"the  conf/gitolite.conf  file\" or \"the\nconf file\" in gitolite documentation, it means the combined text after the\ninclude processing is done.", 
            "title": "include files"
        }, 
        {
            "location": "/conf/#group-definitions", 
            "text": "You can group repos or users for convenience.  The syntax is the same for both\nand does not distinguish; until you  use  the group name it could really be\neither.  Here's an example:   @developers      =   dilbert alice wally  Group definitions accumulate; this is the same as the above:   @developers      =   dilbert @developers      =   alice @developers      =   wally  You can use one group in another group definition; the values will be expanded\nimmediately (meaning later additions will not appear in the second group):   @developers      =   dilbert alice @interns         =   ashok @staff           =    @interns   @developers  @developers      =   wally # wally is  NOT  part of @staff   Here's a very simple but complete example of using groups:   @developers      =   dilbert alice wally @foss-repos      =   git gitolite repo  @foss-repos      RW+           =    @developers", 
            "title": "group definitions"
        }, 
        {
            "location": "/conf/#special-group-all", 
            "text": "@all  is a special group name that is often convenient to use if you really\nmean \"all repos\" or \"all users\".", 
            "title": "special group @all"
        }, 
        {
            "location": "/conf/#warnings-on-undefined-groups", 
            "text": "Gitolite cannot truly catch undefined groups because the conf parser is\n1-pass, and you're allowed to define a group  after  it is used, like so:   repo  foo     RW    =    @foo  @foo  = u1 u2  (v3.5.3+)  However, in a simplistic attempt to help\npeople tearing their hair out because of a typo, gitolite will warn if a group\nis not defined when it is used.  So if you defined it later, either ignore the\nwarning or move the definition up.  Note that these warnings do NOT appear if you're  getting user group info from\nLDAP .", 
            "title": "warnings on undefined groups"
        }, 
        {
            "location": "/conf/#getting-user-group-info-from-ldap", 
            "text": "Gitolite's groups are pretty convenient, but some organisations already have\nsimilar (or sufficient) information in their LDAP store.  Gitolite can tap into that information, with a little help.  Write a program\nwhich, given a username, queries your LDAP store and returns a space-separated\nlist of groups that the user is a member of.  Then put the full path to this\nprogram in an  rc  variable called  GROUPLIST_PGM , like so:  GROUPLIST_PGM           =   '/home/git/bin/ldap-query-groups',  Now you can use those groupnames in access rules in gitolite, because the user\nis a member of those groups as well as any normal gitolite groups you may have\nadded him to in the conf file.  Caution: your program must do its own logging if you want the audit trail of\n\"why/how did this user get access to this repo at this time?\" to resolve\nproperly.  Gitolite does not do any logging of the results of the queries\nbecause for people who don't need it that would be a huge waste.", 
            "title": "getting user group info from LDAP"
        }, 
        {
            "location": "/conf/#access-rules", 
            "text": "Some of the pictures are thanks ( enormous  thanks!) to someone who\ncontributed them but does not want to be named (go figure!).  She even\nconverted them to ditaa format when I asked; these are not as pretty as what\nshe sent me originally but they're vim-editable in source form :-)  This section talks about how gitolite's access rules work.  It's a  very\nimportant  section, and well worth spending some time on.  Gitolite's access rules are designed to be easy to use for common situations,\nsuch as some of the examples you saw earlier.  However, they also pack a lot\nof power and flexibility.  Access rules decide whether a particular access is allowed or denied.  An\naccess is defined by four pieces of data: \"reponame, username, operation, and\nref\".  Each rule also has four similar pieces of data, and of course there are\nseveral rules -- some people have thousands! -- in the conf file. This section\nwill try and explain how these rules are used to decide if a given operation\nis to be allowed or denied.", 
            "title": "access rules"
        }, 
        {
            "location": "/conf/#what-does-a-rule-look-like", 
            "text": "You've seen some simple rules so far, for example in the  basic\nadministration  page.  Here's a slightly more complex one, just\nfor illustration.   repo  foo bar     RW+                       =   alice  @teamleads      -    master               =    dilbert @devteam      -    refs/tags/v[0-9]     =    dilbert @devteam      RW+  dev/                 =   dilbert  @devteam      RW                        =   dilbert  @devteam      R                         =    @managers   A \"repo\" line names one or more repos, and is followed by one or more rule\nlines. All the rules from then till the next \"repo\" line apply to the repo(s)\nspecified in the repo line -- in this example, the 'foo' and 'bar' repos.  Each rule line has a \"permission\" field, zero or more \"refex\"es, and one or\nmore user or user group name after the equal sign.  The \"repo\" line can also have repo groups, as we have seen in the\nsection on  groups  above.  Also, it can have regular expressions that match\nmultiple repos.  Before describing the various fields more formally, here's a description of\nwhat this specific rule list is saying:    alice and the team leads can do whatever they want (i.e., push, rewind, or\n    delete any branch or tag).    dilbert and the dev team has these restrictions   they can do anything to branches whose names start with \"dev/\"  they can create or fast-forward push, but not rewind or delete, any\n    branch except master  they can create (but not update/delete) any tag except tags starting\n    with \"v\" followed by a digit.     managers can read the repo but they can't push anything.    More formally, a rule line has the following fields:", 
            "title": "what does a rule look like?"
        }, 
        {
            "location": "/conf/#the-permission-field", 
            "text": "The permission field gives the type of access this rule line permits. The most\ncommonly used permissions are:   R, to allow read operations only  RW, to allow fast-forward push of a branch, or create new branch/tag  RW+, to allow pretty much anything -- fast-forward, rewind or delete\n    branches or tags  -  (the minus sign), to  deny  access.    There are also other, less commonly used,  types of permissions .", 
            "title": "the permission field"
        }, 
        {
            "location": "/conf/#the-refex-field", 
            "text": "You cannot write rules for all possible branch and tag names (i.e., refs) that\nusers will push.  The only sensible way to do this is to use  regular\nexpressions  instead.  A refex is a word I made up to mean \"a regex that matches a ref\".  In addition:    If no refex is supplied, it defaults to  refs/.* , for example in a rule\n    like this:  RW              =   alice    A refex not starting with  refs/   (or  VREF/ )  is assumed to\n    start with  refs/heads/ .  This means normal branches can be conveniently\n    written like this:  RW  master      =   alice\n# becomes 'refs/heads/master' internally  while tags will need to be fully qualified  RW  refs/tags/v[0-9]    =   bob    A refex is implicitly anchored at the start, but not at the end.  In\n    regular expression lingo, a  ^  is assumed at the start (but no  $  at the\n    end is assumed).  So a refex of  master  will match all these refs:  refs/heads/master\nrefs/heads/master1\nrefs/heads/master2\nrefs/heads/master/full  More commonly, a refex of  refs/tags/v[0-9]  will match all versioned tags\n(i.e., not just  v1  but also  v12 ,  v1.2 ,  v12345 , etc.)  If you want to restrict the match to just the one specific ref, add a $ at\nthe end, for example:  RW  master$     =   alice    You can also use  virtual refs  to perform extra checks and\ncontrols that you can't do with just the normal ref (like refs/heads/master)\nbeing pushed.  The most common example is restricting pushes by dir/file name,\nbut there are lots of other possibilities.", 
            "title": "the \"refex\" field"
        }, 
        {
            "location": "/conf/#useruser-group-list", 
            "text": "Like the repos on the repo line, you can have any number of user names and/or\nuser group names on the rule line.  (However, please note that there is no\nconcept of regular expressions for user names).  SECTION SUMMARY : at this point you know that each rule basically specifies\na repo, user, permission, and a \"refex\".", 
            "title": "user/user group list"
        }, 
        {
            "location": "/conf/#rule-accumulation", 
            "text": "All  the rules for a repo need not be specified in one place.  For example,\nyou might see something like this, perhaps at the top or bottom of the conf\nfile:   # managers should be able to read any repo  repo  @all      R     =    @managers   or perhaps this:   # anyone can clone open source repos  repo  @FOSS      R     =    @all   Clearly, both these constructs affect repos which may have their own rules\nelsewhere.  If a bunch of projects share some naming convention, you can specify any rules\nthat are common to all of them by specifying the set of repos that are\naffected as a regular expression.  Notice that the regex can be defined\ndirectly in the repo line, or it can be defined in a group and the  group \nused in the repo line; it's all the same to gitolite.   repo  FOSS/..* \n     # ...rules for repos under FOSS/  @secret      =    secret/..*   private/..*  repo  @secret \n     # ...rules for repos under secret/ and private/   Finally, although not very common, you can certainly do things like this:   repo  foo\n     # ...some rules...  # ...other repos and rules...  repo  foo\n     # ...more rules for foo...   Note that the \"other repos and rules\" may indirectly include repo \"foo\" (for\nexample it there were rules for \"repo @all\", or some other group that \"foo\"\nwas a member of).  When access is being checked for an operation against a repo,  all the rules\nthat pertain to that repo are collected, in the order they were seen in the\nconf file .  Gitolite then  discards those rules that do  not  apply to the user whose\naccess is being checked .  (A rule applies to a user if the user's name\nappears in the rule (after the equal sign), or if he is a member of any of the\ngroup names that appear in the rule.)", 
            "title": "rule accumulation"
        }, 
        {
            "location": "/conf/#defining-user-and-repo", 
            "text": "To be very specific, when we speak of \"user\" and \"repo\" in rules,   \"user\" means \"user or a  group  that he/she is a member of\", and  \"repo\" means \"repo, or a group that it is a member of, or a regex that\n    matches it, or a group that contains a regex that matches it\".", 
            "title": "defining \"user\" and \"repo\""
        }, 
        {
            "location": "/conf-2/", 
            "text": "the \"conf\" file (\nconf/gitolite.conf\n)\n\uf0c1\n\n\n(part 2)\n\n\n\n\naccess control rule matching\n\uf0c1\n\n\nAccess control rule matching is pretty simple.  From the previous section,\nyou know what \"permission\", \"refex\", \"user\", and \"repo\" are.  Here's how the\nrules are used to decide whether to allow or deny a request.\n\n\nAccess is checked once only for \"read\" operations, but twice for \"write\"s.\n\n\n(Note that the \ndeny-rules\n option, mentioned below, is explained in more\ndetail in a later section.)\n\n\nCheck #1\n: the first check happens as soon as gitolite-shell receives\ncontrol (from sshd or httpd).  gitolite-shell will pass control to\ngit-upload-pack or git-receive-pack only if this check succeeds.\n\n\n\n\ncollect all the rules pertaining to this repo \nand\n this user\n\n\nignore all the refexes; they don't apply to the first access check\n\n\nif\n the \ndeny-rules\n option is \nnot\n in effect for this repo, discard\n    all the \n-\n (deny) rules\n\n\nlook at the rules \nin sequence\n:\n\n\nif you find a \n-\n, access is denied\n\n\nfor a \"read\" operation (clone, fetch, ...), if you find a rule\n    containing \nR\n, access is allowed\n\n\nfor a \"write\" operation (push), if you find a rule containing \nW\n,\n    access is allowed\n\n\nif there are no more rules left, access is denied\n\n\n\n\n\n\n\n\nCheck #2\n: the second check only happens for \"push\" operations.  It is\ninvoked by \ngit-receive-pack\n running the gitolite-installed \nupdate\n hook.\nIf access is denied, the update hook fails, and git then aborts the push for\nthis ref.  (See \nman githooks\n for more.)\n\n\nIn the following description, we use the word \noperation\n instead of \nW\n,\nbecause the actual operation could be a plain, fast-forward, push (\nW\n) or a\nrewind/delete (\n+\n).  \nOther, less commonly used, values are \"C\", \"D\",\nor \"M\"; see \nhere\n.\n\n\n\n\ncollect all the rules pertaining to this repo \nand\n this user\n\n\ndiscard all the rules where the refex does not match the ref (branch or\n    tag) being pushed\n\n\nlook at the rules \nin sequence\n:\n\n\nif you find a \n-\n, access is denied\n\n\nif you find a rule containing the operation you are performing, access\n    is allowed\n\n\nif there are no more rules left, access is denied\n\n\n\n\n\n\n\n\nan example\n\uf0c1\n\n\nJust to be clear, let's work out an example of what happens when dilbert tries\nto push a branch called \"xyz\".\n\n\nWe'll pretend the rule list looks like this:\n\n\n\n\n# managers should be able to read any repo\n\n\nrepo \n@all\n\n\n    R\n                       \n=   \n@managers\n\n\n\n# ...other rules for other repos...\n\n\n\nrepo \nfoo bar\n\n\n    RW+\n                     \n=   alice \n@teamleads\n\n\n    -\n   master              \n=\n   dilbert @devteam\n\n\n    -\n   refs/tags/v[0-9]    \n=\n   dilbert @devteam\n\n\n    RW+\n dev/                \n=   dilbert \n@devteam\n\n\n    RW\n                      \n=   dilbert \n@devteam\n\n\n    R\n                       \n=   \n@managers\n\n\n\n\n\nAfter adding a default refex and expanding the supplied ones (see the\n\nrefex\n section earlier), this is what it looks like.  We've added line\nnumbers for convenience; we'll see why later.\n\n\n\n\n 1 \n# managers should be able to read any repo\n\n\n 2 \nrepo \n@all\n\n\n 3 \n    R\n                       \n=   \n@managers\n\n\n 4 \n\n\n 5 \n   \n # ...other rules for other repos...\n\n\n 6 \n\n\n 7 \nrepo \nfoo bar\n\n 8 \n\n\n 9 \n    RW+\n refs/.*             \n=   alice \n@teamleads\n\n\n10 \n    -\n   refs/heads/master   \n=\n   dilbert @devteam\n\n\n11 \n    -\n   refs/tags/v[0-9]    \n=\n   dilbert @devteam\n\n\n12 \n    RW+\n refs/heads/dev/     \n=   dilbert \n@devteam\n\n\n13 \n    RW\n  refs/.*             \n=   dilbert \n@devteam\n\n\n14 \n    R\n                       \n=   \n@managers\n\n\n\n\n\nThis represents a set of rules that are basically this:\n\n\nrepo    user        perm    ref                 (from line)\n\n foo     @managers  R                                3\n foo     alice      RW+      refs/.*                 9\n foo     @teamleads RW+      refs/.*                 9\n foo     dilbert    -        refs/heads/master       10\n foo     @devteam   -        refs/heads/master       10\n foo     dilbert    -        refs/tags/v[0-9]        11\n foo     @devteam   -        refs/tags/v[0-9]        11\n foo     dilbert    RW+      refs/heads/dev/         12\n foo     @devteam   RW+      refs/heads/dev/         12\n foo     dilbert    RW       refs/.*                 13\n foo     @devteam   RW       refs/.*                 13\n foo     @managers  R                                14\n\n\n\nWhich of these rules apply for dilbert?  We'll assume he's not a team lead, as\n\nthat\n would defeat the whole purpose of this example!  We \nknow\n he's not a\nmanager, as that would defeat the whole purpose of the comic! Finally, we\nassume he's also not part of \"@devteam\", (otherwise why would you name him\nseparately in all those lines?).\n\n\nSo we discard all those rules, which leaves us, for repo \"foo\" and user\n\"dilbert\":\n\n\nperm    ref                 (from line)\n\n-        refs/heads/master       10\n-        refs/tags/v[0-9]        11\nRW+      refs/heads/dev/         12\nRW       refs/.*                 13\n\n\n\nSo what happens when dilbert tries to push a branch called \"xyz\"?\n\n\nAt check #1, the data gitolite has is that \"oper\" is \"W\" (and ref of course is\nunknown).  We discard lines 10 and 11 (the \ndeny-rules\n option is off by\ndefault, so we ignore \n-\n rules).  Line 12 supplies a perm of \"RW+\", which\ncontains \"W\" (the \"oper\") so access is allowed.\n\n\nAt check #2, the data gitolite has is that \"oper\" is \"W\" and ref is\n\nrefs/heads/xyz\n.  We discard the first three rules, since the ref does not\nmatch any of those refexes.  That leaves just line 13.\n\n\nIf the push were a fast-forward push, the \"oper\" would be \"W\", and since it is\ncontained in the perm for rule 13, access is allowed.\n\n\nHowever, if he were to try a rewind-push, then the \"oper\" would be \"+\", which\nis not contained in \"RW\", it wouldn't match, then control would go back for\nthe \nnext\n rule, and since there aren't any more, access would be denied.\n\n\n\n\ntracing the access control decision\n\uf0c1\n\n\n(v3.6.1)\n Gitolite can help you trace this logic quickly and easily.\nHere's one example run, with the above rules.  This one tests whether dilbert\ncan push to repo foo (check #1).  Note that the syntax for specifying an\nunknown ref in this command is 'any'.\n\n\n$ gitolite access -s foo dilbert W any\nlegend:\n    d =\n skipped deny rule due to ref unknown or 'any',\n    r =\n skipped due to refex not matching,\n    p =\n skipped due to perm (W, +, etc) not matching,\n    D =\n explicitly denied,\n    A =\n explicitly allowed,\n    F =\n denied due to fallthru (no rules matched)\n\n  d        gitolite.conf:10         -   refs/heads/master   =   dilbert @devteam\n  d        gitolite.conf:11         -   refs/tags/v[0-9]    =   dilbert @devteam\n  A        gitolite.conf:12         RW+ refs/heads/dev/     =   dilbert @devteam\n\nrefs/heads/dev/\n\n\n\nNow see what happens when we try check #2 (we've omitted the legend in the\noutput, since it's always the same):\n\n\n$ gitolite access -s foo dilbert W xyz\n\n  r        gitolite.conf:10         -   refs/heads/master   =   dilbert @devteam\n  r        gitolite.conf:11         -   refs/tags/v[0-9]    =   dilbert @devteam\n  r        gitolite.conf:12         RW+ refs/heads/dev/     =   dilbert @devteam\n  A        gitolite.conf:13         RW  refs/.*             =   dilbert @devteam\n\nrefs/.*\n\n\n\nAnd if you try a force push:\n\n\n$ gitolite access -s foo dilbert + refs/heads/xyz\n\n  r        gitolite.conf:10         -   refs/heads/master   =   dilbert @devteam\n  r        gitolite.conf:11         -   refs/tags/v[0-9]    =   dilbert @devteam\n  r        gitolite.conf:12         RW+ refs/heads/dev/     =   dilbert @devteam\n  p        gitolite.conf:13         RW  refs/.*             =   dilbert @devteam\n  F           (fallthru)\n\n+ refs/heads/xyz foo dilbert DENIED by fallthru\n\n\n\nI hope that was useful!  Be sure you correlated the output of 'gitolite access\n-s' with the rule workflow pictures and corresponding descriptions to cement\nyour understanding.\n\n\nread access respecting deny rules\n\uf0c1\n\n\nNormally, deny rules are ignored by access check #1 (the one that runs\n\nbefore\n git-upload-pack or git-receive-pack is called by gitolite-shell);\nthey apply only to check #2 (the update hook check).\n\n\nBut sometimes you want this \"pre-git\" access check to respect deny rules;\ni.e., use the flow of check #2, not check #1.  You tell gitolite to do this by\nsetting the \"deny-rules\" option for the repo; when you do that, the flow of\ncheck #2 is used for both stages, before git \nand\n in the update hook.\n\n\nexample 1\n\uf0c1\n\n\nHere's an example. Here, we have lots of repos, which should all be accessible\nby gitweb or daemon, so we want the convenience provided by lines 6 and 7 (we\ndon't want to put line 7 in \neach\n repo).  However, we also have some secret\nrepos (maybe the gitolite-admin repo and some others that we will list), which\nwe want to prevent gitweb or daemon from seeing.\n\n\nHow do we do that?\n\n\nThe naive approach -- putting in a deny rule just for those repos -- doesn't\nwork.  In fact nothing else seems to work either; you'll have to replace the\n\n@all\n with an exhaustive list of \nall repos other than the secret repos\n.\n\n\n\n\n1 \n@secret\n = gitolite-admin \nsecret-repo/..*\n\n\n2 \nrepo \n@secret\n\n\n3 \n    -\n   \n=\n   gitweb daemon\n\n\n4 \n\n\n5 \n\n\n6 \nrepo \n@all\n\n\n7 \n    R\n   \n=   gitweb daemon\n\n8 \n\n\n9 \n# ...other repos and rules...\n\n\n\n\n\nThat's... painful!\n\n\nWhat you really want is for that repo to always use check #2, even when it\ndoesn't actually have a ref to test for.\n\n\n\n\n1 \n@secret\n = gitolite-admin \nsecret-repo/..*\n\n\n2 \nrepo \n@secret\n\n\n3 \n    -\n   \n=\n   gitweb daemon\n\n\n4 \n    option deny-rules = 1\n\n5 \n\n\n6 \nrepo \n@all\n\n\n7 \n    R\n   \n=   gitweb daemon\n\n8 \n\n\n9 \n# ...other repos and rules...\n\n\n\n\n\nThis is done by adding \none\n line, line 4 in this example.  This sets a\ngitolite \n\"option\"\n that says you want \"deny rules\" to be applicable\neven for read access.\n\n\nOnce you do that, all you need to do is to ensure that the first rule\nencountered by these two \"users\" for those repos is a deny rule, so that it\ncan take effect first.  In this example, the placement of lines 2, 3 vis-a-vis\nlines 6, 7 matters -- don't switch them!\n\n\nexample 2\n\uf0c1\n\n\nIn this example the \"open\" repos are fewer in number, so it is the opposite\nsituation to the above in terms of our ability to enumerate all the repos.\n\n\n\n\n@open\n = git gitolite \nfoss/..*\n \n[...]\n\n\n\nrepo \n@all\n\n\n    -\n   \n=\n   gitweb daemon\n\n    option deny-rules = 1\n\n\nrepo \n@open\n\n\n    R\n   \n=   gitweb daemon\n    option deny-rules = 0\n\n\n\n\nTo see why this works, you need to understand that for \noptions\n and\n\nconfig\n lines, a later setting \noverrides\n earlier\nones.  So we set it to 1 for all repos, then selectively set it to 0 for some.\n\n\nThis means the \"deny-rules\" option applies to \nall the repos except the \"open\"\nrepos\n, and so the first rule encountered by gitweb and daemon is a deny rule,\nso they are denied read access.  The \"open\" repos, on the other hand, get the\nnormal default behaviour, which is to ignore deny rules for read access, and\nthus they only see the \"R\" permission.\n\n\n\n\nappendix 1: different types of write operations\n\uf0c1\n\n\nGit supplies enough information to the update hook to be able to distinguish\nseveral types of writes.\n\n\nThe most common are:\n\n\n\n\nRW\n -- create a ref or fast-forward push a ref.  No rewinds or deletes.\n\n\nRW+\n -- create, fast-forward push, rewind push, or delete a ref.\n\n\n\n\nSometimes you want to allow people to push, but not \ncreate\n a ref.  Or\nrewind, but not \ndelete\n a ref.  The \nC\n and \nD\n qualifiers help here.\n\n\n\n\n\n\nIf a rule specifies \nRWC\n or \nRW+C\n, then \nrules that do NOT have the C\n    qualifier will no longer permit \ncreating\n a ref in that repo\n.\n\n\nPlease do not confuse this with the standalone \nC\n\npermission that allows someone to \ncreate\n a \nrepo\n\n\n\n\n\n\nIf a rule specifies \nRWD\n or \nRW+D\n, then \nrules that do NOT have the D\n    qualifier will no longer permit \ndeleting\n a ref in that repo\n.\n\n\n\n\n\n\nNote: These two can be combined, so you can have \nRWCD\n and \nRW+CD\n as well.\n\n\nOne very rare need is to reject merge commits (a commit series that is not a\nstraight line of commits).  The \nM\n qualifier helps here:\n\n\n\n\nWhen a rule has \nM\n appended to the permissions, \nrules that do NOT have\n    it will reject a commit sequence that contains a merge commit\n (i.e., they\n    only accept a straight line series of commits).\n\n\n\n\nsummary of permissions\n\uf0c1\n\n\nThe full set of permissions, in regex syntax, is \n-|R|RW+?C?D?M?\n.  This\nexpands to one of \n-\n, \nR\n, \nRW\n, \nRW+\n, \nRWC\n, \nRW+C\n, \nRWD\n, \nRW+D\n, \nRWCD\n,\nor \nRW+CD\n, all but the first two optionally followed by an \nM\n.\n\n\n\n\nappendix 2: gitolite access check flow\n\uf0c1\n\n\nHere's lots more detail on the access check process, with flow diagrams.\n\n\nWhen do the access checks happen and what are the four pieces of data (repo,\nuser, operation, ref) in each case?\n\n\n\n\n\n\n\n\nread\n\n\nwrite\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn these pictures the access checks are marked in yellow.\n\n\nThe picture on the left is for a read (git clone, fetch, ls-remote).  There is\nonly one access check for a read operation.  If access is denied, the\noperation aborts.  Otherwise, gitolite-shell invokes git-upload-pack.\n\n\nNotice the information available to the access check.  The \"oper\" (operation)\nis \"R\", indicating a read operation.  The \"ref\" is listed as \"unknown\",\nalthough we could also call it \"irrelevant\"!\n\n\nAccess check #1\n proceeds with those 4 bits of information, and either\npasses or fails.  If it passes, gitolite passes control to \"git-upload-pack\"\nand its job is done.\n\n\n\n\nThe flow for a push operation (the picture on the right) is \nvery\n similar\nupto the first access check. The \"oper\" is \"W\" now, although the \"ref\" is\nstill unknown. \nEven though this \nis\n a push, at this stage in the\nprotocol nothing on the server knows what branch or tag or combination of them\nare coming down the wire, since we haven't executed git-receive-pack\nyet!\n\n\nIf it succeeds, gitolite passes control to \"git-receive-pack\", but its job is\nnot done yet.  \nGit\n will eventually invoke the update hook (see 'man\ngithooks'). Gitolite has already grabbed this hook, which receives from git\nthe ref name being pushed, as well as enough information to compute whether\nthis push is a \"fast-forward push\" or a \"rewind push\".  Based on this,\ngitolite sets the \"oper\" field to \"W\" or \"+\", respectively.\n\n\nAccess check #2\n proceeds with this information.  The result is sent back\nto git-receive-pack (in the form of an exit code; again, see 'man githooks'),\nand the push fails or succeeds based on that.\n\n\nputting it all together\n\uf0c1\n\n\nAt this point, we have the following pieces of information:\n\n\n\n\n\n\nA set of rules, each containing 4 pieces of data: repo, user, perm, refex.\n    They are in the sequence they were found in the conf file.\n\n\nWe discard all rules that do not apply to this repo and this user, which\nmeans our set of rules have only two fields: perm, refex.\n\n\nAs a quick reminder, perm is one of R, RW, RW+, or \n-\n.\n\n\n\n\n\n\nFour elements that make up the access being attempted: repo, user, oper,\n    ref.\n\n\nAgain, as a reminder, the \"oper\" is \none letter\n.  For \"check #1\" it is\neither R or W, and for check #2 it can be W or +.\n\n\n\n\n\n\nNote on permissions and \"oper\": there are other \ntypes of\npermissions\n, but for our discussion these are enough.  The\nothers are rare, and anyway it is easy to extrapolate to them.\n\n\nWith that background, here's the flow.  The one on the left is for check #1\n(ref is unknown) while the one on the right is for check #2 (ref is known).\n\n\n\n\n\n\n\n\nref unknown\n\n\nref known\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs you can see, deny rules are ignored by check #1 -- they're not tested in\nany way.  For check #2, if there is a deny rule whose refex matched the ref,\naccess is denied (as you'd expect).\n\n\nappendix 3: embedding test code in your conf\n\uf0c1\n\n\nAs of v3.6.7, it is possible to embed test code within gitolite.conf.  This\ncan be useful if your conf file is complicated, and you need a way to make\nsure that any changes are not messing with your most important restrictions.\n\n\nFull details, including preparation and caveats, are in\n\ncontrib/utils/testconf\n, but here's a teaser example:\n\n\nrepo foo\n    RW+     =   u1\n    RW      =   u2\n\n=begin testconf\ngitolite access -q foo u1 + any || echo FAILED\ngitolite access -q foo u2 + any \n echo FAILED\ngitolite access -q foo u2 W any || echo FAILED\n=end", 
            "title": "the \"conf\" file (part 2)"
        }, 
        {
            "location": "/conf-2/#the-conf-file-confgitoliteconf", 
            "text": "(part 2)", 
            "title": "the \"conf\" file (conf/gitolite.conf)"
        }, 
        {
            "location": "/conf-2/#access-control-rule-matching", 
            "text": "Access control rule matching is pretty simple.  From the previous section,\nyou know what \"permission\", \"refex\", \"user\", and \"repo\" are.  Here's how the\nrules are used to decide whether to allow or deny a request.  Access is checked once only for \"read\" operations, but twice for \"write\"s.  (Note that the  deny-rules  option, mentioned below, is explained in more\ndetail in a later section.)  Check #1 : the first check happens as soon as gitolite-shell receives\ncontrol (from sshd or httpd).  gitolite-shell will pass control to\ngit-upload-pack or git-receive-pack only if this check succeeds.   collect all the rules pertaining to this repo  and  this user  ignore all the refexes; they don't apply to the first access check  if  the  deny-rules  option is  not  in effect for this repo, discard\n    all the  -  (deny) rules  look at the rules  in sequence :  if you find a  - , access is denied  for a \"read\" operation (clone, fetch, ...), if you find a rule\n    containing  R , access is allowed  for a \"write\" operation (push), if you find a rule containing  W ,\n    access is allowed  if there are no more rules left, access is denied     Check #2 : the second check only happens for \"push\" operations.  It is\ninvoked by  git-receive-pack  running the gitolite-installed  update  hook.\nIf access is denied, the update hook fails, and git then aborts the push for\nthis ref.  (See  man githooks  for more.)  In the following description, we use the word  operation  instead of  W ,\nbecause the actual operation could be a plain, fast-forward, push ( W ) or a\nrewind/delete ( + ).   Other, less commonly used, values are \"C\", \"D\",\nor \"M\"; see  here .   collect all the rules pertaining to this repo  and  this user  discard all the rules where the refex does not match the ref (branch or\n    tag) being pushed  look at the rules  in sequence :  if you find a  - , access is denied  if you find a rule containing the operation you are performing, access\n    is allowed  if there are no more rules left, access is denied", 
            "title": "access control rule matching"
        }, 
        {
            "location": "/conf-2/#an-example", 
            "text": "Just to be clear, let's work out an example of what happens when dilbert tries\nto push a branch called \"xyz\".  We'll pretend the rule list looks like this:   # managers should be able to read any repo  repo  @all      R                         =    @managers  # ...other rules for other repos...  repo  foo bar     RW+                       =   alice  @teamleads      -    master               =    dilbert @devteam      -    refs/tags/v[0-9]     =    dilbert @devteam      RW+  dev/                 =   dilbert  @devteam      RW                        =   dilbert  @devteam      R                         =    @managers   After adding a default refex and expanding the supplied ones (see the refex  section earlier), this is what it looks like.  We've added line\nnumbers for convenience; we'll see why later.    1  # managers should be able to read any repo   2  repo  @all   3      R                         =    @managers   4    5       # ...other rules for other repos...   6    7  repo  foo bar  8    9      RW+  refs/.*              =   alice  @teamleads  10      -    refs/heads/master    =    dilbert @devteam  11      -    refs/tags/v[0-9]     =    dilbert @devteam  12      RW+  refs/heads/dev/      =   dilbert  @devteam  13      RW   refs/.*              =   dilbert  @devteam  14      R                         =    @managers   This represents a set of rules that are basically this:  repo    user        perm    ref                 (from line)\n\n foo     @managers  R                                3\n foo     alice      RW+      refs/.*                 9\n foo     @teamleads RW+      refs/.*                 9\n foo     dilbert    -        refs/heads/master       10\n foo     @devteam   -        refs/heads/master       10\n foo     dilbert    -        refs/tags/v[0-9]        11\n foo     @devteam   -        refs/tags/v[0-9]        11\n foo     dilbert    RW+      refs/heads/dev/         12\n foo     @devteam   RW+      refs/heads/dev/         12\n foo     dilbert    RW       refs/.*                 13\n foo     @devteam   RW       refs/.*                 13\n foo     @managers  R                                14  Which of these rules apply for dilbert?  We'll assume he's not a team lead, as that  would defeat the whole purpose of this example!  We  know  he's not a\nmanager, as that would defeat the whole purpose of the comic! Finally, we\nassume he's also not part of \"@devteam\", (otherwise why would you name him\nseparately in all those lines?).  So we discard all those rules, which leaves us, for repo \"foo\" and user\n\"dilbert\":  perm    ref                 (from line)\n\n-        refs/heads/master       10\n-        refs/tags/v[0-9]        11\nRW+      refs/heads/dev/         12\nRW       refs/.*                 13  So what happens when dilbert tries to push a branch called \"xyz\"?  At check #1, the data gitolite has is that \"oper\" is \"W\" (and ref of course is\nunknown).  We discard lines 10 and 11 (the  deny-rules  option is off by\ndefault, so we ignore  -  rules).  Line 12 supplies a perm of \"RW+\", which\ncontains \"W\" (the \"oper\") so access is allowed.  At check #2, the data gitolite has is that \"oper\" is \"W\" and ref is refs/heads/xyz .  We discard the first three rules, since the ref does not\nmatch any of those refexes.  That leaves just line 13.  If the push were a fast-forward push, the \"oper\" would be \"W\", and since it is\ncontained in the perm for rule 13, access is allowed.  However, if he were to try a rewind-push, then the \"oper\" would be \"+\", which\nis not contained in \"RW\", it wouldn't match, then control would go back for\nthe  next  rule, and since there aren't any more, access would be denied.", 
            "title": "an example"
        }, 
        {
            "location": "/conf-2/#tracing-the-access-control-decision", 
            "text": "(v3.6.1)  Gitolite can help you trace this logic quickly and easily.\nHere's one example run, with the above rules.  This one tests whether dilbert\ncan push to repo foo (check #1).  Note that the syntax for specifying an\nunknown ref in this command is 'any'.  $ gitolite access -s foo dilbert W any\nlegend:\n    d =  skipped deny rule due to ref unknown or 'any',\n    r =  skipped due to refex not matching,\n    p =  skipped due to perm (W, +, etc) not matching,\n    D =  explicitly denied,\n    A =  explicitly allowed,\n    F =  denied due to fallthru (no rules matched)\n\n  d        gitolite.conf:10         -   refs/heads/master   =   dilbert @devteam\n  d        gitolite.conf:11         -   refs/tags/v[0-9]    =   dilbert @devteam\n  A        gitolite.conf:12         RW+ refs/heads/dev/     =   dilbert @devteam\n\nrefs/heads/dev/  Now see what happens when we try check #2 (we've omitted the legend in the\noutput, since it's always the same):  $ gitolite access -s foo dilbert W xyz\n\n  r        gitolite.conf:10         -   refs/heads/master   =   dilbert @devteam\n  r        gitolite.conf:11         -   refs/tags/v[0-9]    =   dilbert @devteam\n  r        gitolite.conf:12         RW+ refs/heads/dev/     =   dilbert @devteam\n  A        gitolite.conf:13         RW  refs/.*             =   dilbert @devteam\n\nrefs/.*  And if you try a force push:  $ gitolite access -s foo dilbert + refs/heads/xyz\n\n  r        gitolite.conf:10         -   refs/heads/master   =   dilbert @devteam\n  r        gitolite.conf:11         -   refs/tags/v[0-9]    =   dilbert @devteam\n  r        gitolite.conf:12         RW+ refs/heads/dev/     =   dilbert @devteam\n  p        gitolite.conf:13         RW  refs/.*             =   dilbert @devteam\n  F           (fallthru)\n\n+ refs/heads/xyz foo dilbert DENIED by fallthru  I hope that was useful!  Be sure you correlated the output of 'gitolite access\n-s' with the rule workflow pictures and corresponding descriptions to cement\nyour understanding.", 
            "title": "tracing the access control decision"
        }, 
        {
            "location": "/conf-2/#read-access-respecting-deny-rules", 
            "text": "Normally, deny rules are ignored by access check #1 (the one that runs before  git-upload-pack or git-receive-pack is called by gitolite-shell);\nthey apply only to check #2 (the update hook check).  But sometimes you want this \"pre-git\" access check to respect deny rules;\ni.e., use the flow of check #2, not check #1.  You tell gitolite to do this by\nsetting the \"deny-rules\" option for the repo; when you do that, the flow of\ncheck #2 is used for both stages, before git  and  in the update hook.", 
            "title": "read access respecting deny rules"
        }, 
        {
            "location": "/conf-2/#example-1", 
            "text": "Here's an example. Here, we have lots of repos, which should all be accessible\nby gitweb or daemon, so we want the convenience provided by lines 6 and 7 (we\ndon't want to put line 7 in  each  repo).  However, we also have some secret\nrepos (maybe the gitolite-admin repo and some others that we will list), which\nwe want to prevent gitweb or daemon from seeing.  How do we do that?  The naive approach -- putting in a deny rule just for those repos -- doesn't\nwork.  In fact nothing else seems to work either; you'll have to replace the @all  with an exhaustive list of  all repos other than the secret repos .   1  @secret  = gitolite-admin  secret-repo/..*  2  repo  @secret  3      -     =    gitweb daemon  4   5   6  repo  @all  7      R     =   gitweb daemon 8   9  # ...other repos and rules...   That's... painful!  What you really want is for that repo to always use check #2, even when it\ndoesn't actually have a ref to test for.   1  @secret  = gitolite-admin  secret-repo/..*  2  repo  @secret  3      -     =    gitweb daemon  4      option deny-rules = 1 5   6  repo  @all  7      R     =   gitweb daemon 8   9  # ...other repos and rules...   This is done by adding  one  line, line 4 in this example.  This sets a\ngitolite  \"option\"  that says you want \"deny rules\" to be applicable\neven for read access.  Once you do that, all you need to do is to ensure that the first rule\nencountered by these two \"users\" for those repos is a deny rule, so that it\ncan take effect first.  In this example, the placement of lines 2, 3 vis-a-vis\nlines 6, 7 matters -- don't switch them!", 
            "title": "example 1"
        }, 
        {
            "location": "/conf-2/#example-2", 
            "text": "In this example the \"open\" repos are fewer in number, so it is the opposite\nsituation to the above in terms of our ability to enumerate all the repos.   @open  = git gitolite  foss/..*   [...]  repo  @all      -     =    gitweb daemon \n    option deny-rules = 1 repo  @open      R     =   gitweb daemon\n    option deny-rules = 0  To see why this works, you need to understand that for  options  and config  lines, a later setting  overrides  earlier\nones.  So we set it to 1 for all repos, then selectively set it to 0 for some.  This means the \"deny-rules\" option applies to  all the repos except the \"open\"\nrepos , and so the first rule encountered by gitweb and daemon is a deny rule,\nso they are denied read access.  The \"open\" repos, on the other hand, get the\nnormal default behaviour, which is to ignore deny rules for read access, and\nthus they only see the \"R\" permission.", 
            "title": "example 2"
        }, 
        {
            "location": "/conf-2/#appendix-1-different-types-of-write-operations", 
            "text": "Git supplies enough information to the update hook to be able to distinguish\nseveral types of writes.  The most common are:   RW  -- create a ref or fast-forward push a ref.  No rewinds or deletes.  RW+  -- create, fast-forward push, rewind push, or delete a ref.   Sometimes you want to allow people to push, but not  create  a ref.  Or\nrewind, but not  delete  a ref.  The  C  and  D  qualifiers help here.    If a rule specifies  RWC  or  RW+C , then  rules that do NOT have the C\n    qualifier will no longer permit  creating  a ref in that repo .  Please do not confuse this with the standalone  C \npermission that allows someone to  create  a  repo    If a rule specifies  RWD  or  RW+D , then  rules that do NOT have the D\n    qualifier will no longer permit  deleting  a ref in that repo .    Note: These two can be combined, so you can have  RWCD  and  RW+CD  as well.  One very rare need is to reject merge commits (a commit series that is not a\nstraight line of commits).  The  M  qualifier helps here:   When a rule has  M  appended to the permissions,  rules that do NOT have\n    it will reject a commit sequence that contains a merge commit  (i.e., they\n    only accept a straight line series of commits).", 
            "title": "appendix 1: different types of write operations"
        }, 
        {
            "location": "/conf-2/#summary-of-permissions", 
            "text": "The full set of permissions, in regex syntax, is  -|R|RW+?C?D?M? .  This\nexpands to one of  - ,  R ,  RW ,  RW+ ,  RWC ,  RW+C ,  RWD ,  RW+D ,  RWCD ,\nor  RW+CD , all but the first two optionally followed by an  M .", 
            "title": "summary of permissions"
        }, 
        {
            "location": "/conf-2/#appendix-2-gitolite-access-check-flow", 
            "text": "Here's lots more detail on the access check process, with flow diagrams.  When do the access checks happen and what are the four pieces of data (repo,\nuser, operation, ref) in each case?     read  write           In these pictures the access checks are marked in yellow.  The picture on the left is for a read (git clone, fetch, ls-remote).  There is\nonly one access check for a read operation.  If access is denied, the\noperation aborts.  Otherwise, gitolite-shell invokes git-upload-pack.  Notice the information available to the access check.  The \"oper\" (operation)\nis \"R\", indicating a read operation.  The \"ref\" is listed as \"unknown\",\nalthough we could also call it \"irrelevant\"!  Access check #1  proceeds with those 4 bits of information, and either\npasses or fails.  If it passes, gitolite passes control to \"git-upload-pack\"\nand its job is done.   The flow for a push operation (the picture on the right) is  very  similar\nupto the first access check. The \"oper\" is \"W\" now, although the \"ref\" is\nstill unknown.  Even though this  is  a push, at this stage in the\nprotocol nothing on the server knows what branch or tag or combination of them\nare coming down the wire, since we haven't executed git-receive-pack\nyet!  If it succeeds, gitolite passes control to \"git-receive-pack\", but its job is\nnot done yet.   Git  will eventually invoke the update hook (see 'man\ngithooks'). Gitolite has already grabbed this hook, which receives from git\nthe ref name being pushed, as well as enough information to compute whether\nthis push is a \"fast-forward push\" or a \"rewind push\".  Based on this,\ngitolite sets the \"oper\" field to \"W\" or \"+\", respectively.  Access check #2  proceeds with this information.  The result is sent back\nto git-receive-pack (in the form of an exit code; again, see 'man githooks'),\nand the push fails or succeeds based on that.", 
            "title": "appendix 2: gitolite access check flow"
        }, 
        {
            "location": "/conf-2/#putting-it-all-together", 
            "text": "At this point, we have the following pieces of information:    A set of rules, each containing 4 pieces of data: repo, user, perm, refex.\n    They are in the sequence they were found in the conf file.  We discard all rules that do not apply to this repo and this user, which\nmeans our set of rules have only two fields: perm, refex.  As a quick reminder, perm is one of R, RW, RW+, or  - .    Four elements that make up the access being attempted: repo, user, oper,\n    ref.  Again, as a reminder, the \"oper\" is  one letter .  For \"check #1\" it is\neither R or W, and for check #2 it can be W or +.    Note on permissions and \"oper\": there are other  types of\npermissions , but for our discussion these are enough.  The\nothers are rare, and anyway it is easy to extrapolate to them.  With that background, here's the flow.  The one on the left is for check #1\n(ref is unknown) while the one on the right is for check #2 (ref is known).     ref unknown  ref known           As you can see, deny rules are ignored by check #1 -- they're not tested in\nany way.  For check #2, if there is a deny rule whose refex matched the ref,\naccess is denied (as you'd expect).", 
            "title": "putting it all together"
        }, 
        {
            "location": "/conf-2/#appendix-3-embedding-test-code-in-your-conf", 
            "text": "As of v3.6.7, it is possible to embed test code within gitolite.conf.  This\ncan be useful if your conf file is complicated, and you need a way to make\nsure that any changes are not messing with your most important restrictions.  Full details, including preparation and caveats, are in contrib/utils/testconf , but here's a teaser example:  repo foo\n    RW+     =   u1\n    RW      =   u2\n\n=begin testconf\ngitolite access -q foo u1 + any || echo FAILED\ngitolite access -q foo u2 + any   echo FAILED\ngitolite access -q foo u2 W any || echo FAILED\n=end", 
            "title": "appendix 3: embedding test code in your conf"
        }, 
        {
            "location": "/rc/", 
            "text": "the \"rc\" file (\n$HOME/.gitolite.rc\n)\n\uf0c1\n\n\n\n\nIMPORTANT\n: if you have a v3.0-v3.3 rc file it is documented \nhere\n,\nand it will still work.  Please see appendix A below for details.\n\n\n\n\nThe rc file is designed to be the only thing unique to your site for most\nsetups.\n\n\nThe rc file is well commented.  Please look at the \n~/.gitolite.rc\n file that\ngets installed when you setup gitolite.  \nYou can always get a default copy\nfor your current version by running \ngitolite print-default-rc\n.\n  (Please\nsee appendix A for upgrade instructions.)\n\n\nstructure of the rc file\n\uf0c1\n\n\nThe rc file is perl code, but you do NOT need to know perl to edit it.  Just\nmind the commas, use single quotes unless you know what you're doing, and make\nsure the brackets and braces stay matched up!\n\n\nAs you can see there are 3 types of variables in it:\n\n\n\n\nA lot of simple variables (like \nUMASK\n, \nGIT_CONFIG_KEYS\n, etc.).\n\n\nA hash or two (like \nROLES\n).\n\n\nAnd one large list of features to be enabled (\nENABLE\n).\n\n\n\n\nThis page documents only some of them; for most of them it's best to look in\nthe actual rc file or in each of their individual documentation files around;\nstart with \n\"non-core\" gitolite\n.  If a setting is used by a command\nthen running that command with '-h' may give you additional information.\n\n\nspecific variables\n\uf0c1\n\n\n\n\n\n\n$UMASK\n, octal, default \n0077\n\n\nThe default UMASK that gitolite uses gives \nrwx------\n permissions to all\nthe repos and their contents.  People who want to run gitweb (or cgit,\nredmine, etc) realise that this will not do.\n\n\nThe correct way to deal with this is to give this variable a value like\n\n0027\n (note the syntax: the leading 0 is required), and then make the\nuser running the webserver (apache, www-data, whatever) a member of the\n'git' group.\n\n\nIf you've already installed gitolite then existing files will have to be\nfixed up manually (for a umask or 0027, that would be \nchmod -R g+rX\n).\nThis is because umask only affects permissions on newly created files, not\nexisting ones.\n\n\n\n\n\n\n$GIT_CONFIG_KEYS\n, string, default empty\n\n\nSee the \nsecurity note\n at the end of this\npage for why we do this.\n\n\nThis setting allows the repo admin to define acceptable gitconfig keys.\n\n\nGitolite allows you to set git config values using the \"config\" keyword;\nsee \nhere\n for details and syntax.\n\n\nYou have 3 choices.  By default \n$GIT_CONFIG_KEYS\n is left empty, which\ncompletely disables this feature (meaning you cannot set git configs via\nthe repo config).\n\n\nThe second choice is to give it a space separated list of settings you\nconsider safe.  (These are actually treated as a set of \nregular\nexpressions\n, and any one of them must match).\n\n\nFor example:\n\n\n$GIT_CONFIG_KEYS = 'core\\.logAllRefUpdates core\\..*compression';\n\n\n\nEach regex should match the \nwhole\n key (in other words, there\nis an implicit \n^\n at the start of each regex, and a \n$\n at the\nend).\n\n\nThe third choice (which you may have guessed already if you're familiar\nwith regular expressions) is to allow anything and everything:\n\n$GIT_CONFIG_KEYS = '.*';\n\n\n\n\n\n\nROLES\n, hash, default keys 'READERS' and 'WRITERS'\n\n\nThis specifies the role names allowed to be used by users running the\n\nperms\n command.  The \nwild\n repos doc has more info on roles.\n\n\n\n\n\n\nOWNER_ROLENAME\n, string, default undef\n\n\n(requires v3.5 or later)\n\n\nBy default, permissions on a wild repo can only be set by the \ncreator\n of\nthe repo (using the \nperms\n command).  But some sites want to allow\nother people to do this as well.\n\n\nTo enable this behaviour, the server admin must first set this variable to\nsome string, say 'OWNERS'.  (He must also add 'OWNERS' to the ROLES hash\ndescribed in the previous bullet).\n\n\nThe creator of the repo can then add other users to the OWNERS role using\nthe \nperms\n command.\n\n\nThe \nperms\n command, the new \"owns\" command, and possibly other commands\nin future, will then give these users the same privileges that they give\nto the creator of the repo.\n\n\n(Also see the full documentation on \nroles\n).\n\n\n\n\n\n\nLOCAL_CODE\n, string\n\n\nThis is described in more detail \nhere\n.  Please be aware\n\nthis must be a FULL path\n, not a relative path.\n\n\n\n\n\n\nsecurity note: gitolite admin and shell access\n\uf0c1\n\n\nPeople sometimes ask why this file is also not revision controlled.  Here's\nwhy.\n\n\nGitolite maintains a clear distinction between\n\n\n\n\npeople who can push to the gitolite-admin repo, and\n\n\npeople who can get a shell or run arbitrary commands on the server.\n\n\n\n\nThis may not matter to many (small) sites, but in large installations, the\nformer is often a much larger set of people that you really don't want to give\nshell access to.\n\n\nTherefore, gitolite tries very hard to make sure that people in the first set\nare not allowed to do anything that gets them into the second set.\n\n\n\n\nIf you \nmust\n revision control it, you can.  Just add it to your admin\nrepo, push the change, then replace \n~/.gitolite.rc\n with a symlink to\n\n~/.gitolite/.gitolite.rc\n.\n\n\n\n\nappendix A: upgrading the rc file\n\uf0c1\n\n\nFirst, note that upgrading the rc file is always \noptional\n.  However, it may\nhelp if you want to use any of the new features available in later gitolite\nreleases, in the sense that the lines you need to add may already be present\n(commented out) in the rc file, so you just need to uncomment them instead of\ntyping them in yourself.\n\n\nIf you have a v3.0-v3.3 rc file it is documented \nhere\n, and it will\nstill work.  In fact internally the v3.4 rc file data gets converted to the\nv3.3 format.  There's a simple program to help you upgrade a v3.3 (or prior)\nrc file (in \nv3.6.1+\n, see contrib/utils/rc-format-v3.4), but it has\nprobably not seen too much testing; please tread carefully and report any\nproblems you find.\n\n\nUpgrading from any v3.4+ rc file to any later gitolite is fairly easy, though\nstill manual.  One useful aid is that, as of v3.6.4, you can run \ngitolite query-rc -d\n\nto dump the entire rc structure to STDOUT.  \nThis only requires\nthat gitolite be v3.6.4+; your rc file can still be the old one.\n  You can\nuse this to confirm you did not miss something during the manual rc upgrade.\n\n\n\n\n\n\ndump the current rc by running \ngitolite query-rc -d \n old.dump\n (assuming\n    you upgraded to v3.6.4 or higher)\n\n\n\n\n\n\nsave your old rc file: \nmv ~/.gitolite.rc ~/old.gitolite.rc\n\n\n\n\n\n\nget a \"default\" rc for your current gitolite by running\n\n\ngitolite print-default-rc \n ~/.gitolite.rc\n\n\n\n\n\n\n\nuse your favourite diff-ing editor on the old and the new files and figure\n    out what to carry over from the old rc file to the new one.\n\n\nvimdiff ~/old.gitolite.rc ~/.gitolite.rc\n# or maybe kdiff3 or whatever\n\n\n\nThis is the tricky part of course!  Watch out for configs that got \nmoved\n\naround, or in some cases removed completely, not just new config items.\n\n\n\n\n\n\ndump the new rc by running \ngitolite query-rc -d \n new.dump\n\n\n\n\n\n\ncompare the 2 rc dumps to make sure you've got everything covered.", 
            "title": "the \"rc\" file"
        }, 
        {
            "location": "/rc/#the-rc-file-homegitoliterc", 
            "text": "IMPORTANT : if you have a v3.0-v3.3 rc file it is documented  here ,\nand it will still work.  Please see appendix A below for details.   The rc file is designed to be the only thing unique to your site for most\nsetups.  The rc file is well commented.  Please look at the  ~/.gitolite.rc  file that\ngets installed when you setup gitolite.   You can always get a default copy\nfor your current version by running  gitolite print-default-rc .   (Please\nsee appendix A for upgrade instructions.)", 
            "title": "the \"rc\" file ($HOME/.gitolite.rc)"
        }, 
        {
            "location": "/rc/#structure-of-the-rc-file", 
            "text": "The rc file is perl code, but you do NOT need to know perl to edit it.  Just\nmind the commas, use single quotes unless you know what you're doing, and make\nsure the brackets and braces stay matched up!  As you can see there are 3 types of variables in it:   A lot of simple variables (like  UMASK ,  GIT_CONFIG_KEYS , etc.).  A hash or two (like  ROLES ).  And one large list of features to be enabled ( ENABLE ).   This page documents only some of them; for most of them it's best to look in\nthe actual rc file or in each of their individual documentation files around;\nstart with  \"non-core\" gitolite .  If a setting is used by a command\nthen running that command with '-h' may give you additional information.", 
            "title": "structure of the rc file"
        }, 
        {
            "location": "/rc/#specific-variables", 
            "text": "$UMASK , octal, default  0077  The default UMASK that gitolite uses gives  rwx------  permissions to all\nthe repos and their contents.  People who want to run gitweb (or cgit,\nredmine, etc) realise that this will not do.  The correct way to deal with this is to give this variable a value like 0027  (note the syntax: the leading 0 is required), and then make the\nuser running the webserver (apache, www-data, whatever) a member of the\n'git' group.  If you've already installed gitolite then existing files will have to be\nfixed up manually (for a umask or 0027, that would be  chmod -R g+rX ).\nThis is because umask only affects permissions on newly created files, not\nexisting ones.    $GIT_CONFIG_KEYS , string, default empty  See the  security note  at the end of this\npage for why we do this.  This setting allows the repo admin to define acceptable gitconfig keys.  Gitolite allows you to set git config values using the \"config\" keyword;\nsee  here  for details and syntax.  You have 3 choices.  By default  $GIT_CONFIG_KEYS  is left empty, which\ncompletely disables this feature (meaning you cannot set git configs via\nthe repo config).  The second choice is to give it a space separated list of settings you\nconsider safe.  (These are actually treated as a set of  regular\nexpressions , and any one of them must match).  For example:  $GIT_CONFIG_KEYS = 'core\\.logAllRefUpdates core\\..*compression';  Each regex should match the  whole  key (in other words, there\nis an implicit  ^  at the start of each regex, and a  $  at the\nend).  The third choice (which you may have guessed already if you're familiar\nwith regular expressions) is to allow anything and everything: $GIT_CONFIG_KEYS = '.*';    ROLES , hash, default keys 'READERS' and 'WRITERS'  This specifies the role names allowed to be used by users running the perms  command.  The  wild  repos doc has more info on roles.    OWNER_ROLENAME , string, default undef  (requires v3.5 or later)  By default, permissions on a wild repo can only be set by the  creator  of\nthe repo (using the  perms  command).  But some sites want to allow\nother people to do this as well.  To enable this behaviour, the server admin must first set this variable to\nsome string, say 'OWNERS'.  (He must also add 'OWNERS' to the ROLES hash\ndescribed in the previous bullet).  The creator of the repo can then add other users to the OWNERS role using\nthe  perms  command.  The  perms  command, the new \"owns\" command, and possibly other commands\nin future, will then give these users the same privileges that they give\nto the creator of the repo.  (Also see the full documentation on  roles ).    LOCAL_CODE , string  This is described in more detail  here .  Please be aware this must be a FULL path , not a relative path.", 
            "title": "specific variables"
        }, 
        {
            "location": "/rc/#security-note-gitolite-admin-and-shell-access", 
            "text": "People sometimes ask why this file is also not revision controlled.  Here's\nwhy.  Gitolite maintains a clear distinction between   people who can push to the gitolite-admin repo, and  people who can get a shell or run arbitrary commands on the server.   This may not matter to many (small) sites, but in large installations, the\nformer is often a much larger set of people that you really don't want to give\nshell access to.  Therefore, gitolite tries very hard to make sure that people in the first set\nare not allowed to do anything that gets them into the second set.   If you  must  revision control it, you can.  Just add it to your admin\nrepo, push the change, then replace  ~/.gitolite.rc  with a symlink to ~/.gitolite/.gitolite.rc .", 
            "title": "security note: gitolite admin and shell access"
        }, 
        {
            "location": "/rc/#appendix-a-upgrading-the-rc-file", 
            "text": "First, note that upgrading the rc file is always  optional .  However, it may\nhelp if you want to use any of the new features available in later gitolite\nreleases, in the sense that the lines you need to add may already be present\n(commented out) in the rc file, so you just need to uncomment them instead of\ntyping them in yourself.  If you have a v3.0-v3.3 rc file it is documented  here , and it will\nstill work.  In fact internally the v3.4 rc file data gets converted to the\nv3.3 format.  There's a simple program to help you upgrade a v3.3 (or prior)\nrc file (in  v3.6.1+ , see contrib/utils/rc-format-v3.4), but it has\nprobably not seen too much testing; please tread carefully and report any\nproblems you find.  Upgrading from any v3.4+ rc file to any later gitolite is fairly easy, though\nstill manual.  One useful aid is that, as of v3.6.4, you can run  gitolite query-rc -d \nto dump the entire rc structure to STDOUT.   This only requires\nthat gitolite be v3.6.4+; your rc file can still be the old one.   You can\nuse this to confirm you did not miss something during the manual rc upgrade.    dump the current rc by running  gitolite query-rc -d   old.dump  (assuming\n    you upgraded to v3.6.4 or higher)    save your old rc file:  mv ~/.gitolite.rc ~/old.gitolite.rc    get a \"default\" rc for your current gitolite by running  gitolite print-default-rc   ~/.gitolite.rc    use your favourite diff-ing editor on the old and the new files and figure\n    out what to carry over from the old rc file to the new one.  vimdiff ~/old.gitolite.rc ~/.gitolite.rc\n# or maybe kdiff3 or whatever  This is the tricky part of course!  Watch out for configs that got  moved \naround, or in some cases removed completely, not just new config items.    dump the new rc by running  gitolite query-rc -d   new.dump    compare the 2 rc dumps to make sure you've got everything covered.", 
            "title": "appendix A: upgrading the rc file"
        }, 
        {
            "location": "/user/", 
            "text": "the users' view\n\uf0c1\n\n\n\n\nThis page talks about what gitolite looks like to non-admins, and the commands\nand features available to them.\n\n\naccessing gitolite\n\uf0c1\n\n\nThe most common setup is based on ssh, where your admin asks you to send him\nyour public key, and uses that to setup your access.\n\n\nYour actual access is either a git command (like \ngit clone git@server:reponame\n,\nor an ssh command (like \nssh git@server info\n).\n\n\nNote that you do \nnot\n get a shell on the server -- the whole point of\ngitolite is to prevent that!\n\n\nNote to people who think gitolite requires or can only handle a specific\nsyntax for the URL\n: Gitolite is designed in such a way that, unless there is\nan access violation, the \nclient\n need not even \nknow\n that something called\ngitolite is sitting between it and git on the server.  In particular, this\nmeans \nany\n URL syntax listed in 'man git-clone' for ssh and/or http will\nwork.  The only things to note are:\n\n\n\n\nIn ssh mode, you \nmust\n use key-based authentication (i.e., passwords\n    won't work; see the two pages linked from the \nssh\n page for why).\n\n\nThe path of the repo is what you put into the conf file (e.g., \"testing\",\n    and not \"repositories/testing\" or \"/home/git/repositories/testing\" or\n    such).  A good rule of thumb is to use the exact name the \ninfo\n command\n    (see below) shows you.\n\n\nThe \".git\" at the end is optional for \ngit\n commands (i.e., you can use\n    \"testing.git\" instead of \"testing\" for clone, fetch, push, etc., if you\n    like) but \ngitolite\n commands in general (see below) will not like the\n    additional \".git\" at the end.\n\n\n\n\nthe info command\n\uf0c1\n\n\nThe only command that is \nalways\n available to every user is the \ninfo\n\ncommand (run \nssh git@host info -h\n for help), which tells you what version of\ngitolite and git are on the server, and what repositories you have access to.\nThe list of repos is very useful if you have doubts about the spelling of some\nnew repo that you know was setup.\n\n\nnormal and wild repos\n\uf0c1\n\n\nGitolite has two kinds of repos.  Normal repos are specified by their full\nnames in the config file.  \"Wildcard\" repos are specified by a regex in the\nconfig file.  Try the \ninfo\n command\n and see if it shows any lines\nthat look like regex patterns, (with a \"C\" permission).\n\n\nIf you see any, it means you are allowed to create brand new repos whose names\nfit that regex.  Normally, you create such repos simply by cloning them or\npushing to them -- gitolite automatically creates the repo on the server side.\n(If your site is different, your admin will tell you).\n\n\nWhen you create such a repo, your \"ownership\" of it (as far as gitolite is\nconcerned) is automatically recorded by gitolite.\n\n\nother commands\n\uf0c1\n\n\nset/get additional permissions for repos you created\n\uf0c1\n\n\nThe gitolite config may have several permissions lines for your repo, like so:\n\n\n\n\nrepo \npub/\nCREATOR\n/..*\n\n\n    C\n       \n=   ...some list of users allowed to create repos...\n\n    RW+\n     \n=   \nCREATOR\n\n\n    RW\n      \n=   user1 user2\n\n    R\n       \n=   user3\n\n\n\n\nIf that's all it had, you really can't do much.  Any changes to access must be\ndone by the administrator.  (Note that \"CREATOR\" is a reserved word that gets\nexpanded to your userid in some way, so the admin can literally add just the\nfirst three lines, and \nevery\n user listed in the second line (or \nevery\nauthenticated user\n, if you specified \n@all\n there) has his own personal repo\nnamespace, starting with \npub/\nusername\n/\n).\n\n\nTo give some flexibility to users, the admin could add rules like this:\n\n\n\n\n    RW\n      \n=   \nWRITERS\n\n\n    R\n       \n=   \nREADERS\n\n\n\n\n\n(he could also add other \nroles\n but then he\nneeds to read the documentation).\n\n\nOnce he does this, you can then use the \nperms\n command (run \nssh git@host perms -h\n\nfor help) to set permissions for other users by specifying which\nusers are in the list of \"READERS\", and which in \"WRITERS\".\n\n\nIf you think of READERS and WRITERS as \"roles\", it will help.  You can't\nchange what access a role has, but you \ncan\n say which users have that role.\n\n\n\n\nNote:\n\n\nThere isn't a way for you to see the actual rule list unless you're given\nread access to the special 'gitolite-admin' repo.  Sorry.  The idea is\nthat your admin will tell you what \"roles\" he added into rules for your\nrepos, and what permissions those roles have.\n\n\n\n\nadding a description to repos you created\n\uf0c1\n\n\nThe \ndesc\n command is extremely simple.  Run \nssh git@host desc -h\n for help.\n\n\n\"site-local\" commands\n\uf0c1\n\n\nThe main purpose of gitolite is to prevent you from getting a shell.  But\nthere are commands that you often need to run on the server (i.e., cannot be\ndone by pushing something to a repo).\n\n\nTo enable this, gitolite allows the admin to setup scripts in a special\ndirectory that users can then run.  Gitolite comes with a set of working\nscripts that your admin may install, or may use as a starting point for his\nown, if he chooses.\n\n\nThink of these commands as equivalent to those in \nCOMMAND_DIR\n in \nman git-shell\n.\n\n\nYou can get a list of available commands by running \nssh git@host help\n.\n\n\n\"personal\" branches\n\uf0c1\n\n\n\"personal\" branches are great for environments where developers need to share\nwork but can't directly pull from each other (usually due to either a\nnetworking or authentication related reason, both common in corporate setups).\n\n\nPersonal branches exist \nin a namespace\n of their own.  The syntax is\n\n\n\n\n    RW+\n personal/\nUSER\n/  \n=   \n@userlist\n\n\n\n\n\nwhere the \"personal\" can be anything you like (but cannot be empty), and the\n\"/USER/\" part is \nnecessary (including both slashes)\n.\n\n\nA user \"alice\" (if she's in the userlist) can then push any branches inside\n\npersonal/alice/\n (i.e., she can push \npersonal/alice/foo\n and\n\npersonal/alice/bar\n, but NOT \npersonal/alice\n).\n\n\n(Background: at runtime the \"USER\" component will be replaced by the name of\nthe invoking user.  Access is determined by the right hand side, as usual).\n\n\nCompared to using arbitrary branch names on the same server, this:\n\n\n\n\nReduces namespace pollution by corralling all these ad hoc branches into\n    the \"personal/\" namespace.\n\n\nReduces branch name collision by giving each developer her own\n    sub-hierarchy within that.\n\n\nRemoves the need to think about access control, because a user can push\n    only to his own sub-hierarchy.", 
            "title": "your users' view"
        }, 
        {
            "location": "/user/#the-users-view", 
            "text": "This page talks about what gitolite looks like to non-admins, and the commands\nand features available to them.", 
            "title": "the users' view"
        }, 
        {
            "location": "/user/#accessing-gitolite", 
            "text": "The most common setup is based on ssh, where your admin asks you to send him\nyour public key, and uses that to setup your access.  Your actual access is either a git command (like  git clone git@server:reponame ,\nor an ssh command (like  ssh git@server info ).  Note that you do  not  get a shell on the server -- the whole point of\ngitolite is to prevent that!  Note to people who think gitolite requires or can only handle a specific\nsyntax for the URL : Gitolite is designed in such a way that, unless there is\nan access violation, the  client  need not even  know  that something called\ngitolite is sitting between it and git on the server.  In particular, this\nmeans  any  URL syntax listed in 'man git-clone' for ssh and/or http will\nwork.  The only things to note are:   In ssh mode, you  must  use key-based authentication (i.e., passwords\n    won't work; see the two pages linked from the  ssh  page for why).  The path of the repo is what you put into the conf file (e.g., \"testing\",\n    and not \"repositories/testing\" or \"/home/git/repositories/testing\" or\n    such).  A good rule of thumb is to use the exact name the  info  command\n    (see below) shows you.  The \".git\" at the end is optional for  git  commands (i.e., you can use\n    \"testing.git\" instead of \"testing\" for clone, fetch, push, etc., if you\n    like) but  gitolite  commands in general (see below) will not like the\n    additional \".git\" at the end.", 
            "title": "accessing gitolite"
        }, 
        {
            "location": "/user/#the-info-command", 
            "text": "The only command that is  always  available to every user is the  info \ncommand (run  ssh git@host info -h  for help), which tells you what version of\ngitolite and git are on the server, and what repositories you have access to.\nThe list of repos is very useful if you have doubts about the spelling of some\nnew repo that you know was setup.", 
            "title": "the info command"
        }, 
        {
            "location": "/user/#normal-and-wild-repos", 
            "text": "Gitolite has two kinds of repos.  Normal repos are specified by their full\nnames in the config file.  \"Wildcard\" repos are specified by a regex in the\nconfig file.  Try the  info  command  and see if it shows any lines\nthat look like regex patterns, (with a \"C\" permission).  If you see any, it means you are allowed to create brand new repos whose names\nfit that regex.  Normally, you create such repos simply by cloning them or\npushing to them -- gitolite automatically creates the repo on the server side.\n(If your site is different, your admin will tell you).  When you create such a repo, your \"ownership\" of it (as far as gitolite is\nconcerned) is automatically recorded by gitolite.", 
            "title": "normal and wild repos"
        }, 
        {
            "location": "/user/#other-commands", 
            "text": "", 
            "title": "other commands"
        }, 
        {
            "location": "/user/#setget-additional-permissions-for-repos-you-created", 
            "text": "The gitolite config may have several permissions lines for your repo, like so:   repo  pub/ CREATOR /..*      C         =   ...some list of users allowed to create repos...     RW+       =    CREATOR      RW        =   user1 user2     R         =   user3  If that's all it had, you really can't do much.  Any changes to access must be\ndone by the administrator.  (Note that \"CREATOR\" is a reserved word that gets\nexpanded to your userid in some way, so the admin can literally add just the\nfirst three lines, and  every  user listed in the second line (or  every\nauthenticated user , if you specified  @all  there) has his own personal repo\nnamespace, starting with  pub/ username / ).  To give some flexibility to users, the admin could add rules like this:       RW        =    WRITERS      R         =    READERS   (he could also add other  roles  but then he\nneeds to read the documentation).  Once he does this, you can then use the  perms  command (run  ssh git@host perms -h \nfor help) to set permissions for other users by specifying which\nusers are in the list of \"READERS\", and which in \"WRITERS\".  If you think of READERS and WRITERS as \"roles\", it will help.  You can't\nchange what access a role has, but you  can  say which users have that role.   Note:  There isn't a way for you to see the actual rule list unless you're given\nread access to the special 'gitolite-admin' repo.  Sorry.  The idea is\nthat your admin will tell you what \"roles\" he added into rules for your\nrepos, and what permissions those roles have.", 
            "title": "set/get additional permissions for repos you created"
        }, 
        {
            "location": "/user/#adding-a-description-to-repos-you-created", 
            "text": "The  desc  command is extremely simple.  Run  ssh git@host desc -h  for help.", 
            "title": "adding a description to repos you created"
        }, 
        {
            "location": "/user/#site-local-commands", 
            "text": "The main purpose of gitolite is to prevent you from getting a shell.  But\nthere are commands that you often need to run on the server (i.e., cannot be\ndone by pushing something to a repo).  To enable this, gitolite allows the admin to setup scripts in a special\ndirectory that users can then run.  Gitolite comes with a set of working\nscripts that your admin may install, or may use as a starting point for his\nown, if he chooses.  Think of these commands as equivalent to those in  COMMAND_DIR  in  man git-shell .  You can get a list of available commands by running  ssh git@host help .", 
            "title": "\"site-local\" commands"
        }, 
        {
            "location": "/user/#personal-branches", 
            "text": "\"personal\" branches are great for environments where developers need to share\nwork but can't directly pull from each other (usually due to either a\nnetworking or authentication related reason, both common in corporate setups).  Personal branches exist  in a namespace  of their own.  The syntax is       RW+  personal/ USER /   =    @userlist   where the \"personal\" can be anything you like (but cannot be empty), and the\n\"/USER/\" part is  necessary (including both slashes) .  A user \"alice\" (if she's in the userlist) can then push any branches inside personal/alice/  (i.e., she can push  personal/alice/foo  and personal/alice/bar , but NOT  personal/alice ).  (Background: at runtime the \"USER\" component will be replaced by the name of\nthe invoking user.  Access is determined by the right hand side, as usual).  Compared to using arbitrary branch names on the same server, this:   Reduces namespace pollution by corralling all these ad hoc branches into\n    the \"personal/\" namespace.  Reduces branch name collision by giving each developer her own\n    sub-hierarchy within that.  Removes the need to think about access control, because a user can push\n    only to his own sub-hierarchy.", 
            "title": "\"personal\" branches"
        }, 
        {
            "location": "/git-config/", 
            "text": "specifying \"git-config\" keys and values\n\uf0c1\n\n\n\n\n(Original version thanks to teemu dot matilainen at iki dot fi.)\n\n\n\n\nImportant\n: This won't work unless the rc file has the right settings;\nplease see \n$GIT_CONFIG_KEYS\n in the \nrc file doc\n.\n\n\n\n\nbasic syntax\n\uf0c1\n\n\nThe syntax is simple:\n\n\nconfig sectionname.keyname = value\n\n\n\nFor example:\n\n\n\n\nrepo \ngitolite\n\n    config \nhooks.mailinglist \n= gitolite-commits@example.tld\n\n    config \nhooks.emailprefix \n= \n[gitolite] \n\n\n    config \nfoo.bar \n= \n\n\n\n\n\nThis does either a plain \"git config section.key value\" (for the first 2\nexamples above) or \"git config --unset-all section.key\" (for the last\nexample).  Other forms of the \ngit config\n command (\n--add\n, the\n\nvalue_regex\n, etc) are not supported.\n\n\nan important warning about \ndeleting\n a config line\n\uf0c1\n\n\n\n\nSimply deleting the config line from the \nconf/gitolite.conf\n file will\n\nnot\n delete the variable from \nrepo.git/config\n.  You have to use the\nsyntax in the last example to make gitolite execute a \n--unset-all\n\noperation on the given key.\n\n\n\n\nsubstituting the repo name and the creator name\n\uf0c1\n\n\nYou can also use the special values \n%GL_REPO\n and \n%GL_CREATOR\n in the\nstring.  The former is available to all repos, while the latter is only\navailable to \nwild\n repos.\n\n\n\n\nrepo \nfoo bar baz\n\n    config \nhooks.mailinglist \n= %GL_REPO-commits@example.tld\n\n    config \nhooks.emailprefix \n= \n[%GL_REPO] \n\n\n\n\n\n(v3.6.7+)\n expanding a group name\n\uf0c1\n\n\nIf you add\n\n\nEXPAND_GROUPS_IN_CONFIG     =\n  1,\n\n\n\nto the rc file (suggested location: just after the \nGIT_CONFIG_KEYS\n line),\nthen the \nvalue\n of a config line will have groupnames expanded.  For example:\n\n\n\n\n@admins\n = sitaramc@gmail.com jdoe@example.com\n...\n\nrepo \nfoo\n    ...\n\n    config \nhooks.mailinglist \n= @admins\n\n\n\n\nwill behave as if the two email addresses were explicitly listed in the config\nline.  However, if there is no such group, the text will be left as-is.  Also,\nfor safety, only word characters (alphanumerics and underscore) are expected\nas part of the group name.\n\n\noverriding config values\n\uf0c1\n\n\nYou can repeat the 'config' line as many times as you like, and the \nlast\n\noccurrence will be the one in effect.  This allows you to override settings\njust for one project, as in this example:\n\n\n\n\nrepo \n@all\n\n\n    config \nhooks.mailinglist \n= %GL_REPO-commits@example.tld\n\n    config \nhooks.emailprefix \n= \n[%GL_REPO] \n\n\n\n# ... later ...\n\n\n\nrepo \ncustomer-project\n   \n # different mailing list\n\n\n    config \nhooks.mailinglist \n= announce@customer.tld\n\n\n\n\nThe \"delete config variable\" syntax can also be used, if you wish:\n\n\n\n\nrepo \nsecret    \n # no emails for this one please\n\n\n    config \nhooks.mailinglist \n= \n\n\n    config \nhooks.emailprefix \n= \n\n\n\n\n\nAs you can see, the general idea is to place the most generic ones (\nrepo @all\n,\nor repo regex like \nrepo foo.*\n) first, and place more specific ones\nlater to override the generic settings.\n\n\ncompensating for UNSAFE_PATT\n\uf0c1\n\n\nAn important feature in gitolite is that you can share the admin load with\nmore people, \nwithout\n having to give all of them shell access on the\nserver.  Thus there are some restrictions designed to prevent someone who can\npush the gitolite-admin repo, from somehow managing to run arbitrary commands\non the server.\n\n\nThis section is about one of these restrictions.\n\n\nGitolite, by default, does not allow the following characters in the value of\na config variable: \n` ~ # $ \n ( ) | ; \n \n.  This is due to unspecified\nparanoia; see \nthis discussion\n for some context.  This restriction is\nenforced by a regex called \nUNSAFE_PATT\n, whose default value is\n\n[`~#\\$\\\n()|;\n]\n.\n\n\nBut let's say you need to do this, which fails due to the semicolon.\n\n\n\n\n    config \nhooks.showrev \n= \ngit show -C %s; echo\n\n\n\n\n\nThere are two ways to fix this.\n\n\nIf all your admins already have shell access\n, you can override this by\nplacing a modified version in the rc file.  For our example, you'd just put\nthe following line at the \nvery end\n of your rc file, just before the \n1;\n\nline (notice there is no semicolon in the regex here):\n\n\n$UNSAFE_PATT          = qr([`~#\\$\\\n()|\n]);\n\n\n\nSimilarly, you can remove other characters from that regex (to allow those\ncharacters in your config values).\n\n\nIf all your admins do not have shell access\n, you need a more fine-grained\nmethod:\n\n\n\n\n\n\nIn the rc file, add the following within the '%RC' hash (for example, just\n    after the UMASK line would do fine):\n\n\nSAFE_CONFIG =\n {\n    SHOWREV         =\n  \"git show -C %s; echo\"\n},\n\n\n\n\n\n\n\nIn your gitolite.conf file, add this instead of the line we saw earlier:\n\n\n\n\n\n\n\n\n    config \nhooks.showrev \n= %SHOWREV\n\n\n\n\nThis mechanism allows you to add any number of \nspecific\n violations to the\n\nUNSAFE_PATT\n rule instead of denaturing the regex itself and potentially\nallowing something that could be (ab)used by a repo admin to obtain shell\naccess at some later point in time.\n\n\nA similar problem arises with email addresses, which contain the \n and \n\ncharacters.  Here's how to deal with that easily:\n\n\n\n\n\n\nIn the rc file:\n\n\nSAFE_CONFIG =\n {\n    LT              =\n  '\n',\n    GT              =\n  '\n',\n},\n\n\n\n\n\n\n\nIn the gitolite.conf file:\n\n\n\n\n\n\n\n\n    config \nhooks.mailinglist \n= \nSitaram Chamarty %LTsitaramc@gmail.com%GT\n\n\n\n\n\nAdmittedly, that looks a wee bit ugly, but it gets the job done without having\nto remove angle brackets from UNSAFE_PATT.", 
            "title": "setting git-config values"
        }, 
        {
            "location": "/git-config/#specifying-git-config-keys-and-values", 
            "text": "(Original version thanks to teemu dot matilainen at iki dot fi.)   Important : This won't work unless the rc file has the right settings;\nplease see  $GIT_CONFIG_KEYS  in the  rc file doc .", 
            "title": "specifying \"git-config\" keys and values"
        }, 
        {
            "location": "/git-config/#basic-syntax", 
            "text": "The syntax is simple:  config sectionname.keyname = value  For example:   repo  gitolite     config  hooks.mailinglist  = gitolite-commits@example.tld     config  hooks.emailprefix  =  [gitolite]       config  foo.bar  =    This does either a plain \"git config section.key value\" (for the first 2\nexamples above) or \"git config --unset-all section.key\" (for the last\nexample).  Other forms of the  git config  command ( --add , the value_regex , etc) are not supported.", 
            "title": "basic syntax"
        }, 
        {
            "location": "/git-config/#an-important-warning-about-deleting-a-config-line", 
            "text": "Simply deleting the config line from the  conf/gitolite.conf  file will not  delete the variable from  repo.git/config .  You have to use the\nsyntax in the last example to make gitolite execute a  --unset-all \noperation on the given key.", 
            "title": "an important warning about deleting a config line"
        }, 
        {
            "location": "/git-config/#substituting-the-repo-name-and-the-creator-name", 
            "text": "You can also use the special values  %GL_REPO  and  %GL_CREATOR  in the\nstring.  The former is available to all repos, while the latter is only\navailable to  wild  repos.   repo  foo bar baz     config  hooks.mailinglist  = %GL_REPO-commits@example.tld     config  hooks.emailprefix  =  [%GL_REPO]", 
            "title": "substituting the repo name and the creator name"
        }, 
        {
            "location": "/git-config/#v367-expanding-a-group-name", 
            "text": "If you add  EXPAND_GROUPS_IN_CONFIG     =   1,  to the rc file (suggested location: just after the  GIT_CONFIG_KEYS  line),\nthen the  value  of a config line will have groupnames expanded.  For example:   @admins  = sitaramc@gmail.com jdoe@example.com\n... repo  foo\n    ...     config  hooks.mailinglist  = @admins  will behave as if the two email addresses were explicitly listed in the config\nline.  However, if there is no such group, the text will be left as-is.  Also,\nfor safety, only word characters (alphanumerics and underscore) are expected\nas part of the group name.", 
            "title": "(v3.6.7+) expanding a group name"
        }, 
        {
            "location": "/git-config/#overriding-config-values", 
            "text": "You can repeat the 'config' line as many times as you like, and the  last \noccurrence will be the one in effect.  This allows you to override settings\njust for one project, as in this example:   repo  @all      config  hooks.mailinglist  = %GL_REPO-commits@example.tld     config  hooks.emailprefix  =  [%GL_REPO]   # ... later ...  repo  customer-project\n     # different mailing list      config  hooks.mailinglist  = announce@customer.tld  The \"delete config variable\" syntax can also be used, if you wish:   repo  secret      # no emails for this one please      config  hooks.mailinglist  =       config  hooks.emailprefix  =    As you can see, the general idea is to place the most generic ones ( repo @all ,\nor repo regex like  repo foo.* ) first, and place more specific ones\nlater to override the generic settings.", 
            "title": "overriding config values"
        }, 
        {
            "location": "/git-config/#compensating-for-unsafe95patt", 
            "text": "An important feature in gitolite is that you can share the admin load with\nmore people,  without  having to give all of them shell access on the\nserver.  Thus there are some restrictions designed to prevent someone who can\npush the gitolite-admin repo, from somehow managing to run arbitrary commands\non the server.  This section is about one of these restrictions.  Gitolite, by default, does not allow the following characters in the value of\na config variable:  ` ~ # $   ( ) | ;    .  This is due to unspecified\nparanoia; see  this discussion  for some context.  This restriction is\nenforced by a regex called  UNSAFE_PATT , whose default value is [`~#\\$\\ ()|; ] .  But let's say you need to do this, which fails due to the semicolon.       config  hooks.showrev  =  git show -C %s; echo   There are two ways to fix this.  If all your admins already have shell access , you can override this by\nplacing a modified version in the rc file.  For our example, you'd just put\nthe following line at the  very end  of your rc file, just before the  1; \nline (notice there is no semicolon in the regex here):  $UNSAFE_PATT          = qr([`~#\\$\\ ()| ]);  Similarly, you can remove other characters from that regex (to allow those\ncharacters in your config values).  If all your admins do not have shell access , you need a more fine-grained\nmethod:    In the rc file, add the following within the '%RC' hash (for example, just\n    after the UMASK line would do fine):  SAFE_CONFIG =  {\n    SHOWREV         =   \"git show -C %s; echo\"\n},    In your gitolite.conf file, add this instead of the line we saw earlier:         config  hooks.showrev  = %SHOWREV  This mechanism allows you to add any number of  specific  violations to the UNSAFE_PATT  rule instead of denaturing the regex itself and potentially\nallowing something that could be (ab)used by a repo admin to obtain shell\naccess at some later point in time.  A similar problem arises with email addresses, which contain the   and  \ncharacters.  Here's how to deal with that easily:    In the rc file:  SAFE_CONFIG =  {\n    LT              =   ' ',\n    GT              =   ' ',\n},    In the gitolite.conf file:         config  hooks.mailinglist  =  Sitaram Chamarty %LTsitaramc@gmail.com%GT   Admittedly, that looks a wee bit ugly, but it gets the job done without having\nto remove angle brackets from UNSAFE_PATT.", 
            "title": "compensating for UNSAFE_PATT"
        }, 
        {
            "location": "/options/", 
            "text": "gitolite options\n\uf0c1\n\n\n\n\nSome gitolite features are enabled, or gitolite's behaviour changed, by\nsetting \"options\".\n\n\nA line like \noption foo = 1\n is really just syntactic sugar for\n\nconfig gitolite-options.foo = 1\n, so everything in the \ngit-config\n page\nalso applies here (especially the bit about \noverriding config\nvalues\n.\n\n\nHowever\n, these values are \nnot\n written into git's own \nconfig\n file, so\ngit (or other programs running \ngit config\n) will not see them.  You can only\nquery them using \ngitolite git-config\n, where they will appear in full in the\noutput.\n\n\nOptions are set by repo.  The syntax is very simple:\n\n\noption  foo.bar     =   baz\n\n\n\nOf course this is useless if some other part of gitolite, or some external\ncommand, is not querying for the option key 'foo.bar'!\n\n\nOptions are therefore documented in the section/page they belong in, not here.\nHere are some examples, although this list is not exhaustive:\n\n\n\n\n\n\nAsk gitolite to honor \ndeny rules\n  during the pre-git check\n    also.\n\n\n\n\n\n\nOptions related to \nmirroring\n -- tell gitolite who is the master server,\n    and who are the slaves, for each repo.\n\n\n\n\n\n\nThe optional post-compile trigger \nupdate-gitweb-daemon-from-options\n\n    allows you to use options instead of special usernames gitweb and daemon\n    to determine access for those tools.\n\n\n\n\n\n\nYou can set \nrepo-specific environment variables\n for triggers and\n    hooks to test, which is very useful.\n\n\n\n\n\n\nHere's how to disable an option from a single repo if it was enabled earlier\nin a group (which you might guess from reading the \ngit-config\n page):\n\n\n\n\n@g\n = r1 r2 r3\n\n\nrepo \n@g\n\n    option gitweb = 1\n\n\n# but repo r2 should not be accessible by gitweb\n\n\nrepo \nr2\n    option gitweb =", 
            "title": "gitolite options"
        }, 
        {
            "location": "/options/#gitolite-options", 
            "text": "Some gitolite features are enabled, or gitolite's behaviour changed, by\nsetting \"options\".  A line like  option foo = 1  is really just syntactic sugar for config gitolite-options.foo = 1 , so everything in the  git-config  page\nalso applies here (especially the bit about  overriding config\nvalues .  However , these values are  not  written into git's own  config  file, so\ngit (or other programs running  git config ) will not see them.  You can only\nquery them using  gitolite git-config , where they will appear in full in the\noutput.  Options are set by repo.  The syntax is very simple:  option  foo.bar     =   baz  Of course this is useless if some other part of gitolite, or some external\ncommand, is not querying for the option key 'foo.bar'!  Options are therefore documented in the section/page they belong in, not here.\nHere are some examples, although this list is not exhaustive:    Ask gitolite to honor  deny rules   during the pre-git check\n    also.    Options related to  mirroring  -- tell gitolite who is the master server,\n    and who are the slaves, for each repo.    The optional post-compile trigger  update-gitweb-daemon-from-options \n    allows you to use options instead of special usernames gitweb and daemon\n    to determine access for those tools.    You can set  repo-specific environment variables  for triggers and\n    hooks to test, which is very useful.    Here's how to disable an option from a single repo if it was enabled earlier\nin a group (which you might guess from reading the  git-config  page):   @g  = r1 r2 r3 repo  @g \n    option gitweb = 1 # but repo r2 should not be accessible by gitweb  repo  r2\n    option gitweb =", 
            "title": "gitolite options"
        }, 
        {
            "location": "/wild/", 
            "text": "\"wild\" repos (user created repos)\n\uf0c1\n\n\n\n\nThe wildrepos feature allows you to specify access control rules using regular\nexpression patterns, so you can have many actual repos being served by a\nsingle set of rules in the config file.  The \nregex\n can also include the\nword \nCREATOR\n in it, allowing you to parametrise the name of the user\ncreating the repo.\n\n\nquick intro/example\n\uf0c1\n\n\nIf you're curious about the feature but you aren't sure if you want to read\nthe whole page, here's a very simple example.\n\n\nThis is what the admin added to the conf file:\n\n\n\n\n@users\n = u1 u2 u3\n\n\nrepo \nfoo/\nCREATOR\n/[a-z]..*\n\n\n    C\n   \n=   u1 u2 u3\n\n    RW+\n \n=   \nCREATOR\n\n\n    RW\n  \n=   \nWRITERS\n\n\n    R\n   \n=   \nREADERS\n\n\n\n\n\nUser 'u1' then runs \ngit clone git@host:foo/u1/bar\n, creating the repo.\nNotice the repo name matches the regex, if you substitute the user's name\nfor the word CREATOR.\n\n\nThis is the effective rule list for 'foo/u1/bar' immediately after the user\ncreates it:\n\n\n\n\nrepo \nfoo/u1/bar\n\n    RW+\n \n=   u1\n\n    RW\n  \n=   \nWRITERS\n\n\n    R\n   \n=   \nREADERS\n\n\n\n\n\nMost of this is fixed, but the creator (user 'u1') \ncan\n use the \nperms\n\ncommand to add other users as 'READERS' or 'WRITERS'.  For example he could\nadd 'u2' as a writer and 'u3' and 'u5' as readers:\n\n\nThis is the effective rule list that applies to the repo if he does that:\n\n\n\n\nrepo \nfoo/u1/bar\n\n    RW+\n \n=   u1\n\n    RW\n  \n=   u2\n\n    R\n   \n=   u3 u5\n\n\n\n\nNote that both these \"effective rule lists\" were created without touching the\nactual conf file or any admin intervention.\n\n\nAnd that's it for our quick intro example.  The rest of this page will explain\nall this in much more detail.\n\n\ndeclaring wild repos in the conf file\n\uf0c1\n\n\nHere's a slightly more detailed example, starting with what the admin puts in\nthe conf file:\n\n\n\n\n@prof\n       =   u1\n\n@TAs\n        =   u2 u3\n\n@students\n   =   u4 u5 u6\n\n\nrepo \n   \nassignments/\nCREATOR\n/a[0-9][0-9]\n\n\n    C\n   \n=   \n@students\n\n\n    RW+\n \n=   \nCREATOR\n\n\n    RW\n  \n=   \nWRITERS\n \n@TAs\n\n\n    R\n   \n=   \nREADERS\n \n@prof\n\n\n\n\n\nNote the \"C\" permission.  This is a standalone \"C\", which gives the named\nusers the right to \ncreate a repo\n.  \nThis is not to be confused with\nthe \"RWC\" permission or its variants described \nelsewhere\n, which\nare about creating \nbranches\n, not \nrepos\n.\n\n\n(\nuser\n) creating a specific repo\n\uf0c1\n\n\nFor now, ignore the special usernames READERS and WRITERS, and just create a\nnew repo, as user \"u4\" (a student):\n\n\n$ git clone git@server:assignments/u4/a12\nInitialized empty Git repository in /home/git/repositories/assignments/u4/a12.git/\nwarning: You appear to have cloned an empty repository.\n\n\n\na slightly different example\n\uf0c1\n\n\nHere's how the same example would look if you did not want the CREATOR's name\nto be part of the actual repo name.\n\n\n\n\nrepo \n   \nassignments/a[0-9][0-9]\n\n\n    C\n   \n=   \n@students\n\n\n    RW+\n \n=   \nCREATOR\n\n\n    RW\n  \n=   \nWRITERS\n \n@TAs\n\n\n    R\n   \n=   \nREADERS\n \n@prof\n\n\n\n\n\nWe haven't changed anything except the repo name regex.  This means that the\nfirst student that creates, say, \nassignments/a12\n becomes the owner.\nMistakes (such as claiming a12 instead of a13) need to be rectified by an\nadmin logging on to the back end, though it's not too difficult.\n\n\nYou could also replace the C line like this:\n\n\n    C   =   @TAs\n\n\n\nand have a TA create the repos in advance.\n\n\nrepo regex patterns\n\uf0c1\n\n\nregex pattern versus normal repo\n\uf0c1\n\n\nDue to projects like \ngtk+\n, the \n+\n character is now considered a valid\ncharacter for an \nordinary\n repo.  Therefore, a regex like \nfoo/.+\n does not\nlook like a \nregex\n to gitolite.  Use \nfoo/..*\n if you want that.\n\n\nAlso, \n..*\n by itself is not considered a valid repo regex.  Try\n\n[a-zA-Z0-9].*\n.  \nCREATOR/..*\n will also work.\n\n\nline-anchored regexes\n\uf0c1\n\n\nA regex like\n\n\nrepo assignments/S[0-9]+/A[0-9]+\n\n\n\nwould match \nassignments/S02/A37\n.  It will not match \nassignments/S02/ABC\n,\nor \nassignments/S02/a37\n, obviously.\n\n\nBut you may be surprised to find that it does not match even\n\nassignments/S02/A37/B99\n.  This is because internally, gitolite\n\nline-anchors\n the given regex; so that regex actually becomes\n\n^assignments/S[0-9]+/A[0-9]+$\n -- notice the line beginning and ending\nmetacharacters.\n\n\n\n\nSide-note: contrast with refexes\n\n\nJust for interest, note that this is in contrast to the \nrefexes\n\nfor the normal \"branch\" permissions. Refexes are only anchored at the\nstart; a regex like \nrefs/heads/master\n actually can match\n\nrefs/heads/master01/bar\n as well, even if no one will actually push such\na branch!  You can anchor both sides if you really care, by using\n\nmaster$\n instead of \nmaster\n, but that is \nnot\n the default for refexes.\n\n\n\n\nroles\n\uf0c1\n\n\nThe words READERS and WRITERS are called \"role\" names.  The access rules in\nthe conf file decide what permissions these roles have, but they don't say\nwhat users are in each of these roles.\n\n\nThat needs to be done by the creator of the repo, using the \nperms\n command.\nYou can run \nssh git@host perms -h\n for detailed help, but in brief, that\ncommand lets you give and take away roles to users.  \nThis\n has some\nmore detail.\n\n\nadding other roles\n\uf0c1\n\n\nIf you want to have more than just the 2 default roles, say something like:\n\n\nYou can add the new names to the ROLES hash in the \nrc file\n; see comments\nin that file for how to do that.  Be sure to run the 2 commands mentioned\nthere after you have added the roles.\n\n\n\n\nrepo \nfoo/..*\n\n\n  C\n                 \n=   u1\n\n  RW\n    refs/tags/  \n=   TESTERS\n\n  -\n     refs/tags/  \n=\n   @all\n\n\n  RW+\n               \n=   \nWRITERS\n\n\n  RW\n                \n=   INTERNS\n\n  R\n                 \n=   \nREADERS\n\n\n  RW+D\n              \n=   MANAGERS\n\n\n\n\nIMPORTANT WARNING ABOUT THIS FEATURE\n\uf0c1\n\n\n\n\nPlease make sure that none of the role names conflict with any of the user\nnames or group names in the system.  For example, if you have a user\ncalled \"foo\" or a group called \"@foo\", make sure you do not include \"foo\"\nas a valid role in the ROLES hash.\n\n\n\n\nYou can keep things sane by using UPPERCASE names for roles, while keeping all\nyour user and group names lowercase; then you don't have to worry about this\nproblem.\n\n\nsetting default roles\n\uf0c1\n\n\nYou can setup some default role assignments as soon as a new wild repo is\ncreated.\n\n\nHere's how:\n\n\n\n\n\n\nEnable the 'set-default-roles' feature in the rc file by uncommenting it\n    if it is already present or adding it to the ENABLE list if it is not.\n\n\n\n\n\n\nSupply a set of default role assignments for a wild repo regex by adding\n    lines like this to the repo config para:\n\n\noption default.roles-1  =   READERS @all\noption default.roles-2  =   WRITERS @senior-devs\n\n\n\n\n\n\n\nThis will then behave as if the \nperms\n command was used immediately after\nthe repo was created to add those two role assignments.\n\n\nIf you want to simulate the old (pre v3.5) \nDEFAULT_ROLE_PERMS\n rc file\nvariable, just add them under a \nrepo @all\n line.  (Remember that this only\naffects newly created wild repos, despite the '@all' name).\n\n\nspecifying owners\n\uf0c1\n\n\nSee the section on \nOWNER_ROLENAME\n in the \nrc file page\n.\n\n\nlisting wild repos\n\uf0c1\n\n\nIn order to see what repositories were created from a wildcard, use the 'info'\ncommand.  Try \nssh git@host info -h\n to get help on the info command.\n\n\ndeleting a wild repo\n\uf0c1\n\n\nRun the whimsically named \"D\" command -- try \nssh git@host D -h\n for more info\non how to delete a wild repo.  (Yes the command is \"D\"; it's meant to be a\ncounterpart to the \"C\" permission that allowed you to create the repo in the\nfirst place).  Of course this only works if your admin has enabled the command\n(gitolite ships with the command disabled for remote use).\n\n\nappendix 1: owner and creator\n\uf0c1\n\n\nA wild repo is created by one specific user.  This user is usually called the\n\ncreator\n of the repo: his username is placed in a file called gl-creator in\nthe (bare) repo directory, any permissions given in the gitolite.conf file to\n\"CREATOR\" will be applicable to this user, he is the only person who can give\npermissions to other users (by running the 'perms' command), etc.\n\n\nBut, as I said in \nthis mail\n:\n\n\n\n    Until about a year ago, Gitolite only knew the concept of a \ncreator\n, and\n    there was only one.\n\n    But then people started seeing the need for more than one \nowner\n, because\n    wild repos may be *created* by one person, but they often needed to be\n    *administered* by one of several people.\n\n    So now, even though large parts of the documentation probably conflate\n    \ncreator\n and \nowner\n, you can see wild.html ([wild]) and rc.html ([rc])\n    to actually understand how this larger group become the \nowner\n.", 
            "title": "ad hoc user-created (\"wild\") repos"
        }, 
        {
            "location": "/wild/#wild-repos-user-created-repos", 
            "text": "The wildrepos feature allows you to specify access control rules using regular\nexpression patterns, so you can have many actual repos being served by a\nsingle set of rules in the config file.  The  regex  can also include the\nword  CREATOR  in it, allowing you to parametrise the name of the user\ncreating the repo.", 
            "title": "\"wild\" repos (user created repos)"
        }, 
        {
            "location": "/wild/#quick-introexample", 
            "text": "If you're curious about the feature but you aren't sure if you want to read\nthe whole page, here's a very simple example.  This is what the admin added to the conf file:   @users  = u1 u2 u3 repo  foo/ CREATOR /[a-z]..*      C     =   u1 u2 u3     RW+   =    CREATOR      RW    =    WRITERS      R     =    READERS   User 'u1' then runs  git clone git@host:foo/u1/bar , creating the repo.\nNotice the repo name matches the regex, if you substitute the user's name\nfor the word CREATOR.  This is the effective rule list for 'foo/u1/bar' immediately after the user\ncreates it:   repo  foo/u1/bar     RW+   =   u1     RW    =    WRITERS      R     =    READERS   Most of this is fixed, but the creator (user 'u1')  can  use the  perms \ncommand to add other users as 'READERS' or 'WRITERS'.  For example he could\nadd 'u2' as a writer and 'u3' and 'u5' as readers:  This is the effective rule list that applies to the repo if he does that:   repo  foo/u1/bar     RW+   =   u1     RW    =   u2     R     =   u3 u5  Note that both these \"effective rule lists\" were created without touching the\nactual conf file or any admin intervention.  And that's it for our quick intro example.  The rest of this page will explain\nall this in much more detail.", 
            "title": "quick intro/example"
        }, 
        {
            "location": "/wild/#declaring-wild-repos-in-the-conf-file", 
            "text": "Here's a slightly more detailed example, starting with what the admin puts in\nthe conf file:   @prof        =   u1 @TAs         =   u2 u3 @students    =   u4 u5 u6 repo      assignments/ CREATOR /a[0-9][0-9]      C     =    @students      RW+   =    CREATOR      RW    =    WRITERS   @TAs      R     =    READERS   @prof   Note the \"C\" permission.  This is a standalone \"C\", which gives the named\nusers the right to  create a repo .   This is not to be confused with\nthe \"RWC\" permission or its variants described  elsewhere , which\nare about creating  branches , not  repos .", 
            "title": "declaring wild repos in the conf file"
        }, 
        {
            "location": "/wild/#user-creating-a-specific-repo", 
            "text": "For now, ignore the special usernames READERS and WRITERS, and just create a\nnew repo, as user \"u4\" (a student):  $ git clone git@server:assignments/u4/a12\nInitialized empty Git repository in /home/git/repositories/assignments/u4/a12.git/\nwarning: You appear to have cloned an empty repository.", 
            "title": "(user) creating a specific repo"
        }, 
        {
            "location": "/wild/#a-slightly-different-example", 
            "text": "Here's how the same example would look if you did not want the CREATOR's name\nto be part of the actual repo name.   repo      assignments/a[0-9][0-9]      C     =    @students      RW+   =    CREATOR      RW    =    WRITERS   @TAs      R     =    READERS   @prof   We haven't changed anything except the repo name regex.  This means that the\nfirst student that creates, say,  assignments/a12  becomes the owner.\nMistakes (such as claiming a12 instead of a13) need to be rectified by an\nadmin logging on to the back end, though it's not too difficult.  You could also replace the C line like this:      C   =   @TAs  and have a TA create the repos in advance.", 
            "title": "a slightly different example"
        }, 
        {
            "location": "/wild/#repo-regex-patterns", 
            "text": "", 
            "title": "repo regex patterns"
        }, 
        {
            "location": "/wild/#regex-pattern-versus-normal-repo", 
            "text": "Due to projects like  gtk+ , the  +  character is now considered a valid\ncharacter for an  ordinary  repo.  Therefore, a regex like  foo/.+  does not\nlook like a  regex  to gitolite.  Use  foo/..*  if you want that.  Also,  ..*  by itself is not considered a valid repo regex.  Try [a-zA-Z0-9].* .   CREATOR/..*  will also work.", 
            "title": "regex pattern versus normal repo"
        }, 
        {
            "location": "/wild/#line-anchored-regexes", 
            "text": "A regex like  repo assignments/S[0-9]+/A[0-9]+  would match  assignments/S02/A37 .  It will not match  assignments/S02/ABC ,\nor  assignments/S02/a37 , obviously.  But you may be surprised to find that it does not match even assignments/S02/A37/B99 .  This is because internally, gitolite line-anchors  the given regex; so that regex actually becomes ^assignments/S[0-9]+/A[0-9]+$  -- notice the line beginning and ending\nmetacharacters.   Side-note: contrast with refexes  Just for interest, note that this is in contrast to the  refexes \nfor the normal \"branch\" permissions. Refexes are only anchored at the\nstart; a regex like  refs/heads/master  actually can match refs/heads/master01/bar  as well, even if no one will actually push such\na branch!  You can anchor both sides if you really care, by using master$  instead of  master , but that is  not  the default for refexes.", 
            "title": "line-anchored regexes"
        }, 
        {
            "location": "/wild/#roles", 
            "text": "The words READERS and WRITERS are called \"role\" names.  The access rules in\nthe conf file decide what permissions these roles have, but they don't say\nwhat users are in each of these roles.  That needs to be done by the creator of the repo, using the  perms  command.\nYou can run  ssh git@host perms -h  for detailed help, but in brief, that\ncommand lets you give and take away roles to users.   This  has some\nmore detail.", 
            "title": "roles"
        }, 
        {
            "location": "/wild/#adding-other-roles", 
            "text": "If you want to have more than just the 2 default roles, say something like:  You can add the new names to the ROLES hash in the  rc file ; see comments\nin that file for how to do that.  Be sure to run the 2 commands mentioned\nthere after you have added the roles.   repo  foo/..*    C                   =   u1   RW     refs/tags/   =   TESTERS   -      refs/tags/   =    @all    RW+                 =    WRITERS    RW                  =   INTERNS   R                   =    READERS    RW+D                =   MANAGERS", 
            "title": "adding other roles"
        }, 
        {
            "location": "/wild/#important-warning-about-this-feature", 
            "text": "Please make sure that none of the role names conflict with any of the user\nnames or group names in the system.  For example, if you have a user\ncalled \"foo\" or a group called \"@foo\", make sure you do not include \"foo\"\nas a valid role in the ROLES hash.   You can keep things sane by using UPPERCASE names for roles, while keeping all\nyour user and group names lowercase; then you don't have to worry about this\nproblem.", 
            "title": "IMPORTANT WARNING ABOUT THIS FEATURE"
        }, 
        {
            "location": "/wild/#setting-default-roles", 
            "text": "You can setup some default role assignments as soon as a new wild repo is\ncreated.  Here's how:    Enable the 'set-default-roles' feature in the rc file by uncommenting it\n    if it is already present or adding it to the ENABLE list if it is not.    Supply a set of default role assignments for a wild repo regex by adding\n    lines like this to the repo config para:  option default.roles-1  =   READERS @all\noption default.roles-2  =   WRITERS @senior-devs    This will then behave as if the  perms  command was used immediately after\nthe repo was created to add those two role assignments.  If you want to simulate the old (pre v3.5)  DEFAULT_ROLE_PERMS  rc file\nvariable, just add them under a  repo @all  line.  (Remember that this only\naffects newly created wild repos, despite the '@all' name).", 
            "title": "setting default roles"
        }, 
        {
            "location": "/wild/#specifying-owners", 
            "text": "See the section on  OWNER_ROLENAME  in the  rc file page .", 
            "title": "specifying owners"
        }, 
        {
            "location": "/wild/#listing-wild-repos", 
            "text": "In order to see what repositories were created from a wildcard, use the 'info'\ncommand.  Try  ssh git@host info -h  to get help on the info command.", 
            "title": "listing wild repos"
        }, 
        {
            "location": "/wild/#deleting-a-wild-repo", 
            "text": "Run the whimsically named \"D\" command -- try  ssh git@host D -h  for more info\non how to delete a wild repo.  (Yes the command is \"D\"; it's meant to be a\ncounterpart to the \"C\" permission that allowed you to create the repo in the\nfirst place).  Of course this only works if your admin has enabled the command\n(gitolite ships with the command disabled for remote use).", 
            "title": "deleting a wild repo"
        }, 
        {
            "location": "/wild/#appendix-1-owner-and-creator", 
            "text": "A wild repo is created by one specific user.  This user is usually called the creator  of the repo: his username is placed in a file called gl-creator in\nthe (bare) repo directory, any permissions given in the gitolite.conf file to\n\"CREATOR\" will be applicable to this user, he is the only person who can give\npermissions to other users (by running the 'perms' command), etc.  But, as I said in  this mail :  \n    Until about a year ago, Gitolite only knew the concept of a  creator , and\n    there was only one.\n\n    But then people started seeing the need for more than one  owner , because\n    wild repos may be *created* by one person, but they often needed to be\n    *administered* by one of several people.\n\n    So now, even though large parts of the documentation probably conflate\n     creator  and  owner , you can see wild.html ([wild]) and rc.html ([rc])\n    to actually understand how this larger group become the  owner .", 
            "title": "appendix 1: owner and creator"
        }, 
        {
            "location": "/vref/", 
            "text": "virtual refs\n\uf0c1\n\n\n(part 1)\n\n\n\n\nVREFs are a mechanism to add additional constraints to a push.\n\n\nThey are also the simplest way to add your old update hooks to gitolite --\nthey'll just work, no coding changes needed.  If that's all you need, you\nshould head over to the \ncookbook\n and look for the section on \"adding your\nown update hooks\".\n\n\n\n\nIMPORTANT:\n\n\nFallthru is success in VREFs, unlike for normal refs.  That won't make\nsense until you read further, but I had to put it up here for folks who\nstop reading halfway!\n\n\n\n\nquick intro/example\n\uf0c1\n\n\nHere's an example to start you off.\n\n\nTo disallow junior developers from changing more than five files, or from\ntouching the Makefile, you can do this:\n\n\n\n\nrepo \nfoo\n\n    RW+\n                     \n=   \n@all-devs\n\n\n\n    -\n   VREF/COUNT/5        \n=\n   @junior-devs\n\n\n    -\n   VREF/NAME/Makefile  \n=\n   @junior-devs\n\n\n\n\n\nHere's a pictorial representation of what happens, at a very high level, based\non the \nVREF/COUNT/5\n rule in the rule list above.\n\n\n\n\n\n\n\n\nTo start with, git-receive-pack calls the update hook with what we will\n    call a \"real\" ref, something like \"refs/heads/master\", or\n    \"refs/tags/v1.0\" -- in general, something that starts with \"refs/\".\n\n\nThis ref is sent through \"\ncheck #2\n\" (please click to refresh your\nmemory if needed).\n\n\nAny rules that specify a \nrefex\n starting with \"VREF/\" clearly won't\nmatch and are ignored in this check.\n\n\n\n\n\n\nAssuming that check did not fail, the gitolite code in the update hook\n    then starts looking at each \"VREF\" rule in the rule list that applies to\n    that repo accessed by that user.  For each one, it runs the actual VREF\n    program whose name is given in the word after \nVREF/\n. (The rest of the\n    words, if any, along with all sorts of other information, are supplied as\n    \narguments\n).\n\n\n\n\n\n\nThe STDOUT of the called program is captured and any line that starts with\n    the characters \nVREF/\n is taken as a \"\nvirtual\n\" ref, and is run through\n    the same \"\ncheck #2\n\". \nThe only difference is that, unlike\n    for a regular ref, fallthru does not result in failure, but\n    success.\n\n\n\n\n\n\nbasic use and understanding\n\uf0c1\n\n\nNormally, rules deal with branches and tags (which git collectively calls\n\"refs\").  The \"ref\" is a property of the push which gitolite checks against\nthe set of rules.\n\n\n\"Virtual refs\" are other properties of a push that gitolite can be told to\ncheck, in addition to the normal ref.  For example, \"this push has more than 5\nchanged files\" could be one property.  Or \"this push changed the file called\nMakefile\" could be another.  These properties are represented as \"virtual\nrefs\" that start with \nVREF/\n.  (Recall that \"normal\" refs start with\n\nrefs/\n).\n\n\nThe simplest way to use them is as \nadditional\n \"deny\" rules to fail a push\nthat might otherwise have passed.  This is what the example at the top shows.\n\n\nIt helps to separate VREF rules from normal rules, since no access rule can\nmatch both a normal ref and a virtual ref. Here's a good way to structure your\nrules:\n\n\n\n\n\n\nPut your normal ref rules first.  These apply to the branch name or tag\n    name that git itself knows about and sends to gitolite's update hook.\n\n\nFallthru is failure here, which means the ref being pushed \nmust\n match\nsome rule in this set for the push to succeed.\n\n\n\n\n\n\nPut your VREF rules next.  These apply to the virtual refs you want to\n    use as additional checks for the push.\n\n\nFallthru is success here, which means the (virtual) ref must be\n\nexplicitly denied\n in order for the push to fail.\n\n\n\n\n\n\nadvanced use\n\uf0c1\n\n\nMore complex uses are possible, but may be harder to understand.  You may want\nto experiment with the rules to solidify your understanding as you read this.\n\n\ndifferences from normal refs\n\uf0c1\n\n\nWe know where normal refs (like \nrefs/heads/master\n or \nrefs/tags/v1.0\n) come\nfrom -- they are supplied by git itself when it calls the update hook.\n\n\nVirtual refs have two differences with normal refs:\n\n\n\n\nGitolite has to generate them somehow.\n\n\nFallthru is success, not failure.\n\n\n\n\nHere's how it works.\n\n\n\n\n\n\nFirst, the normal (\"real\") ref is checked.\n\n\nAs you already know, the push dies if the ref hits a deny rule \nor\n it\nfalls through without hitting an allow rule.\n\n\n\n\n\n\nNext, virtual refs are generated and checked one by one.\n\n\nWe'll talk about the generaton later, but for the check, a virtual ref\nkills the push \nonly\n if it meets an explicit deny rule (\"-\"); fallthru\ndoes \nnot\n cause failure.  Other than that, the checking is done the same\nway as for a normal ref, viz., as described in the flow for \ncheck #2\n.\n\n\n\n\n\n\ngenerating virtual refs\n\uf0c1\n\n\nGitolite uses the VREF rules themselves to help it generate the virtual refs.\n\n\nSpecifically, it looks at each rule that contains a VREF (there are 2 in the\nabove example) and calls a VREF-maker for each of them.\n\n\nWe'll take the COUNT example rule above.\n\n\nWhen gitolite sees that rule, it calls the \"COUNT\" VREF-maker.  Specifically,\nthis is the \nVREF/COUNT\n program (See \nhere\n for actual locations on\ndisk).\n\n\nGitolite passes it the string \"5\" as an argument (actually, as the \neighth\n\nargument; details later).\n\n\nThe program (which can be written in any language) is expected to do one of\ntwo things:\n\n\n\n\n\n\nIf the condition is satisfied (i.e., there \nare\n more than 5 files in this\n    push), it should print \nVREF/COUNT/5\n to STDOUT.\n\n\nYou can see that when this virtual ref is processed through the rules, it\nwill encounter the \"deny\" rule, and thus kill the push.\n\n\n\n\n\n\nOtherwise it should print nothing.  That is, there is no virtual ref to\n    run through \"\ncheck #2\n\", so nothing happens.\n\n\n\n\n\n\nIt should exit with an exit code of zero in either case.\n\n\nIf it exits with a non-zero, the push dies regardless of what is printed (see\n\"mimicking a plain old update hook\" for why this is useful).\n\n\nmore details and nuances\n\uf0c1\n\n\nmimicking a plain old update hook\n\uf0c1\n\n\nIf the VREF maker exists with a non-zero exit code, then regardless of what it\nprints or does not, the push dies.\n\n\nThis is just like a plain 'update' hook.  Since the first 3 arguments (see\nlater) are also the same that a plain 'update' hook receives, you can actually\nuse any existing update hook as a VREF-maker.\n\n\nTo repurpose an existing update hook as a VREF-maker, just copy it to the VREF\ndirectory (again, see \nhere\n for actual locations on disk).  Then\nadd this rule to your repos:\n\n\n\n\nrepo \nfoo   \n # or maybe even 'repo @all'\n\n\n    -\n   VREF/my-update-hook     \n=\n   @all\n\n\n\n\n\nThat's it.\n\n\nwhat if the VREF-maker prints a different virtual ref?\n\uf0c1\n\n\nUnless you know what you're upto, don't do that.\n\n\nBut it's allowed and the behaviour is defined.  The VREF-maker for the NAME\nVREF is a good example.  It ignores the arguments and just makes VREFs out of\nthe name of every file that was changed in the push.\n\n\nHere's another example.  Consider the problem of not allowing pushes at\nspecific times.  Let's say repo 'foo' cannot be pushed between 4 and 7pm, and\nrepo 'bar' can only be pushed before 9am.  And of course all this only applies\nto the junior developers, the poor guys!\n\n\nIn this example, we write the \"Hour\" VREF-maker to \nignore the argument\npassed\n and just print \nVREF/Hour/NN\n where NN can be between 00 to 23\ninclusive and of course represents the current hour.\n\n\nIf foo is pushed at 6:30pm, the VREF-maker prints VREF/Hour/18, which\nsatisfies the third rule and is rejected.\n\n\nIf bar is pushed at, say, 7:20am, the vref printed is VREF/Hour/07, which does\nnot match any of the rules.  And fallthru is success so it passes.\n\n\n\n\nrepo \nfoo\n\n    RW+\n                         \n=   \n@all\n\n\n\n    -\n   VREF/Hour/16            \n=\n   @junior-devs\n\n\n    -\n   VREF/Hour/17            \n=\n   @junior-devs\n\n\n    -\n   VREF/Hour/18            \n=\n   @junior-devs\n\n\n\nrepo \nbar\n\n    RW+\n                         \n=   \n@all\n\n\n\n    -\n   VREF/Hour/09            \n=\n   @junior-devs\n\n\n    -\n   VREF/Hour/1[0-9]        \n=\n   @junior-devs\n\n\n    -\n   VREF/Hour/2[0-9]        \n=\n   @junior-devs\n\n\n\n\n\nwhy is fallthru considered success with VREFs\n\uf0c1\n\n\nVirtual refs are \nbest used\n (1) as \nadditional\n \"deny\" rules, performing\nextra checks that core gitolite cannot.  You usually want such extra checks\nonly for some people.\n\n\nWhen fallthru is success, you can simply \nignore\n all the other users (for\nwhom such additional checks are not needed).\n\n\nIf fallthru were to be considered 'failure', you'd be forced to add a \"success\nrule\" like this for \nevery\n virtual ref you used in this repo, in each case\nlisting every user who was not already mentioned in the context of that vref:\n\n\n\n\n    RW+\n VREF/VREFNAME   \n=   \n@userlist\n  \n # uggh! what a pain!\n\n\n\n\n\nWorse, since every virtual ref involves calling an external program, many of\nthese calls may be wasted.\n\n\n(1) \"best used as...\" does not mean \"only used as...\".  For\nexample it's perfectly easy to turn this around if, instead of having a list\nof people who \ndo\n need extra checks, all you have is the complementary\nlist:\n\n\n\n\n    RW+\n VREF/NAME/Makefile      \n=   \n@senior-devs\n\n\n    -\n   VREF/NAME/Makefile      \n=\n   @all\n\n\n\n\n\n\n\nwhat if the VREF-maker prints something that's not even a virtual ref?\n\uf0c1\n\n\nThe VREF-maker can print anything it wants to STDOUT.  Lines not starting with\n\nVREF/\n are printed as is (so your VREF-maker can do mostly-normal printing to\nSTDOUT).  This is especially useful if you've turned an existing update hook\ninto a VREF-maker, and it prints stuff meant for the user, but you don't want\nto touch the code.\n\n\nFor lines starting with \nVREF/\n, the first word in each such line will be\ntreated as a virtual ref, while the rest, if any, is a message to be added to\nthe standard \"...DENIED...\" message that gitolite will print if that refex\nmatches and the rule is a deny rule.\n\n\nin what order are VREF-makers called?\n\uf0c1\n\n\nVREF-makers are called in the sequence in which they appear in the conf file.\n\n\nThere are some optimisations to prevent calling the same VREF-maker with the\nsame arguments more than once, and the VREF-maker code for the NAME VREF\n(which is special) is called only once regardless of how many times it appears\nbut these details should not concern anyone but a developer.\n\n\nwhat arguments are passed to the vref-maker?\n\uf0c1\n\n\n\n\n\n\nArguments \n1, 2, 3\n: the \nref\n, \noldsha\n, and \nnewsha\n that git passed\n    to the update hook (see \nman githooks\n).\n\n\nThis, combined with the fact that non-zero exits are detected, mean that\nyou can simply use an existing update.secondary as a VREF-maker as-is, no\nchanges needed.\n\n\n\n\n\n\nArguments \n4 and 5\n: the 'oldtree' and 'newtree' SHAs.  These are the\n    same as the oldsha and newsha values, except if one of them is all-0.\n    (indicating a ref creation or deletion).  In that case the corresponding\n    'tree' SHA is set (by gitolite, as a courtesy) to the special SHA\n    \n4b825dc642cb6eb9a060e54bf8d69288fbee4904\n, which is the hash of an empty\n    tree.\n\n\n(None of these shenanigans would have been needed if \ngit diff $oldsha $newsha\n\nwould not error out when passed an all-0 SHA.)\n\n\n\n\n\n\nArgument \n6\n: the attempted access flag.  Typically \nW\n or \n+\n, but\n    could also be \nC\n, \nD\n, or any of these 4 followed by \nM\n.  If you have to\n    ask what they mean, you haven't read enough gitolite documentation to be\n    able to make virtual refs work.\n\n\n\n\n\n\nArgument \n7\n: is the entire refex; say \nVREF/COUNT/3/NEWFILES\n.\n\n\n\n\n\n\nArguments \n8 onward\n: are the split out (by \n/\n) portions of the refex,\n    excluding the first two components.  In our example they would be \n3\n\n    followed by \nNEWFILES\n.\n\n\n\n\n\n\nYes, argument 7 is redundant if you have 8 and 9.  It's just more convenient\nfor scripts to have both available, without having to split/join.", 
            "title": "virtual refs (part 1)"
        }, 
        {
            "location": "/vref/#virtual-refs", 
            "text": "(part 1)   VREFs are a mechanism to add additional constraints to a push.  They are also the simplest way to add your old update hooks to gitolite --\nthey'll just work, no coding changes needed.  If that's all you need, you\nshould head over to the  cookbook  and look for the section on \"adding your\nown update hooks\".   IMPORTANT:  Fallthru is success in VREFs, unlike for normal refs.  That won't make\nsense until you read further, but I had to put it up here for folks who\nstop reading halfway!", 
            "title": "virtual refs"
        }, 
        {
            "location": "/vref/#quick-introexample", 
            "text": "Here's an example to start you off.  To disallow junior developers from changing more than five files, or from\ntouching the Makefile, you can do this:   repo  foo     RW+                       =    @all-devs      -    VREF/COUNT/5         =    @junior-devs      -    VREF/NAME/Makefile   =    @junior-devs   Here's a pictorial representation of what happens, at a very high level, based\non the  VREF/COUNT/5  rule in the rule list above.     To start with, git-receive-pack calls the update hook with what we will\n    call a \"real\" ref, something like \"refs/heads/master\", or\n    \"refs/tags/v1.0\" -- in general, something that starts with \"refs/\".  This ref is sent through \" check #2 \" (please click to refresh your\nmemory if needed).  Any rules that specify a  refex  starting with \"VREF/\" clearly won't\nmatch and are ignored in this check.    Assuming that check did not fail, the gitolite code in the update hook\n    then starts looking at each \"VREF\" rule in the rule list that applies to\n    that repo accessed by that user.  For each one, it runs the actual VREF\n    program whose name is given in the word after  VREF/ . (The rest of the\n    words, if any, along with all sorts of other information, are supplied as\n     arguments ).    The STDOUT of the called program is captured and any line that starts with\n    the characters  VREF/  is taken as a \" virtual \" ref, and is run through\n    the same \" check #2 \".  The only difference is that, unlike\n    for a regular ref, fallthru does not result in failure, but\n    success.", 
            "title": "quick intro/example"
        }, 
        {
            "location": "/vref/#basic-use-and-understanding", 
            "text": "Normally, rules deal with branches and tags (which git collectively calls\n\"refs\").  The \"ref\" is a property of the push which gitolite checks against\nthe set of rules.  \"Virtual refs\" are other properties of a push that gitolite can be told to\ncheck, in addition to the normal ref.  For example, \"this push has more than 5\nchanged files\" could be one property.  Or \"this push changed the file called\nMakefile\" could be another.  These properties are represented as \"virtual\nrefs\" that start with  VREF/ .  (Recall that \"normal\" refs start with refs/ ).  The simplest way to use them is as  additional  \"deny\" rules to fail a push\nthat might otherwise have passed.  This is what the example at the top shows.  It helps to separate VREF rules from normal rules, since no access rule can\nmatch both a normal ref and a virtual ref. Here's a good way to structure your\nrules:    Put your normal ref rules first.  These apply to the branch name or tag\n    name that git itself knows about and sends to gitolite's update hook.  Fallthru is failure here, which means the ref being pushed  must  match\nsome rule in this set for the push to succeed.    Put your VREF rules next.  These apply to the virtual refs you want to\n    use as additional checks for the push.  Fallthru is success here, which means the (virtual) ref must be explicitly denied  in order for the push to fail.", 
            "title": "basic use and understanding"
        }, 
        {
            "location": "/vref/#advanced-use", 
            "text": "More complex uses are possible, but may be harder to understand.  You may want\nto experiment with the rules to solidify your understanding as you read this.", 
            "title": "advanced use"
        }, 
        {
            "location": "/vref/#differences-from-normal-refs", 
            "text": "We know where normal refs (like  refs/heads/master  or  refs/tags/v1.0 ) come\nfrom -- they are supplied by git itself when it calls the update hook.  Virtual refs have two differences with normal refs:   Gitolite has to generate them somehow.  Fallthru is success, not failure.   Here's how it works.    First, the normal (\"real\") ref is checked.  As you already know, the push dies if the ref hits a deny rule  or  it\nfalls through without hitting an allow rule.    Next, virtual refs are generated and checked one by one.  We'll talk about the generaton later, but for the check, a virtual ref\nkills the push  only  if it meets an explicit deny rule (\"-\"); fallthru\ndoes  not  cause failure.  Other than that, the checking is done the same\nway as for a normal ref, viz., as described in the flow for  check #2 .", 
            "title": "differences from normal refs"
        }, 
        {
            "location": "/vref/#generating-virtual-refs", 
            "text": "Gitolite uses the VREF rules themselves to help it generate the virtual refs.  Specifically, it looks at each rule that contains a VREF (there are 2 in the\nabove example) and calls a VREF-maker for each of them.  We'll take the COUNT example rule above.  When gitolite sees that rule, it calls the \"COUNT\" VREF-maker.  Specifically,\nthis is the  VREF/COUNT  program (See  here  for actual locations on\ndisk).  Gitolite passes it the string \"5\" as an argument (actually, as the  eighth \nargument; details later).  The program (which can be written in any language) is expected to do one of\ntwo things:    If the condition is satisfied (i.e., there  are  more than 5 files in this\n    push), it should print  VREF/COUNT/5  to STDOUT.  You can see that when this virtual ref is processed through the rules, it\nwill encounter the \"deny\" rule, and thus kill the push.    Otherwise it should print nothing.  That is, there is no virtual ref to\n    run through \" check #2 \", so nothing happens.    It should exit with an exit code of zero in either case.  If it exits with a non-zero, the push dies regardless of what is printed (see\n\"mimicking a plain old update hook\" for why this is useful).", 
            "title": "generating virtual refs"
        }, 
        {
            "location": "/vref/#more-details-and-nuances", 
            "text": "", 
            "title": "more details and nuances"
        }, 
        {
            "location": "/vref/#mimicking-a-plain-old-update-hook", 
            "text": "If the VREF maker exists with a non-zero exit code, then regardless of what it\nprints or does not, the push dies.  This is just like a plain 'update' hook.  Since the first 3 arguments (see\nlater) are also the same that a plain 'update' hook receives, you can actually\nuse any existing update hook as a VREF-maker.  To repurpose an existing update hook as a VREF-maker, just copy it to the VREF\ndirectory (again, see  here  for actual locations on disk).  Then\nadd this rule to your repos:   repo  foo     # or maybe even 'repo @all'      -    VREF/my-update-hook      =    @all   That's it.", 
            "title": "mimicking a plain old update hook"
        }, 
        {
            "location": "/vref/#what-if-the-vref-maker-prints-a-different-virtual-ref", 
            "text": "Unless you know what you're upto, don't do that.  But it's allowed and the behaviour is defined.  The VREF-maker for the NAME\nVREF is a good example.  It ignores the arguments and just makes VREFs out of\nthe name of every file that was changed in the push.  Here's another example.  Consider the problem of not allowing pushes at\nspecific times.  Let's say repo 'foo' cannot be pushed between 4 and 7pm, and\nrepo 'bar' can only be pushed before 9am.  And of course all this only applies\nto the junior developers, the poor guys!  In this example, we write the \"Hour\" VREF-maker to  ignore the argument\npassed  and just print  VREF/Hour/NN  where NN can be between 00 to 23\ninclusive and of course represents the current hour.  If foo is pushed at 6:30pm, the VREF-maker prints VREF/Hour/18, which\nsatisfies the third rule and is rejected.  If bar is pushed at, say, 7:20am, the vref printed is VREF/Hour/07, which does\nnot match any of the rules.  And fallthru is success so it passes.   repo  foo     RW+                           =    @all      -    VREF/Hour/16             =    @junior-devs      -    VREF/Hour/17             =    @junior-devs      -    VREF/Hour/18             =    @junior-devs  repo  bar     RW+                           =    @all      -    VREF/Hour/09             =    @junior-devs      -    VREF/Hour/1[0-9]         =    @junior-devs      -    VREF/Hour/2[0-9]         =    @junior-devs", 
            "title": "what if the VREF-maker prints a different virtual ref?"
        }, 
        {
            "location": "/vref/#why-is-fallthru-considered-success-with-vrefs", 
            "text": "Virtual refs are  best used  (1) as  additional  \"deny\" rules, performing\nextra checks that core gitolite cannot.  You usually want such extra checks\nonly for some people.  When fallthru is success, you can simply  ignore  all the other users (for\nwhom such additional checks are not needed).  If fallthru were to be considered 'failure', you'd be forced to add a \"success\nrule\" like this for  every  virtual ref you used in this repo, in each case\nlisting every user who was not already mentioned in the context of that vref:       RW+  VREF/VREFNAME    =    @userlist     # uggh! what a pain!   Worse, since every virtual ref involves calling an external program, many of\nthese calls may be wasted.  (1) \"best used as...\" does not mean \"only used as...\".  For\nexample it's perfectly easy to turn this around if, instead of having a list\nof people who  do  need extra checks, all you have is the complementary\nlist:       RW+  VREF/NAME/Makefile       =    @senior-devs      -    VREF/NAME/Makefile       =    @all", 
            "title": "why is fallthru considered success with VREFs"
        }, 
        {
            "location": "/vref/#what-if-the-vref-maker-prints-something-thats-not-even-a-virtual-ref", 
            "text": "The VREF-maker can print anything it wants to STDOUT.  Lines not starting with VREF/  are printed as is (so your VREF-maker can do mostly-normal printing to\nSTDOUT).  This is especially useful if you've turned an existing update hook\ninto a VREF-maker, and it prints stuff meant for the user, but you don't want\nto touch the code.  For lines starting with  VREF/ , the first word in each such line will be\ntreated as a virtual ref, while the rest, if any, is a message to be added to\nthe standard \"...DENIED...\" message that gitolite will print if that refex\nmatches and the rule is a deny rule.", 
            "title": "what if the VREF-maker prints something that's not even a virtual ref?"
        }, 
        {
            "location": "/vref/#in-what-order-are-vref-makers-called", 
            "text": "VREF-makers are called in the sequence in which they appear in the conf file.  There are some optimisations to prevent calling the same VREF-maker with the\nsame arguments more than once, and the VREF-maker code for the NAME VREF\n(which is special) is called only once regardless of how many times it appears\nbut these details should not concern anyone but a developer.", 
            "title": "in what order are VREF-makers called?"
        }, 
        {
            "location": "/vref/#what-arguments-are-passed-to-the-vref-maker", 
            "text": "Arguments  1, 2, 3 : the  ref ,  oldsha , and  newsha  that git passed\n    to the update hook (see  man githooks ).  This, combined with the fact that non-zero exits are detected, mean that\nyou can simply use an existing update.secondary as a VREF-maker as-is, no\nchanges needed.    Arguments  4 and 5 : the 'oldtree' and 'newtree' SHAs.  These are the\n    same as the oldsha and newsha values, except if one of them is all-0.\n    (indicating a ref creation or deletion).  In that case the corresponding\n    'tree' SHA is set (by gitolite, as a courtesy) to the special SHA\n     4b825dc642cb6eb9a060e54bf8d69288fbee4904 , which is the hash of an empty\n    tree.  (None of these shenanigans would have been needed if  git diff $oldsha $newsha \nwould not error out when passed an all-0 SHA.)    Argument  6 : the attempted access flag.  Typically  W  or  + , but\n    could also be  C ,  D , or any of these 4 followed by  M .  If you have to\n    ask what they mean, you haven't read enough gitolite documentation to be\n    able to make virtual refs work.    Argument  7 : is the entire refex; say  VREF/COUNT/3/NEWFILES .    Arguments  8 onward : are the split out (by  / ) portions of the refex,\n    excluding the first two components.  In our example they would be  3 \n    followed by  NEWFILES .    Yes, argument 7 is redundant if you have 8 and 9.  It's just more convenient\nfor scripts to have both available, without having to split/join.", 
            "title": "what arguments are passed to the vref-maker?"
        }, 
        {
            "location": "/vref-2/", 
            "text": "virtual refs\n\uf0c1\n\n\n(part 2)\n\n\n\n\nVREF-makers shipped with gitolite\n\uf0c1\n\n\nrestricting pushes by dir/file name\n\uf0c1\n\n\nThe \"NAME\" VREF allows you to restrict pushes by the names of dirs and files\nchanged.  (Side note: the NAME VREF is the only one directly implemented\nwithin the update hook, so you won't find it in the VREF directory).\n\n\nHere's an example.  Say you don't want junior developers pushing changes to\nthe Makefile, because it's quite complex:\n\n\n\n\nrepo \nfoo\n\n        RW+\n                             \n=   \n@senior_devs\n\n\n        RW\n                              \n=   \n@junior_devs\n\n\n\n        -\n   VREF/NAME/Makefile          \n=\n   @junior_devs\n\n\n\n\n\nWhen a senior dev pushes, the VREF is not invoked at all.  But when a junior\ndev pushes, the VREF is invoked, and it returns a list of files changed \nas\nvirtual refs\n, looking like this:\n\n\nVREF/NAME/file-1\nVREF/NAME/dir-2/file-3\n...etc...\n\n\n\nEach of these refs is matched against the access rules.  If one of them\nhappens to be the Makefile, then the ref returned (\nVREF/NAME/Makefile\n) will\nmatch the deny rule and kill the push.\n\n\nAnother way to use this is when you know what is allowed instead of what is\nnot allowed.  Let's say the QA person is only allowed to touch a file called\nCHANGELOG and any files in a directory called ReleaseNotes:\n\n\n\n\nrepo \nfoo\n\n        RW+\n                             \n=   \n@senior_devs\n\n\n        RW\n                              \n=   \n@junior_devs\n\n\n        RW+\n                             \n=   QA-guy\n\n\n        RW+\n VREF/NAME/CHANGELOG         \n=   QA-guy\n\n        RW+\n VREF/NAME/ReleaseNotes/     \n=   QA-guy\n\n        -\n   VREF/NAME/                  \n=\n   QA-guy\n\n\n\n\n\nnumber of changed or new files\n\uf0c1\n\n\nThe COUNT VREF is used like this:\n\n\n\n\n    -\n   VREF/COUNT/9                    \n=\n   @junior-developers\n\n\n\n\n\nIn response, if anyone in the user list pushes a commit series that\nchanges more than 9 files, a virtual ref of \nVREF/COUNT/9\n is returned.\nGitolite uses that as a \"ref\" to match against all the rules, hits the same\nrule that invoked it, and denies the request.\n\n\nIf the user did not push more than 9 files, the VREF code returns nothing,\nand nothing happens.\n\n\nCOUNT can take one more argument:\n\n\n\n\n    -\n   VREF/COUNT/9/NEWFILES           \n=\n   @junior-developers\n\n\n\n\n\nThis is the same as before, but have to be more than 9 \nnew\n files not\njust changed files.\n\n\nadvanced filetype detection\n\uf0c1\n\n\nNote: this is more for illustration than use; it's rather specific to one of\nthe projects I manage but the idea is the important thing.\n\n\nSometimes a file has a standard extension (that cannot be 'gitignore'd), but\nit is actually automatically generated.  Here's one way to catch it:\n\n\n\n\n     -\n   VREF/FILETYPE/AUTOGENERATED     \n=\n   @all\n\n\n\n\n\nYou can look at \nsrc/VREF/FILETYPE\n to see how it handles the\n'AUTOGENERATED' option.  You could also have a more generic option, like\nperhaps BINARY, and handle that in the FILETYPE vref too.\n\n\nchecking author email\n\uf0c1\n\n\nSome people want to ensure that \"you can only push your own commits\".\n\n\nIf you force it on everyone, this is a very silly idea (see \"Philosophical\nNotes\" section of \nsrc/VREF/EMAIL-CHECK\n).\n\n\nBut there may be value in enforcing it just for the junior developers.\n\n\nThe neat thing is that the existing \ncontrib/update.email-check\n was just\ncopied to \nsrc/VREF/EMAIL-CHECK\n and it works, because VREFs get\nthe same first 3 arguments and those are all that it cares about.  (Note: you\nhave to change one subroutine in that script if you want to use it)\n\n\nvoting on commits\n\uf0c1\n\n\nAlthough gitolite can't/won't do the whole \"code review + workflow\nenforcement\" thing that Gerrit Code Review does, a basic implementation of\nvoting on a commit is surprisingly easy.  See \nsrc/VREF/VOTES\n for details\n(and note that the actual \ncode\n is just 2-3 lines; the rest is inline\ndocumentation).\n\n\nother ideas -- code welcome!\n\uf0c1\n\n\n\"no non-merge first-parents\"\n\uf0c1\n\n\nShruggar on #gitolite wanted this.  Possible code to implement it would be\nsomething like this (untested)\n\n\n[ -z \"$(git rev-list --first-parent --no-merges $2..$3)\" ]\n\n\n\nThis can be implemented using \nsrc/VREF/MERGE-CHECK\n as a model.  That script\ndoes what the 'M' qualifier does in access rules (see last part of\n\nthis\n), although the syntax to be used in conf/gitolite will be\nquite different.\n\n\nother ideas for VREFs\n\uf0c1\n\n\nHere are some more ideas:\n\n\n\n\nNumber of commits (\ngit rev-list --count $old $new\n).\n\n\nNumber of binary files in commit (currently I only know to count\n    occurrences of \nBin\n in the output of \ngit diff --stat\n.\n\n\nNumber of \nnew\n binary files (count \nBin 0 -\n in \ngit diff --stat\n\n    output).\n\n\nTime of day/day of week (see example snippet somewhere above).\n\n\nIP address.\n\n\nPhase of the moon.\n\n\n\n\nNote that pretty much anything that involves \n$oldsha..$newsha\n will have to\ndeal with the issue that when you push a new tag or branch, the \"old\" part\nis all 0's, and unless you consider \n--all\n existing branches and tags it\nbecomes meaningless in terms of \"number of new files\" etc.", 
            "title": "virtual refs (part 2)"
        }, 
        {
            "location": "/vref-2/#virtual-refs", 
            "text": "(part 2)", 
            "title": "virtual refs"
        }, 
        {
            "location": "/vref-2/#vref-makers-shipped-with-gitolite", 
            "text": "", 
            "title": "VREF-makers shipped with gitolite"
        }, 
        {
            "location": "/vref-2/#restricting-pushes-by-dirfile-name", 
            "text": "The \"NAME\" VREF allows you to restrict pushes by the names of dirs and files\nchanged.  (Side note: the NAME VREF is the only one directly implemented\nwithin the update hook, so you won't find it in the VREF directory).  Here's an example.  Say you don't want junior developers pushing changes to\nthe Makefile, because it's quite complex:   repo  foo         RW+                               =    @senior_devs          RW                                =    @junior_devs          -    VREF/NAME/Makefile           =    @junior_devs   When a senior dev pushes, the VREF is not invoked at all.  But when a junior\ndev pushes, the VREF is invoked, and it returns a list of files changed  as\nvirtual refs , looking like this:  VREF/NAME/file-1\nVREF/NAME/dir-2/file-3\n...etc...  Each of these refs is matched against the access rules.  If one of them\nhappens to be the Makefile, then the ref returned ( VREF/NAME/Makefile ) will\nmatch the deny rule and kill the push.  Another way to use this is when you know what is allowed instead of what is\nnot allowed.  Let's say the QA person is only allowed to touch a file called\nCHANGELOG and any files in a directory called ReleaseNotes:   repo  foo         RW+                               =    @senior_devs          RW                                =    @junior_devs          RW+                               =   QA-guy         RW+  VREF/NAME/CHANGELOG          =   QA-guy         RW+  VREF/NAME/ReleaseNotes/      =   QA-guy         -    VREF/NAME/                   =    QA-guy", 
            "title": "restricting pushes by dir/file name"
        }, 
        {
            "location": "/vref-2/#number-of-changed-or-new-files", 
            "text": "The COUNT VREF is used like this:       -    VREF/COUNT/9                     =    @junior-developers   In response, if anyone in the user list pushes a commit series that\nchanges more than 9 files, a virtual ref of  VREF/COUNT/9  is returned.\nGitolite uses that as a \"ref\" to match against all the rules, hits the same\nrule that invoked it, and denies the request.  If the user did not push more than 9 files, the VREF code returns nothing,\nand nothing happens.  COUNT can take one more argument:       -    VREF/COUNT/9/NEWFILES            =    @junior-developers   This is the same as before, but have to be more than 9  new  files not\njust changed files.", 
            "title": "number of changed or new files"
        }, 
        {
            "location": "/vref-2/#advanced-filetype-detection", 
            "text": "Note: this is more for illustration than use; it's rather specific to one of\nthe projects I manage but the idea is the important thing.  Sometimes a file has a standard extension (that cannot be 'gitignore'd), but\nit is actually automatically generated.  Here's one way to catch it:        -    VREF/FILETYPE/AUTOGENERATED      =    @all   You can look at  src/VREF/FILETYPE  to see how it handles the\n'AUTOGENERATED' option.  You could also have a more generic option, like\nperhaps BINARY, and handle that in the FILETYPE vref too.", 
            "title": "advanced filetype detection"
        }, 
        {
            "location": "/vref-2/#checking-author-email", 
            "text": "Some people want to ensure that \"you can only push your own commits\".  If you force it on everyone, this is a very silly idea (see \"Philosophical\nNotes\" section of  src/VREF/EMAIL-CHECK ).  But there may be value in enforcing it just for the junior developers.  The neat thing is that the existing  contrib/update.email-check  was just\ncopied to  src/VREF/EMAIL-CHECK  and it works, because VREFs get\nthe same first 3 arguments and those are all that it cares about.  (Note: you\nhave to change one subroutine in that script if you want to use it)", 
            "title": "checking author email"
        }, 
        {
            "location": "/vref-2/#voting-on-commits", 
            "text": "Although gitolite can't/won't do the whole \"code review + workflow\nenforcement\" thing that Gerrit Code Review does, a basic implementation of\nvoting on a commit is surprisingly easy.  See  src/VREF/VOTES  for details\n(and note that the actual  code  is just 2-3 lines; the rest is inline\ndocumentation).", 
            "title": "voting on commits"
        }, 
        {
            "location": "/vref-2/#other-ideas-code-welcome", 
            "text": "", 
            "title": "other ideas -- code welcome!"
        }, 
        {
            "location": "/vref-2/#no-non-merge-first-parents", 
            "text": "Shruggar on #gitolite wanted this.  Possible code to implement it would be\nsomething like this (untested)  [ -z \"$(git rev-list --first-parent --no-merges $2..$3)\" ]  This can be implemented using  src/VREF/MERGE-CHECK  as a model.  That script\ndoes what the 'M' qualifier does in access rules (see last part of this ), although the syntax to be used in conf/gitolite will be\nquite different.", 
            "title": "\"no non-merge first-parents\""
        }, 
        {
            "location": "/vref-2/#other-ideas-for-vrefs", 
            "text": "Here are some more ideas:   Number of commits ( git rev-list --count $old $new ).  Number of binary files in commit (currently I only know to count\n    occurrences of  Bin  in the output of  git diff --stat .  Number of  new  binary files (count  Bin 0 -  in  git diff --stat \n    output).  Time of day/day of week (see example snippet somewhere above).  IP address.  Phase of the moon.   Note that pretty much anything that involves  $oldsha..$newsha  will have to\ndeal with the issue that when you push a new tag or branch, the \"old\" part\nis all 0's, and unless you consider  --all  existing branches and tags it\nbecomes meaningless in terms of \"number of new files\" etc.", 
            "title": "other ideas for VREFs"
        }, 
        {
            "location": "/deleg/", 
            "text": "delegating access control responsibilities\n\uf0c1\n\n\n\n\nDelegation allows you to divide up a large conf file into smaller groups of\nrepos (called \nsubconf\ns) and hand over responsibility to manage them to\n\nsub-admin\ns.  Gitolite can prevent one sub-admin from being able to set\naccess rules for any other sub-admin's repos.\n\n\nDelegation is achieved by combining two gitolite features:\n\nsubconf\n and the \nNAME VREF\n.\n\n\nexample\n\uf0c1\n\n\nHere's a sample conf that does delegation:\n\n\n\n\n@webbrowsers\n        = firefox lynx \nbrowsers/..*\n\n\n@webservers\n         = apache nginx \nservers/..*\n\n\n@malwares\n           = conficker storm \nms/..*\n\n   \n # side note: if anyone objects, we claim ms stands for \nmetasploit\n ;-)\n\n\n\n# the admin repo access probably had these 2 lines to start with:\n\n\nrepo \ngitolite-admin\n\n    RW+\n                                     \n= sitaram\n\n# now add these lines to the config for the admin repo\n\n\n    RW\n                                      \n= alice bob mallory\n\n    RW\n  VREF/NAME/conf/subs/webbrowsers     \n= alice\n\n    RW\n  VREF/NAME/conf/subs/webservers      \n= bob\n\n    RW\n  VREF/NAME/conf/subs/malwares        \n= mallory\n\n    -\n   VREF/NAME/                          \n=\n alice bob mallory\n\n\n\n# pull in these files using the \nsubconf\n command\n\n\nsubconf \nsubs/*.conf\n\n\n\n\n\nIf you've read the \nVREF\n part, or at least understood how \nNAME\nVREF\ns work, it should be clear that, in terms of changes to the\ngitolite-admin repo:\n\n\n\n\nThe user sitaram has no restrictions of any kind\n\n\nUsers alice, bob, and mallory can only touch files within their assigned\n    areas within conf/subs.  If they try to change any other file (keydir,\n    conf/gitolite.conf, or something in one of the other sub-admin's areas),\n    then the last rule kicks in and the push gets rejected.\n\n\n\n\nNow all we need is to see what this \"subconf\" thing is all about.\n\n\nthe subconf command\n\uf0c1\n\n\nSubconf is exactly like the include command in syntax:\n\n\n\n\nsubconf \nfoo.conf\n\n\n\n\n\nbut while reading the included file (as well as anything included from it),\ngitolite sets the \"current subconf name\" to \"foo\".\n\n\nA \"subconf\" imposes some restrictions on what repos can be managed.\n\n\nFor example, while the subconf name is \"foo\", as in the above example,\ngitolite will only process \"repo\" lines for:\n\n\n\n\nA repo called \"foo\".\n\n\nA group called \"@foo\", as long as the group is defined in the main conf\n    file (i.e., \noutside\n \"foo.conf\").\n\n\nA member of a group called \"@foo\" (again, defined outside).\n\n\nA repo that matches a member of a group called \"@foo\" if that member is a\n    regular expression.\n\n\n\n\nHere's an example.  If the main conf file contains\n\n\n\n\n@foo\n    =   aa bb \ncc/..*\n\n\n\n\n\nthen the subconf can only accept repo statements that refer to 'foo', '@foo',\n'aa', 'bb', or any repo whose name starts with 'cc/'.\n\n\nNote\n: the subconf name \"master\" is special; it is the default subconf in\neffect for the main conf file and has no restrictions.\n\n\nhow the \"subconf name\" is derived\n\uf0c1\n\n\nFor subconf lines that look just like include statements, i.e.,\n\n\n\n\nsubconf \nfoo/bar.conf\n\n\nsubconf \nfrob/*.conf\n\n   \n # assume frob has files aa.conf, bb.conf\n\n\n\n\n\nthe subconf name as each file is being processed is the base name of the file.\nThis means it would be \"bar\" for the first line, \"aa\" when processing\n\"frob/aa.conf\", and \"bb\" when processing \"frob/bb.conf\".\n\n\nA variation of subconf exists that can explicitly state the subconf name:\n\n\n\n\nsubconf \nfoo \nfrob/*.conf\n\n\n\n\n\nIn this variation, regardless of what file in \"frob/\" is being read, the\nsubconf name in effect is \"foo\".\n\n\nsecurity notes\n\uf0c1\n\n\ngroup names\n\uf0c1\n\n\nYou can use \"@group\"s defined in the main config file but do not attempt to\nredefine or extend them in your own subconf file.  If you must extend a group\n(say \n@foo\n) defined in the main config file, do this:\n\n\n\n\n@myfoo\n  =   \n@foo\n\n\n# now do whatever you want with @myfoo\n\n\n\n\n\nGroup names you define in your subconf will not clash even if the exact same\nname is used in another subconf file, so you need not worry about that.\n\n\ndelegating pubkeys\n\uf0c1\n\n\nShort answer: not gonna happen.\n\n\nThe delegation feature is meant only for access control rules, not pubkeys.\nAdding/removing pubkeys is a much more significant event than changing branch\nlevel permissions for people already on staff, and only the main admin should\nbe allowed to do it.\n\n\nGitolite's \"userids\" all live in the same namespace.  This is unlikely to\nchange, so please don't ask -- it gets real complicated to do otherwise.\nAllowing sub-admins to add users means username collisions, which also means\nsecurity problems (admin-A creates a pubkey for Admin-B, thus gaining access\nto all of Admin-B's stuff).\n\n\nIf you feel the need to delegate even that, please just go the whole hog and\ngive them separate gitolite instances (i.e., running on different servers, or\nat least under different gitolite hosting users on the same server)!", 
            "title": "delegation of admin duties"
        }, 
        {
            "location": "/deleg/#delegating-access-control-responsibilities", 
            "text": "Delegation allows you to divide up a large conf file into smaller groups of\nrepos (called  subconf s) and hand over responsibility to manage them to sub-admin s.  Gitolite can prevent one sub-admin from being able to set\naccess rules for any other sub-admin's repos.  Delegation is achieved by combining two gitolite features: subconf  and the  NAME VREF .", 
            "title": "delegating access control responsibilities"
        }, 
        {
            "location": "/deleg/#example", 
            "text": "Here's a sample conf that does delegation:   @webbrowsers         = firefox lynx  browsers/..*  @webservers          = apache nginx  servers/..*  @malwares            = conficker storm  ms/..* \n     # side note: if anyone objects, we claim ms stands for  metasploit  ;-)  # the admin repo access probably had these 2 lines to start with:  repo  gitolite-admin     RW+                                       = sitaram # now add these lines to the config for the admin repo      RW                                        = alice bob mallory     RW   VREF/NAME/conf/subs/webbrowsers      = alice     RW   VREF/NAME/conf/subs/webservers       = bob     RW   VREF/NAME/conf/subs/malwares         = mallory     -    VREF/NAME/                           =  alice bob mallory  # pull in these files using the  subconf  command  subconf  subs/*.conf   If you've read the  VREF  part, or at least understood how  NAME\nVREF s work, it should be clear that, in terms of changes to the\ngitolite-admin repo:   The user sitaram has no restrictions of any kind  Users alice, bob, and mallory can only touch files within their assigned\n    areas within conf/subs.  If they try to change any other file (keydir,\n    conf/gitolite.conf, or something in one of the other sub-admin's areas),\n    then the last rule kicks in and the push gets rejected.   Now all we need is to see what this \"subconf\" thing is all about.", 
            "title": "example"
        }, 
        {
            "location": "/deleg/#the-subconf-command", 
            "text": "Subconf is exactly like the include command in syntax:   subconf  foo.conf   but while reading the included file (as well as anything included from it),\ngitolite sets the \"current subconf name\" to \"foo\".  A \"subconf\" imposes some restrictions on what repos can be managed.  For example, while the subconf name is \"foo\", as in the above example,\ngitolite will only process \"repo\" lines for:   A repo called \"foo\".  A group called \"@foo\", as long as the group is defined in the main conf\n    file (i.e.,  outside  \"foo.conf\").  A member of a group called \"@foo\" (again, defined outside).  A repo that matches a member of a group called \"@foo\" if that member is a\n    regular expression.   Here's an example.  If the main conf file contains   @foo     =   aa bb  cc/..*   then the subconf can only accept repo statements that refer to 'foo', '@foo',\n'aa', 'bb', or any repo whose name starts with 'cc/'.  Note : the subconf name \"master\" is special; it is the default subconf in\neffect for the main conf file and has no restrictions.", 
            "title": "the subconf command"
        }, 
        {
            "location": "/deleg/#how-the-subconf-name-is-derived", 
            "text": "For subconf lines that look just like include statements, i.e.,   subconf  foo/bar.conf  subconf  frob/*.conf \n     # assume frob has files aa.conf, bb.conf   the subconf name as each file is being processed is the base name of the file.\nThis means it would be \"bar\" for the first line, \"aa\" when processing\n\"frob/aa.conf\", and \"bb\" when processing \"frob/bb.conf\".  A variation of subconf exists that can explicitly state the subconf name:   subconf  foo  frob/*.conf   In this variation, regardless of what file in \"frob/\" is being read, the\nsubconf name in effect is \"foo\".", 
            "title": "how the \"subconf name\" is derived"
        }, 
        {
            "location": "/deleg/#security-notes", 
            "text": "", 
            "title": "security notes"
        }, 
        {
            "location": "/deleg/#group-names", 
            "text": "You can use \"@group\"s defined in the main config file but do not attempt to\nredefine or extend them in your own subconf file.  If you must extend a group\n(say  @foo ) defined in the main config file, do this:   @myfoo   =    @foo  # now do whatever you want with @myfoo   Group names you define in your subconf will not clash even if the exact same\nname is used in another subconf file, so you need not worry about that.", 
            "title": "group names"
        }, 
        {
            "location": "/deleg/#delegating-pubkeys", 
            "text": "Short answer: not gonna happen.  The delegation feature is meant only for access control rules, not pubkeys.\nAdding/removing pubkeys is a much more significant event than changing branch\nlevel permissions for people already on staff, and only the main admin should\nbe allowed to do it.  Gitolite's \"userids\" all live in the same namespace.  This is unlikely to\nchange, so please don't ask -- it gets real complicated to do otherwise.\nAllowing sub-admins to add users means username collisions, which also means\nsecurity problems (admin-A creates a pubkey for Admin-B, thus gaining access\nto all of Admin-B's stuff).  If you feel the need to delegate even that, please just go the whole hog and\ngive them separate gitolite instances (i.e., running on different servers, or\nat least under different gitolite hosting users on the same server)!", 
            "title": "delegating pubkeys"
        }, 
        {
            "location": "/gitweb-daemon/", 
            "text": "allowing access to gitweb and git-daemon\n\uf0c1\n\n\n\n\n\n\nGitolite does \nnot\n install or configure gitweb/git-daemon -- that is a\none-time setup you must do separately.\n\n\n\n\ngitweb\n\uf0c1\n\n\nThe following repos are deemed to be readable by gitweb:\n\n\n\n\nAny repos readable by the special user \ngitweb\n.\n\n\n\n\nAny repos containing one or more of the following types of lines:\n    (actually, any config variable starting with \ngitweb\n).\n\n\nconfig gitweb.owner         =   owner name\nconfig gitweb.description   =   some description\nconfig gitweb.category      =   some category\n\n\n\nSide note: the following shorter forms are available as \nsyntactic\nsugar\n for the above longer forms:\n\n\nowner       =   owner name\ndesc        =   some description\ncategory    =   some category\n\n\n\n\n\n\n\nThe list of gitweb-readable repos is written to a file whose name is given by\nthe \nrc\n file variable \nGITWEB_PROJECTS_LIST\n.  The default value of this\nvariable, if it is not specified or empty, is \n$HOME/projects.list\n.\n\n\nIn addition, each of the config variables described above is written to the\nrepo to which it pertains, so that gitweb can use them.\n\n\nchanging the UMASK\n\uf0c1\n\n\nGitweb (or cgit, redmine, etc.) typically runs under a different userid, and\nthe default permissions that gitolite sets make them unreadable.\n\n\nSee the section on the \nUMASK\n variable in the page for the \nrc file\n.\n\n\nrepo-specific authorisation in gitweb\n\uf0c1\n\n\nGitweb has a feature whereby it will call a (perl) function that you supply,\npassing it the full path to the repo being accessed.  If the remote user is\nauthenticated, the username will be available, so your function can take those\ntwo pieces of information and return true or false to allow or deny the\nrepository access.\n\n\nIf you want to use gitolite's access rules in making this determination, you\nwill first have to ensure that the HTTP username (i.e., the username known to\napache/gitweb) is the same as the gitolite username.  If you're using\ngitolite's \nhttp\n mode, this is probably already true, but if you're using\nthe more widely used ssh mode, you'll have to make sure they match.\n\n\nYou then need to add \nthis code\n to your gitweb.conf.\n\n\ngit-daemon\n\uf0c1\n\n\nAny repo readable by the special user \ndaemon\n is deemed to be readable by\ngit-daemon.  For each of these repos, an empty file called\n\ngit-daemon-export-ok\n is created in the repository (i.e., the \nrepo.git\n\ndirectory inside \n$HOME/repositories\n).\n\n\ntips\n\uf0c1\n\n\nSetting descriptions en-masse usually does not make sense, but you can\ncertainly do things like\n\n\nrepo @all\n    R       =   gitweb daemon\n\n\n\nassuming you have other means of setting 'gitweb.description' and\n'gitweb.owner'.\n\n\nAlso see \nthis\n for a twist on that.", 
            "title": "gitweb and git-daemon"
        }, 
        {
            "location": "/gitweb-daemon/#allowing-access-to-gitweb-and-git-daemon", 
            "text": "Gitolite does  not  install or configure gitweb/git-daemon -- that is a\none-time setup you must do separately.", 
            "title": "allowing access to gitweb and git-daemon"
        }, 
        {
            "location": "/gitweb-daemon/#gitweb", 
            "text": "The following repos are deemed to be readable by gitweb:   Any repos readable by the special user  gitweb .   Any repos containing one or more of the following types of lines:\n    (actually, any config variable starting with  gitweb ).  config gitweb.owner         =   owner name\nconfig gitweb.description   =   some description\nconfig gitweb.category      =   some category  Side note: the following shorter forms are available as  syntactic\nsugar  for the above longer forms:  owner       =   owner name\ndesc        =   some description\ncategory    =   some category    The list of gitweb-readable repos is written to a file whose name is given by\nthe  rc  file variable  GITWEB_PROJECTS_LIST .  The default value of this\nvariable, if it is not specified or empty, is  $HOME/projects.list .  In addition, each of the config variables described above is written to the\nrepo to which it pertains, so that gitweb can use them.", 
            "title": "gitweb"
        }, 
        {
            "location": "/gitweb-daemon/#changing-the-umask", 
            "text": "Gitweb (or cgit, redmine, etc.) typically runs under a different userid, and\nthe default permissions that gitolite sets make them unreadable.  See the section on the  UMASK  variable in the page for the  rc file .", 
            "title": "changing the UMASK"
        }, 
        {
            "location": "/gitweb-daemon/#repo-specific-authorisation-in-gitweb", 
            "text": "Gitweb has a feature whereby it will call a (perl) function that you supply,\npassing it the full path to the repo being accessed.  If the remote user is\nauthenticated, the username will be available, so your function can take those\ntwo pieces of information and return true or false to allow or deny the\nrepository access.  If you want to use gitolite's access rules in making this determination, you\nwill first have to ensure that the HTTP username (i.e., the username known to\napache/gitweb) is the same as the gitolite username.  If you're using\ngitolite's  http  mode, this is probably already true, but if you're using\nthe more widely used ssh mode, you'll have to make sure they match.  You then need to add  this code  to your gitweb.conf.", 
            "title": "repo-specific authorisation in gitweb"
        }, 
        {
            "location": "/gitweb-daemon/#git-daemon", 
            "text": "Any repo readable by the special user  daemon  is deemed to be readable by\ngit-daemon.  For each of these repos, an empty file called git-daemon-export-ok  is created in the repository (i.e., the  repo.git \ndirectory inside  $HOME/repositories ).", 
            "title": "git-daemon"
        }, 
        {
            "location": "/gitweb-daemon/#tips", 
            "text": "Setting descriptions en-masse usually does not make sense, but you can\ncertainly do things like  repo @all\n    R       =   gitweb daemon  assuming you have other means of setting 'gitweb.description' and\n'gitweb.owner'.  Also see  this  for a twist on that.", 
            "title": "tips"
        }, 
        {
            "location": "/mirroring/", 
            "text": "mirroring using gitolite\n\uf0c1\n\n\n\n\n\n\nv2 mirroring users:\n\n\n\n\n\nThere are \nseveral\n important differences in mirroring; it's best to\n\nstart from a clean slate on all slaves\n, using this documentation.\n\n\nIf you're not willing to do that, you may be able to use the older, more\ndetailed, documentation \nhere\n to manage the migration.  However, I\ncannot support that (mainly due to lack of time).\n\n\n\n\nquick intro\n\uf0c1\n\n\nMirroring is simple: you have one \"master\" server and one or more \"slave\"\nservers.  The slaves get updates only from the master; to the rest of the\nworld they are at best read-only.\n\n\nIn the following picture, each box (A, B, C, ...) is a repo.  The master\nserver for a repo is colored red, slaves are green.  Users only push to a\nmaster server (red), and the master server then does a \ngit push --mirror\n to\nthe slaves.  The arrows show this mirror push.\n\n\n\n\nHere's a more complete description of what gitolite can do:\n\n\n\n\n\n\nDifferent masters and sets of slaves for different repos.\n\n\nThis lets you do things like:\n\n\n\n\nUse the server closest to \nmost\n of its developers as the master for\n    that repo.\n\n\nMirror a repo to only some of the servers.\n\n\nHave repos that are purely local to a server (not mirrored at all).\n\n\nPush to a slave on demand or via cron (helps deal with bandwidth or\n    connectivity constraints).\n\n\n\n\nAll this is possible whether or not the gitolite-admin repo is mirrored --\nthat is, all servers have the \nexact same\n gitolite-admin repo or not.\n\n\n\n\n\n\nPushes to a slave can be transparently forwarded to the real master.\n\n\nYour developers need not worry about where a repo's master is -- they just\nwrite to their local mirror for \nall\n repos, even if their local mirror is\nonly a slave for some.\n\n\n\n\n\n\ncaveats\n\uf0c1\n\n\n\n\n\n\nMirroring by itself will never \ncreate\n a repo on a slave; it has to exist\n    and be prepared to receive updates from the master.\n\n\nThe simplest way to ensure your repos exist on the slaves also is to\nmirror the special gitolite-admin repo as well, and this is what most\nsites do.\n\n\n\n\n\n\nThere is limited support for auto-creating wild card repos and sending\n    'perms' info across, with the following caveats at present.  (Some of this\n    text won't make sense unless you know what those features are).\n\n\n\n\n\n\nWARNING\n: it does NOT make sense to mirror\n    wild repos in setups where the authentication data is not the same\n    (i.e., where \"alice\" on the master and \"alice\" on a slave maybe\n    totally different people)\n.\n\n\n\n\n\n\nThis has only been minimally tested.  For example, complex setups or\n    asymmetric configs on master and slave, etc. have NOT been tested.\n\n\n\n\n\n\nPermission changes will only propagate on the next 'git push'.  Of\n    course, if you know the name of the slave server, you can run\n\n\nssh git@host mirror push slave-server-name repo-name\n\n\n\n\n\n\n\nUsing 'perms' on a slave is allowed but will neither propagate nor\n    persist.  They will be overwritten by whatever perms the master has\n    (even if it is an empty set) on the next 'git push'.\n\n\n\n\n\n\nAs with lots of extra features in gitolite, smart http support is not\n    on my radar.  Don't ask.\n\n\n\n\n\n\nPlease test it out and let me know if something surprising happens.  Be\naware that I have been known to claim bugs are features if I don't have\ntime to fix them immediately :-)\n\n\n\n\n\n\nMirroring is only for git repos.  Ancillary files like gl-creator and\n    gl-perms in the repo directory are not mirrored; you must do that\n    separately.  Files in the admin directory (like log files) are also not\n    mirrored.\n\n\n\n\n\n\nIf you ever do a \nbypass push\n, mirroring will not work.\n    Mirroring checks also will not work -- for example, you can push to a\n    slave, which is not usually a good idea.  So don't bypass gitolite if the\n    repo is mirrored!\n\n\n\n\n\n\nFrom v3.5.3 on, gitolite uses an asynchronous push to the slaves, so that\n    the main push returns immediately, without waiting for the slave pushes to\n    complete.  Keep this in mind if you're writing scripts that do a push, and\n    then read one of the slaves immediately -- you will need to add a few\n    seconds of sleep in your script.\n\n\n\n\n\n\nsetting up mirroring\n\uf0c1\n\n\nThis is in two parts: the initial setup and the rc file, followed by the conf\nfile settings and syntax.\n\n\nthe initial setup and the \nrc file\n\uf0c1\n\n\nOn \neach\n server:\n\n\n\n\n\n\nInstall gitolite normally.  Make clones of the server's 'gitolite-admin'\n    repo on your workstation so you can admin them all from one place.\n\n\n\n\n\n\nGive the server a short, simple, \"hostname\" and set the HOSTNAME in the\n    rc file (i.e., \n~/.gitolite.rc\n on the server) to this name, for example\n    'mars'.  \nNote: this has nothing to do with the hostname of the server in\n    networking or DNS terms, or in OS terms.  This is internal to gitolite\n.\n\n\n\n\n\n\nRun ssh-keygen if needed and get an ssh key pair for the server.  Copy the\n    public key to a common area and name it after the host, but with 'server-'\n    prefixed.  For example, the pubkey for server 'mars' must be stored as\n    'server-mars.pub'.\n\n\n\n\n\n\nCopy all keys to all the admin repo clones on your workstation and and add\n    them as usual.  This is an \nO(N^2)\n operation ;-)\n\n\nYou may have guessed that the prefix 'server-' is special, and\ndistinguishes a human user from a mirroring peer.\n\n\n\n\n\n\nCreate \"host\" aliases to refer to all other machines.  See \nhere\n\n    for what/how.\n\n\nThe host alias for a host (in all other machines' \n~/.ssh/config\n files)\nMUST be the same as the \nHOSTNAME\n in the referred host's\n\n~/.gitolite.rc\n.  Gitolite mirroring \nrequires\n this consistency in\nnaming; things will NOT work otherwise.\n\n\nNormally you should be able to build one common file and append it to all\nthe servers' \n~/.ssh/config\n files.\n\n\n\n\n\n\nThe following \nMUST\n work for \neach pair\n of servers that must talk to\n    each other:\n\n\n# on server mars\nssh phobos info\n# the response MUST start with \"hello, server-mars...\"\n\n\n\nNote the exact syntax used; variations like \"ssh git@phobos.example.com\ninfo\" are NOT sufficient.  That is why you need the ssh host aliases.\n\n\nCheck this command from \neverywhere to everywhere else\n, and make sure you\nget expected results.  \nDo NOT proceed otherwise.\n\n\n\n\n\n\nSetup the gitolite.conf file on all the servers.  If the slaves are to be\n    exact copies of the master, you need to do the complete configuration only\n    on the master; the slaves can have just this because on the first push to\n    the master it will update all the slaves anyway:\n\n\n\n\nrepo \ngitolite-admin\n\n    RW+\n     \n=   some-local-admin\n\n\noption mirror.master    =   mars\noption mirror.slaves    =   phobos\n\n\n\n\n\n\n\n\n\n\nWhen that is all done and tested, \nenable mirroring\n by going through\n    the rc file and uncommenting all the lines mentioning \nMirroring\n.\n\n\n\n\n\n\nIf you wish to allow your users to run the mirror command remotely\n    (usually \nnot\n required), you need to enable it just like any other\n    command that is not enabled by default; see \ngitolite commands\n\n    for how.\n\n\n\n\n\n\nconf file settings and syntax\n\uf0c1\n\n\nMirroring is defined by the following \noptions\n.  You can have different\nsettings for different repos, and of course some repos may not have any mirror\noptions at all -- they are then purely local.\n\n\n\n\nrepo \nfoo\n    ...access rules...\n\n    option mirror.master        =   mars\n    option mirror.slaves        =   phobos deimos\n    option mirror.redirectOK    =   all\n\n\n\n\nThe first line is easy, since a repo can have only one master.\n\n\nThe second is a space separated list of hosts that are all slaves.  You can\nhave several slave lists, as long as the config key starts with\n'mirror.slaves' and is unique.  For example.\n\n\n\n    option mirror.slaves-1   =   phobos deimos\n    option mirror.slaves-2   =   io europa\n    option mirror.slaves-3   =   ganymede callisto\n\n\n\n\nDo not repeat a key; then only the last line for that key will be effective.\n\n\n(v3.6+)\n preventing automatic sync\n\uf0c1\n\n\nSometimes you don't want a repo to be mirrored automatically (as soon as\nsomeone pushes to the master) to all the slaves.  For whatever reasons, you\nhave some slaves for whom you would like to trigger the sync later (and you\ndon't mind the fact that those slaves are out of sync until then).\n\n\nTo make that happen, use option lines like this instead of those shown above:\n\n\n\n    option mirror.slaves.nosync-1   =   phobos deimos\n\n\n\n\nExcept for the addition of a \n.nosync\n just after \nslaves\n, all the other\nrules are the same as before.\n\n\n(v3.6.1+)\n mirroring failures\n\uf0c1\n\n\nSince mirror pushes happen asynchronously (i.e, the user who originally pushed\ndoes not have to wait for the mirrors to be synced), any mirror push failures\nare not immediately visible to a human being, although you will find them if\nyou look in gitolite's log files.\n\n\nNote: since only a successful push can clear the error status, it\nfollows that if a mirror push failed due to an invalid hostname, that status\nfile will need to be manually deleted from the server.  Look in the bare repo\ndirectory on the server, for one or more files whose names start with\n'gl-slave' and delete the appropriate one.\n\n\nTherefore, when the output of the mirror push to some slave contains the word\n\"fatal\", gitolite saves the output. This saved output is printed to STDERR\nwhen any user attempts to clone/fetch/push the repo on the master server for\nthat repo.  The hope is that someone will alert an admin to look at the\nproblem.  This will continue to happen until the error condition is cleared\n(i.e., a successful mirror push happens to that specific slave).\n\n\nIf you don't want these unexpected reports confusing users (or programs!),\nsimply create a new rc variable called HUSH_MIRROR_STATUS and set it to 1.\n\n(If you're not sure where in the rc file this should go, I suggest\nputting it right after the HOSTNAME variable).\n\n\nYou can see the mirror status of any repo using the 'mirror status' command;\nthe command line help for the mirror command ('gitolite mirror -h' or 'ssh\ngit@host mirror -h') has details.\n\n\nmanually synchronising a slave repo\n\uf0c1\n\n\nYou can use the \ngitolite mirror push\n command on a master to manually\nsynchronise any of its slaves.  Try it with \n-h\n to get usage info.\n\n\nTip: if you want to do this to all the slaves, try this:\n\n\nfor s in `gitolite mirror list slaves reponame`\ndo\n    gitolite mirror push $s reponame\ndone\n\n\n\nThis command can also be run remotely; run \nssh git@host mirror -h\n for\ndetails.\n\n\nNote: if your version of the mirror command does not support 'list slaves',\nuse \ngitolite git-config -r reponame mirror.slave | cut -f3\n instead.\n\n\nredirected pushes\n\uf0c1\n\n\nPlease read carefully; there are security implications if you enable this\nfor mirrors NOT under your control\n.\n\n\nNormally, a master, (and \nonly\n a master), pushes to a slave, and the slaves\nare \"read-only\" to the users.  Gitolite allows a \nslave\n to receive pushes\nfrom a user and transparently redirect them to the \nmaster\n.\n\n\nThis simplifies things for users in complex setups, letting them use their\nlocal mirror for both fetch and push access to all repos.\n\n\nThe syntax for enabling this is one of these:\n\n\n\n    option mirror.redirectOK    =   all\n    option mirror.redirectOK    =   phobos deimos\n\n\n\n\nThe first syntax trusts all valid slaves to redirect user pushes, while the\nsecond one trusts only some slaves.\n\n\nIMPORTANT NOTES\n\n\n\n\n\n\nThis only works for ssh-based setups; you cannot use this feature in http\n    mode.\n\n\n\n\n\n\nAuthentication\n happens on the slave, but \nauthorisation\n is on the\n    master.  The master is trusting the slave to authenticate the user\n    correctly, even though the actual push is going to the master.  This means\n    that user alice on the slave must be guaranteed to be the same as user\n    alice on the master.\n\n\n\n\n\n\nThe part of the authorisation that happens before passing control to\n    git-receive-pack (see \naccess rules\n) will happen on the slave as\n    well.\n\n\n\n\n\n\nYou cannot redirect gitolite commands (like perms, etc).\n\n\n\n\n\n\nappendix A: HOSTNAME substitution\n\uf0c1\n\n\nWherever gitolite sees the word \n%HOSTNAME\n, it will replace it with the\nHOSTNAME supplied in the rc file, if one was supplied.  This lets you maintain\nconfigurations for all servers in one repo, yet have them act differently on\ndifferent servers, by saying something like:\n\n\n\n\ninclude \n%HOSTNAME/*.conf\n\n\n\n\n\n(See \ninclude\n for more on the 'include' command).\n\n\nYou can use it in other places also, for example:\n\n\n\n\n    RW+\n     VREF/NAME/subs/%HOSTNAME/       \n=   \n@\n%\nHOSTNAME-admins\n\n\n\n\n\n(you still have to define @mars-admins, @phobos-admins, etc., but the actual\nVREF is now one line instead of one for each server!)\n\n\nappendix B: efficiency versus paranoia\n\uf0c1\n\n\nIf you're paranoid enough to use mirrors, you should be paranoid enough to\nset this on each server, despite the possible CPU overhead:\n\n\ngit config --global receive.fsckObjects true\n\n\n\nappendix C: moving the admin repo to a different master\n\uf0c1\n\n\nMoving only some repos (other than the gitolite-admin repo) to a different\nmaster is easy.  Just make the change in the gitolite.conf file, add, commit,\nand push.\n\n\nEven for the gitolite-admin repo, if the current master is ok, it's the same\nthing; just make the change and push \nto the current master\n.  Subsequent\npushes will go to the new master, of course.\n\n\nBut if the current master is already dead, there's a bit of a catch-22.  You\ncan't push to the master because it is dead, and you can't push to any slave\nbecause they won't accept updates from anywhere but the server they think is\nthe master.\n\n\nHere's how to resolve this:\n\n\n\n\n\n\nOn \neach\n slave:\n\n\n\n\n\n\nEdit \n~/.gitolite/conf/gitolite.conf\n to change the master and slave\n    options for the gitolite-admin repo.\n\n\n\n\n\n\nRun \ngitolite setup\n.\n\n\n\n\n\n\n\n\n\n\nNow clone the admin repo from the \nnew\n master to your workstation, change\n    the options for the rest of the repos (if needed), then add/commit/push.\n\n\n\n\n\n\nAnd that should be all you need to do.", 
            "title": "mirroring"
        }, 
        {
            "location": "/mirroring/#mirroring-using-gitolite", 
            "text": "v2 mirroring users:   There are  several  important differences in mirroring; it's best to start from a clean slate on all slaves , using this documentation.  If you're not willing to do that, you may be able to use the older, more\ndetailed, documentation  here  to manage the migration.  However, I\ncannot support that (mainly due to lack of time).", 
            "title": "mirroring using gitolite"
        }, 
        {
            "location": "/mirroring/#quick-intro", 
            "text": "Mirroring is simple: you have one \"master\" server and one or more \"slave\"\nservers.  The slaves get updates only from the master; to the rest of the\nworld they are at best read-only.  In the following picture, each box (A, B, C, ...) is a repo.  The master\nserver for a repo is colored red, slaves are green.  Users only push to a\nmaster server (red), and the master server then does a  git push --mirror  to\nthe slaves.  The arrows show this mirror push.   Here's a more complete description of what gitolite can do:    Different masters and sets of slaves for different repos.  This lets you do things like:   Use the server closest to  most  of its developers as the master for\n    that repo.  Mirror a repo to only some of the servers.  Have repos that are purely local to a server (not mirrored at all).  Push to a slave on demand or via cron (helps deal with bandwidth or\n    connectivity constraints).   All this is possible whether or not the gitolite-admin repo is mirrored --\nthat is, all servers have the  exact same  gitolite-admin repo or not.    Pushes to a slave can be transparently forwarded to the real master.  Your developers need not worry about where a repo's master is -- they just\nwrite to their local mirror for  all  repos, even if their local mirror is\nonly a slave for some.", 
            "title": "quick intro"
        }, 
        {
            "location": "/mirroring/#caveats", 
            "text": "Mirroring by itself will never  create  a repo on a slave; it has to exist\n    and be prepared to receive updates from the master.  The simplest way to ensure your repos exist on the slaves also is to\nmirror the special gitolite-admin repo as well, and this is what most\nsites do.    There is limited support for auto-creating wild card repos and sending\n    'perms' info across, with the following caveats at present.  (Some of this\n    text won't make sense unless you know what those features are).    WARNING : it does NOT make sense to mirror\n    wild repos in setups where the authentication data is not the same\n    (i.e., where \"alice\" on the master and \"alice\" on a slave maybe\n    totally different people) .    This has only been minimally tested.  For example, complex setups or\n    asymmetric configs on master and slave, etc. have NOT been tested.    Permission changes will only propagate on the next 'git push'.  Of\n    course, if you know the name of the slave server, you can run  ssh git@host mirror push slave-server-name repo-name    Using 'perms' on a slave is allowed but will neither propagate nor\n    persist.  They will be overwritten by whatever perms the master has\n    (even if it is an empty set) on the next 'git push'.    As with lots of extra features in gitolite, smart http support is not\n    on my radar.  Don't ask.    Please test it out and let me know if something surprising happens.  Be\naware that I have been known to claim bugs are features if I don't have\ntime to fix them immediately :-)    Mirroring is only for git repos.  Ancillary files like gl-creator and\n    gl-perms in the repo directory are not mirrored; you must do that\n    separately.  Files in the admin directory (like log files) are also not\n    mirrored.    If you ever do a  bypass push , mirroring will not work.\n    Mirroring checks also will not work -- for example, you can push to a\n    slave, which is not usually a good idea.  So don't bypass gitolite if the\n    repo is mirrored!    From v3.5.3 on, gitolite uses an asynchronous push to the slaves, so that\n    the main push returns immediately, without waiting for the slave pushes to\n    complete.  Keep this in mind if you're writing scripts that do a push, and\n    then read one of the slaves immediately -- you will need to add a few\n    seconds of sleep in your script.", 
            "title": "caveats"
        }, 
        {
            "location": "/mirroring/#setting-up-mirroring", 
            "text": "This is in two parts: the initial setup and the rc file, followed by the conf\nfile settings and syntax.", 
            "title": "setting up mirroring"
        }, 
        {
            "location": "/mirroring/#the-initial-setup-and-the-rc-file", 
            "text": "On  each  server:    Install gitolite normally.  Make clones of the server's 'gitolite-admin'\n    repo on your workstation so you can admin them all from one place.    Give the server a short, simple, \"hostname\" and set the HOSTNAME in the\n    rc file (i.e.,  ~/.gitolite.rc  on the server) to this name, for example\n    'mars'.   Note: this has nothing to do with the hostname of the server in\n    networking or DNS terms, or in OS terms.  This is internal to gitolite .    Run ssh-keygen if needed and get an ssh key pair for the server.  Copy the\n    public key to a common area and name it after the host, but with 'server-'\n    prefixed.  For example, the pubkey for server 'mars' must be stored as\n    'server-mars.pub'.    Copy all keys to all the admin repo clones on your workstation and and add\n    them as usual.  This is an  O(N^2)  operation ;-)  You may have guessed that the prefix 'server-' is special, and\ndistinguishes a human user from a mirroring peer.    Create \"host\" aliases to refer to all other machines.  See  here \n    for what/how.  The host alias for a host (in all other machines'  ~/.ssh/config  files)\nMUST be the same as the  HOSTNAME  in the referred host's ~/.gitolite.rc .  Gitolite mirroring  requires  this consistency in\nnaming; things will NOT work otherwise.  Normally you should be able to build one common file and append it to all\nthe servers'  ~/.ssh/config  files.    The following  MUST  work for  each pair  of servers that must talk to\n    each other:  # on server mars\nssh phobos info\n# the response MUST start with \"hello, server-mars...\"  Note the exact syntax used; variations like \"ssh git@phobos.example.com\ninfo\" are NOT sufficient.  That is why you need the ssh host aliases.  Check this command from  everywhere to everywhere else , and make sure you\nget expected results.   Do NOT proceed otherwise.    Setup the gitolite.conf file on all the servers.  If the slaves are to be\n    exact copies of the master, you need to do the complete configuration only\n    on the master; the slaves can have just this because on the first push to\n    the master it will update all the slaves anyway:   repo  gitolite-admin     RW+       =   some-local-admin  option mirror.master    =   mars\noption mirror.slaves    =   phobos     When that is all done and tested,  enable mirroring  by going through\n    the rc file and uncommenting all the lines mentioning  Mirroring .    If you wish to allow your users to run the mirror command remotely\n    (usually  not  required), you need to enable it just like any other\n    command that is not enabled by default; see  gitolite commands \n    for how.", 
            "title": "the initial setup and the rc file"
        }, 
        {
            "location": "/mirroring/#conf-file-settings-and-syntax", 
            "text": "Mirroring is defined by the following  options .  You can have different\nsettings for different repos, and of course some repos may not have any mirror\noptions at all -- they are then purely local.   repo  foo\n    ...access rules...\n\n    option mirror.master        =   mars\n    option mirror.slaves        =   phobos deimos\n    option mirror.redirectOK    =   all  The first line is easy, since a repo can have only one master.  The second is a space separated list of hosts that are all slaves.  You can\nhave several slave lists, as long as the config key starts with\n'mirror.slaves' and is unique.  For example.  \n    option mirror.slaves-1   =   phobos deimos\n    option mirror.slaves-2   =   io europa\n    option mirror.slaves-3   =   ganymede callisto  Do not repeat a key; then only the last line for that key will be effective.", 
            "title": "conf file settings and syntax"
        }, 
        {
            "location": "/mirroring/#v36-preventing-automatic-sync", 
            "text": "Sometimes you don't want a repo to be mirrored automatically (as soon as\nsomeone pushes to the master) to all the slaves.  For whatever reasons, you\nhave some slaves for whom you would like to trigger the sync later (and you\ndon't mind the fact that those slaves are out of sync until then).  To make that happen, use option lines like this instead of those shown above:  \n    option mirror.slaves.nosync-1   =   phobos deimos  Except for the addition of a  .nosync  just after  slaves , all the other\nrules are the same as before.", 
            "title": "(v3.6+) preventing automatic sync"
        }, 
        {
            "location": "/mirroring/#v361-mirroring-failures", 
            "text": "Since mirror pushes happen asynchronously (i.e, the user who originally pushed\ndoes not have to wait for the mirrors to be synced), any mirror push failures\nare not immediately visible to a human being, although you will find them if\nyou look in gitolite's log files.  Note: since only a successful push can clear the error status, it\nfollows that if a mirror push failed due to an invalid hostname, that status\nfile will need to be manually deleted from the server.  Look in the bare repo\ndirectory on the server, for one or more files whose names start with\n'gl-slave' and delete the appropriate one.  Therefore, when the output of the mirror push to some slave contains the word\n\"fatal\", gitolite saves the output. This saved output is printed to STDERR\nwhen any user attempts to clone/fetch/push the repo on the master server for\nthat repo.  The hope is that someone will alert an admin to look at the\nproblem.  This will continue to happen until the error condition is cleared\n(i.e., a successful mirror push happens to that specific slave).  If you don't want these unexpected reports confusing users (or programs!),\nsimply create a new rc variable called HUSH_MIRROR_STATUS and set it to 1. (If you're not sure where in the rc file this should go, I suggest\nputting it right after the HOSTNAME variable).  You can see the mirror status of any repo using the 'mirror status' command;\nthe command line help for the mirror command ('gitolite mirror -h' or 'ssh\ngit@host mirror -h') has details.", 
            "title": "(v3.6.1+) mirroring failures"
        }, 
        {
            "location": "/mirroring/#manually-synchronising-a-slave-repo", 
            "text": "You can use the  gitolite mirror push  command on a master to manually\nsynchronise any of its slaves.  Try it with  -h  to get usage info.  Tip: if you want to do this to all the slaves, try this:  for s in `gitolite mirror list slaves reponame`\ndo\n    gitolite mirror push $s reponame\ndone  This command can also be run remotely; run  ssh git@host mirror -h  for\ndetails.  Note: if your version of the mirror command does not support 'list slaves',\nuse  gitolite git-config -r reponame mirror.slave | cut -f3  instead.", 
            "title": "manually synchronising a slave repo"
        }, 
        {
            "location": "/mirroring/#redirected-pushes", 
            "text": "Please read carefully; there are security implications if you enable this\nfor mirrors NOT under your control .  Normally, a master, (and  only  a master), pushes to a slave, and the slaves\nare \"read-only\" to the users.  Gitolite allows a  slave  to receive pushes\nfrom a user and transparently redirect them to the  master .  This simplifies things for users in complex setups, letting them use their\nlocal mirror for both fetch and push access to all repos.  The syntax for enabling this is one of these:  \n    option mirror.redirectOK    =   all\n    option mirror.redirectOK    =   phobos deimos  The first syntax trusts all valid slaves to redirect user pushes, while the\nsecond one trusts only some slaves.  IMPORTANT NOTES    This only works for ssh-based setups; you cannot use this feature in http\n    mode.    Authentication  happens on the slave, but  authorisation  is on the\n    master.  The master is trusting the slave to authenticate the user\n    correctly, even though the actual push is going to the master.  This means\n    that user alice on the slave must be guaranteed to be the same as user\n    alice on the master.    The part of the authorisation that happens before passing control to\n    git-receive-pack (see  access rules ) will happen on the slave as\n    well.    You cannot redirect gitolite commands (like perms, etc).", 
            "title": "redirected pushes"
        }, 
        {
            "location": "/mirroring/#appendix-a-hostname-substitution", 
            "text": "Wherever gitolite sees the word  %HOSTNAME , it will replace it with the\nHOSTNAME supplied in the rc file, if one was supplied.  This lets you maintain\nconfigurations for all servers in one repo, yet have them act differently on\ndifferent servers, by saying something like:   include  %HOSTNAME/*.conf   (See  include  for more on the 'include' command).  You can use it in other places also, for example:       RW+      VREF/NAME/subs/%HOSTNAME/        =    @ % HOSTNAME-admins   (you still have to define @mars-admins, @phobos-admins, etc., but the actual\nVREF is now one line instead of one for each server!)", 
            "title": "appendix A: HOSTNAME substitution"
        }, 
        {
            "location": "/mirroring/#appendix-b-efficiency-versus-paranoia", 
            "text": "If you're paranoid enough to use mirrors, you should be paranoid enough to\nset this on each server, despite the possible CPU overhead:  git config --global receive.fsckObjects true", 
            "title": "appendix B: efficiency versus paranoia"
        }, 
        {
            "location": "/mirroring/#appendix-c-moving-the-admin-repo-to-a-different-master", 
            "text": "Moving only some repos (other than the gitolite-admin repo) to a different\nmaster is easy.  Just make the change in the gitolite.conf file, add, commit,\nand push.  Even for the gitolite-admin repo, if the current master is ok, it's the same\nthing; just make the change and push  to the current master .  Subsequent\npushes will go to the new master, of course.  But if the current master is already dead, there's a bit of a catch-22.  You\ncan't push to the master because it is dead, and you can't push to any slave\nbecause they won't accept updates from anywhere but the server they think is\nthe master.  Here's how to resolve this:    On  each  slave:    Edit  ~/.gitolite/conf/gitolite.conf  to change the master and slave\n    options for the gitolite-admin repo.    Run  gitolite setup .      Now clone the admin repo from the  new  master to your workstation, change\n    the options for the rest of the repos (if needed), then add/commit/push.    And that should be all you need to do.", 
            "title": "appendix C: moving the admin repo to a different master"
        }, 
        {
            "location": "/non-core/", 
            "text": "\"non-core\" gitolite\n\uf0c1\n\n\n\n\nMuch of gitolite's functionality comes from programs and scripts that are not\nconsidered \"core\".  This keeps the core simpler, and allows you to enhance\ngitolite for your own site without too much fuss.\n\n\nDocumentation for non-core gitolite is organised as follows:\n\n\n\n\n\n\nThis page describes the types of non-core programs and how/where to\n    install code that is specific to your site.\n\n\n\n\n\n\nThe \ndeveloper notes\n page tells you how to write your own\n    non-core programs.\n\n\n\n\n\n\nThe \nlist of non-core programs\n talks about what's already\n    shipped with gitolite, with a brief description of each.\n\n\n\n\n\n\n\n\ncore versus non-core\n\uf0c1\n\n\nGitolite has five types of non-core code:\n\n\n\n\nCommands\n can be run from the shell command line.  Among those, the ones\n    in the ENABLE list in the rc file can also be run remotely.\n\n\nHooks\n are standard git hooks.\n\n\nSugar scripts\n change the conf language for your convenience.  The word\n    sugar comes from \"syntactic sugar\".\n\n\nTriggers\n are to gitolite what hooks are to git.  I just chose a\n    different name to avoid confusion and constant disambiguation in the docs.\n\n\nVREFs\n are extensions to the access control check part of gitolite.\n\n\n\n\nlocations...\n\uf0c1\n\n\n...for non-core programs shipped with gitolite\n\uf0c1\n\n\n\n.\n\u251c\u2500\u2500 \ncommands\n\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Gitolite\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 \nConf\n\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 \nHooks\n\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 \nTest\n\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 \nTriggers\n\n\u251c\u2500\u2500 \nsyntactic-sugar\n\n\u251c\u2500\u2500 \ntriggers\n\n\u2514\u2500\u2500 \nVREF\n\n\n\n\n\ngitolite query-rc GL_BINDIR\n will tell you where gitolite's code has been\ninstalled.  That directory should look like this.\n\n\nAmong these, the directories in green are considered \"non-core\", while the\nones in red are considered \"core\".  In addition, the two files \"gitolite\" and\n\"gitolite-shell\" in src are also considered \"core\"\n\n\nYou might notice that there are two locations for \ntriggers\n; that is simply\nbecause there are two types of them.  You might also notice that there is no\nplace for hooks -- gitolite doesn't \nship\n with any hooks that are non-core.\n\n\n...for \nyour\n non-core programs\n\uf0c1\n\n\n\n.\n\u251c\u2500\u2500 \ncommands\n\n\u251c\u2500\u2500 hooks\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ncommon\n\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \nrepo-specific\n\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Gitolite\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 \nTriggers\n\n\u251c\u2500\u2500 \nsyntactic-sugar\n\n\u251c\u2500\u2500 \ntriggers\n\n\u2514\u2500\u2500 \nVREF\n\n\n\n\n\nIf you want to add your own non-core programs, or even \noverride\n the shipped\nones with your own, you can.\n\n\nPut your programs in some convenient directory and use the \nLOCAL_CODE\n rc\nvariable to tell gitolite where that is.  \nPlease supply the FULL path\n to\nthis variable.  (You'll find the rc file already has examples lines, commented\nout, so it's easy to know where to put it and what syntax to use).\n\n\nWithin that directory, you can use any or all of the subdirectories shown\nhere.\n\n\nIf you add a program in your local code directory with the same name as a\nshipped program, gitolite uses your version.\n\n\nNotice that there are two directories related to hooks\nhere, neither of which exist in the shipped non-core code.  Also, the\n\nhooks/common\n directory is a bit special.  If you add new hooks to this, you\nmust run \ngitolite setup\n, or at least \ngitolite setup --hooks-only\n, for it\nto take effect.\n\n\nusing the gitolite-admin repo to manage non-core code\n\uf0c1\n\n\n\n\nImportant security note:\n\n\nIn this mode, anyone who can push changes to the admin repo will\neffectively be able to run any arbitrary command on the server.\n  See\n\ngitolite admin and shell access\n for more background.\n\n\n\n\nThe location given in \nLOCAL_CODE\n could be anywhere on disk, like say\n\n$ENV{HOME}/local\n.\n\n\nHowever, some administrators find it convenient to use the admin repo to\nmanage this code as well, getting the benefits of versioning them as well as\nmaking changes to them without having to log on to the server.\n\n\nTo do this, simply point \nLOCAL_CODE\n to someplace inside \n$GL_ADMIN_BASE\n in\nthe rc file.  I \nstrongly\n suggest:\n\n\n\n\nLOCAL_CODE\n  =\n  \n$rc\n{\nGL_ADMIN_BASE\n}\n/local\n,\n\n\n\n\nThen you create a directory called \"local\" in your gitolite clone, and create\nthe directory structure (shown in the previous section) within that directory.\nThus, when you push the admin repo, the files will land up, with the correct\npaths, in the location pointed to by LOCAL_CODE.\n\n\n(Note: when you do this, gitolite takes care of running \ngitolite setup --hooks-only\n when you change any hooks and push).\n\n\ntypes of non-core programs\n\uf0c1\n\n\ngitolite \"commands\"\n\uf0c1\n\n\nGitolite comes with several commands that users can run.  Remote users run\ncommands by saying:\n\n\nssh git@host command [args...]\n\n\n\nwhile on the server you can run\n\n\ngitolite command [args...]\n\n\n\nVery few commands are designed to be run both ways, but it can be done, by\nchecking for the presence of env var \nGL_USER\n.\n\n\nAll commands respond to a single \n-h\n option with a suitable message.\n\n\nYou can get a \nlist of available commands\n by using the \nhelp\n command.\nNaturally, a remote user will see a much smaller list than the server user.\n\n\nYou allow a command to be run from remote clients by adding its name to (or\nuncommenting it if it's already added but commented out) the ENABLE list in\nthe \nrc\n file.\n\n\nhooks and gitolite\n\uf0c1\n\n\nYou can install any hooks except these:\n\n\n\n\n\n\n(all repos) Gitolite reserves the \nupdate\n hook.  See the \"hooks\" section\n    in \ndev-notes\n if you want additional update hook\n    functionality.\n\n\n\n\n\n\n(gitolite-admin repo only) Gitolite reserves the \npost-update\n hook.\n\n\n\n\n\n\nHow/where to install them is described in detail in the \"locations\" section\nabove, especially \nthis\n and \nthis\n.  The summary is that\nyou put them in the \"hooks/common\" sub-directory within the directory whose\nname is given in the \nLOCAL_CODE\n rc variable, then run \ngitolite setup\n.\n\n\nrepo-specific hooks\n\uf0c1\n\n\n\n\nImportant security note:\n\n\nIf you enable this, anyone who can push changes to the admin repo will\neffectively be able to run any arbitrary command on the server.\n  See\n\ngitolite admin and shell access\n for more background.\n\n\n\n\nIf you want to add hooks only to specific repos, you can just do it manually\nif you wish -- just log on to the server and add hooks (except the update hook\nand, for the special gitolite-admin repo, the post-update hook -- touch these\nand all bets on gitolite's functionality are off).\n\n\nHowever, if you want to do that from within gitolite, and thus keep everything\ntogether, you can do that also.  Here's how.\n\n\n\n\n\n\nCreate a directory called \nhooks/repo-specific\n in whatever location you\n    decided to use for your non-core code (i.e., direct on the server, or\n    within the gitolite-admin repo).\n\n\n\n\n\n\nAdd your hooks here, with descriptive names (i.e., not \"post-receive\",\n    etc., but maybe \"jenkins\" or \"deploy\" or whatever).\n\n\n\n\nAs of v3.6.7, you can also put them in subdirectories for convenience\n    (like if you have too many repo specific hooks).  For instance, you\n    could put some hook code in \nfoo/bar\n; the symlink in the repo's hooks\n    directory will be created as if you had called it \nfoo_bar\n.\n\n\n\n\n\n\n\n\nUncomment the 'repo-specific-hooks' line in the rc file or add it to the\n    ENABLE list if it doesn't exist.\n\n\nIf your rc file does not have an ENABLE list, you need to add this to the\nPOST_COMPILE and the POST_CREATE lists.  Click \nhere\n for more on\nall this.\n\n\n\n\n\n\nNow add lines like this to your conf file:\n\n\n\n\nrepo \n   foo\n    option hook.post-receive    =   deploy\n\n\n\nThe syntax should be fairly obvious, but just to be clear, in this case a\nsymlink called \"post-receive\" will be placed in foo.git/hooks, pointing to\nthe executable called \"deploy\" in hooks/repo-specific in the local-code\narea.\n\n\nWARNING\n: if the hook already exists, it is silently overwritten.\n\n\nWARNING\n: \n(v3.5.x or below)\n once the hook is placed, you can't remove it through\ngitolite.  That is, removing the option line won't do anything.  You'll\nhave to go to the server and remove it manually.\n\n\n\n\n\n\n(v3.6+)\n You can assign multiple targets for each hook.  For\n    example, you could say\n\n\n\n\nrepo \n   foo\n    option hook.post-receive    =   deploy mail-admins\n\n\n\nwhere \"deploy\" and \"mail-admins\" are pieces of code that do whatever their\nnames suggest, and both are, independently, candidates for being run from\na post-receive hook.\n\n\nWhen you do this, gitolite does whatever is needed to run each of them as\nindependent post-receive hooks (including sending them info over their\nSTDIN as documented in 'man githooks').\n\n\nFor pre-receive or pre-auto-gc you should not use more than one hook.\nIf you really need more than one, ask on the mailing list.\n\n\n\n\n\n\n(v3.6+)\n You can change these hooks by saying:\n\n\n\n\nrepo \n   foo\n    option hook.post-receive    =   deploy mail-admins\n\n\n\nor delete all of them by saying:\n\n\n\n\nrepo \n   foo\n    option hook.post-receive    =   \n\n\n\n\n\n\n\n\n(v3.6.5+)\n You can add hooks incrementally.  For example:\n\n\n\n\nrepo \n   \n@all\n\n    option hook.post-receive.00 =   mail-admins\n    option hook.post-receive.01 =   deploy\n\n# (and later)\n\n\nrepo \n   foo\n    option hook.post-receive.00 =   mail-users     \n #1\n\n    option hook.post-receive.01 =   \n             \n #2\n\n\n# (and maybe still later)\n\n\nrepo \n   \n@foss\n\n    option hook.post-receive.02 =   save-push-sigs\n\n\n\nAssuming \nfoo\n is a member of \n@foss\n, this declares 2 post-receive hooks\nfor it: mail-users and save-push-sigs.  The suffix (in this example, \"00\",\n\"01\") can actually be any simple word.  Using a suffix keeps the option\nnames unique, which allows you to override or delete specific options, as\nwe did in the lines marked '#1' and '#2'.  The suffix also determines the\norder in which the options are used in applying hooks to the repo.  If the\norder doesn't matter to you, just make sure they're unique.\n\n\n\n\n\n\nsyntactic sugar\n\uf0c1\n\n\nSugar scripts help you change the perceived syntax of the conf language.  The\nbase syntax of the language is very simple, so sugar scripts take something\n\nelse\n and convert it into that.\n\n\nThat way, the admin sees additional features (like allowing continuation\nlines), while the parser in the core gitolite engine does not change.\n\n\nIf you want to write your own sugar scripts, please read the \"your own sugar\"\nsection in \ndev-notes\n first then email me.\n\n\nYou enable a sugar script by uncommenting the feature name in the ENABLE list\nin the rc file.\n\n\ntriggers\n\uf0c1\n\n\nTriggers have their own \npage\n.\n\n\nVREFs\n\uf0c1\n\n\nVREFs also have their own \npage\n.", 
            "title": "core and \"non-core\" gitolite"
        }, 
        {
            "location": "/non-core/#non-core-gitolite", 
            "text": "Much of gitolite's functionality comes from programs and scripts that are not\nconsidered \"core\".  This keeps the core simpler, and allows you to enhance\ngitolite for your own site without too much fuss.  Documentation for non-core gitolite is organised as follows:    This page describes the types of non-core programs and how/where to\n    install code that is specific to your site.    The  developer notes  page tells you how to write your own\n    non-core programs.    The  list of non-core programs  talks about what's already\n    shipped with gitolite, with a brief description of each.", 
            "title": "\"non-core\" gitolite"
        }, 
        {
            "location": "/non-core/#core-versus-non-core", 
            "text": "Gitolite has five types of non-core code:   Commands  can be run from the shell command line.  Among those, the ones\n    in the ENABLE list in the rc file can also be run remotely.  Hooks  are standard git hooks.  Sugar scripts  change the conf language for your convenience.  The word\n    sugar comes from \"syntactic sugar\".  Triggers  are to gitolite what hooks are to git.  I just chose a\n    different name to avoid confusion and constant disambiguation in the docs.  VREFs  are extensions to the access control check part of gitolite.", 
            "title": "core versus non-core"
        }, 
        {
            "location": "/non-core/#locations", 
            "text": "", 
            "title": "locations..."
        }, 
        {
            "location": "/non-core/#for-non-core-programs-shipped-with-gitolite", 
            "text": ".\n\u251c\u2500\u2500  commands \n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Gitolite\n\u2502\u00a0\u00a0     \u251c\u2500\u2500  Conf \n\u2502\u00a0\u00a0     \u251c\u2500\u2500  Hooks \n\u2502\u00a0\u00a0     \u251c\u2500\u2500  Test \n\u2502\u00a0\u00a0     \u2514\u2500\u2500  Triggers \n\u251c\u2500\u2500  syntactic-sugar \n\u251c\u2500\u2500  triggers \n\u2514\u2500\u2500  VREF   gitolite query-rc GL_BINDIR  will tell you where gitolite's code has been\ninstalled.  That directory should look like this.  Among these, the directories in green are considered \"non-core\", while the\nones in red are considered \"core\".  In addition, the two files \"gitolite\" and\n\"gitolite-shell\" in src are also considered \"core\"  You might notice that there are two locations for  triggers ; that is simply\nbecause there are two types of them.  You might also notice that there is no\nplace for hooks -- gitolite doesn't  ship  with any hooks that are non-core.", 
            "title": "...for non-core programs shipped with gitolite"
        }, 
        {
            "location": "/non-core/#for-your-non-core-programs", 
            "text": ".\n\u251c\u2500\u2500  commands \n\u251c\u2500\u2500 hooks\n\u2502\u00a0\u00a0 \u2514\u2500\u2500  common \n\u2502\u00a0\u00a0 \u2514\u2500\u2500  repo-specific \n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Gitolite\n\u2502\u00a0\u00a0     \u2514\u2500\u2500  Triggers \n\u251c\u2500\u2500  syntactic-sugar \n\u251c\u2500\u2500  triggers \n\u2514\u2500\u2500  VREF   If you want to add your own non-core programs, or even  override  the shipped\nones with your own, you can.  Put your programs in some convenient directory and use the  LOCAL_CODE  rc\nvariable to tell gitolite where that is.   Please supply the FULL path  to\nthis variable.  (You'll find the rc file already has examples lines, commented\nout, so it's easy to know where to put it and what syntax to use).  Within that directory, you can use any or all of the subdirectories shown\nhere.  If you add a program in your local code directory with the same name as a\nshipped program, gitolite uses your version.  Notice that there are two directories related to hooks\nhere, neither of which exist in the shipped non-core code.  Also, the hooks/common  directory is a bit special.  If you add new hooks to this, you\nmust run  gitolite setup , or at least  gitolite setup --hooks-only , for it\nto take effect.", 
            "title": "...for your non-core programs"
        }, 
        {
            "location": "/non-core/#using-the-gitolite-admin-repo-to-manage-non-core-code", 
            "text": "Important security note:  In this mode, anyone who can push changes to the admin repo will\neffectively be able to run any arbitrary command on the server.   See gitolite admin and shell access  for more background.   The location given in  LOCAL_CODE  could be anywhere on disk, like say $ENV{HOME}/local .  However, some administrators find it convenient to use the admin repo to\nmanage this code as well, getting the benefits of versioning them as well as\nmaking changes to them without having to log on to the server.  To do this, simply point  LOCAL_CODE  to someplace inside  $GL_ADMIN_BASE  in\nthe rc file.  I  strongly  suggest:   LOCAL_CODE   =    $rc { GL_ADMIN_BASE } /local ,  Then you create a directory called \"local\" in your gitolite clone, and create\nthe directory structure (shown in the previous section) within that directory.\nThus, when you push the admin repo, the files will land up, with the correct\npaths, in the location pointed to by LOCAL_CODE.  (Note: when you do this, gitolite takes care of running  gitolite setup --hooks-only  when you change any hooks and push).", 
            "title": "using the gitolite-admin repo to manage non-core code"
        }, 
        {
            "location": "/non-core/#types-of-non-core-programs", 
            "text": "", 
            "title": "types of non-core programs"
        }, 
        {
            "location": "/non-core/#gitolite-commands", 
            "text": "Gitolite comes with several commands that users can run.  Remote users run\ncommands by saying:  ssh git@host command [args...]  while on the server you can run  gitolite command [args...]  Very few commands are designed to be run both ways, but it can be done, by\nchecking for the presence of env var  GL_USER .  All commands respond to a single  -h  option with a suitable message.  You can get a  list of available commands  by using the  help  command.\nNaturally, a remote user will see a much smaller list than the server user.  You allow a command to be run from remote clients by adding its name to (or\nuncommenting it if it's already added but commented out) the ENABLE list in\nthe  rc  file.", 
            "title": "gitolite \"commands\""
        }, 
        {
            "location": "/non-core/#hooks-and-gitolite", 
            "text": "You can install any hooks except these:    (all repos) Gitolite reserves the  update  hook.  See the \"hooks\" section\n    in  dev-notes  if you want additional update hook\n    functionality.    (gitolite-admin repo only) Gitolite reserves the  post-update  hook.    How/where to install them is described in detail in the \"locations\" section\nabove, especially  this  and  this .  The summary is that\nyou put them in the \"hooks/common\" sub-directory within the directory whose\nname is given in the  LOCAL_CODE  rc variable, then run  gitolite setup .", 
            "title": "hooks and gitolite"
        }, 
        {
            "location": "/non-core/#repo-specific-hooks", 
            "text": "Important security note:  If you enable this, anyone who can push changes to the admin repo will\neffectively be able to run any arbitrary command on the server.   See gitolite admin and shell access  for more background.   If you want to add hooks only to specific repos, you can just do it manually\nif you wish -- just log on to the server and add hooks (except the update hook\nand, for the special gitolite-admin repo, the post-update hook -- touch these\nand all bets on gitolite's functionality are off).  However, if you want to do that from within gitolite, and thus keep everything\ntogether, you can do that also.  Here's how.    Create a directory called  hooks/repo-specific  in whatever location you\n    decided to use for your non-core code (i.e., direct on the server, or\n    within the gitolite-admin repo).    Add your hooks here, with descriptive names (i.e., not \"post-receive\",\n    etc., but maybe \"jenkins\" or \"deploy\" or whatever).   As of v3.6.7, you can also put them in subdirectories for convenience\n    (like if you have too many repo specific hooks).  For instance, you\n    could put some hook code in  foo/bar ; the symlink in the repo's hooks\n    directory will be created as if you had called it  foo_bar .     Uncomment the 'repo-specific-hooks' line in the rc file or add it to the\n    ENABLE list if it doesn't exist.  If your rc file does not have an ENABLE list, you need to add this to the\nPOST_COMPILE and the POST_CREATE lists.  Click  here  for more on\nall this.    Now add lines like this to your conf file:   repo     foo\n    option hook.post-receive    =   deploy  The syntax should be fairly obvious, but just to be clear, in this case a\nsymlink called \"post-receive\" will be placed in foo.git/hooks, pointing to\nthe executable called \"deploy\" in hooks/repo-specific in the local-code\narea.  WARNING : if the hook already exists, it is silently overwritten.  WARNING :  (v3.5.x or below)  once the hook is placed, you can't remove it through\ngitolite.  That is, removing the option line won't do anything.  You'll\nhave to go to the server and remove it manually.    (v3.6+)  You can assign multiple targets for each hook.  For\n    example, you could say   repo     foo\n    option hook.post-receive    =   deploy mail-admins  where \"deploy\" and \"mail-admins\" are pieces of code that do whatever their\nnames suggest, and both are, independently, candidates for being run from\na post-receive hook.  When you do this, gitolite does whatever is needed to run each of them as\nindependent post-receive hooks (including sending them info over their\nSTDIN as documented in 'man githooks').  For pre-receive or pre-auto-gc you should not use more than one hook.\nIf you really need more than one, ask on the mailing list.    (v3.6+)  You can change these hooks by saying:   repo     foo\n    option hook.post-receive    =   deploy mail-admins  or delete all of them by saying:   repo     foo\n    option hook.post-receive    =        (v3.6.5+)  You can add hooks incrementally.  For example:   repo      @all \n    option hook.post-receive.00 =   mail-admins\n    option hook.post-receive.01 =   deploy # (and later)  repo     foo\n    option hook.post-receive.00 =   mail-users       #1 \n    option hook.post-receive.01 =                   #2  # (and maybe still later)  repo      @foss \n    option hook.post-receive.02 =   save-push-sigs  Assuming  foo  is a member of  @foss , this declares 2 post-receive hooks\nfor it: mail-users and save-push-sigs.  The suffix (in this example, \"00\",\n\"01\") can actually be any simple word.  Using a suffix keeps the option\nnames unique, which allows you to override or delete specific options, as\nwe did in the lines marked '#1' and '#2'.  The suffix also determines the\norder in which the options are used in applying hooks to the repo.  If the\norder doesn't matter to you, just make sure they're unique.", 
            "title": "repo-specific hooks"
        }, 
        {
            "location": "/non-core/#syntactic-sugar", 
            "text": "Sugar scripts help you change the perceived syntax of the conf language.  The\nbase syntax of the language is very simple, so sugar scripts take something else  and convert it into that.  That way, the admin sees additional features (like allowing continuation\nlines), while the parser in the core gitolite engine does not change.  If you want to write your own sugar scripts, please read the \"your own sugar\"\nsection in  dev-notes  first then email me.  You enable a sugar script by uncommenting the feature name in the ENABLE list\nin the rc file.", 
            "title": "syntactic sugar"
        }, 
        {
            "location": "/non-core/#triggers", 
            "text": "Triggers have their own  page .", 
            "title": "triggers"
        }, 
        {
            "location": "/non-core/#vrefs", 
            "text": "VREFs also have their own  page .", 
            "title": "VREFs"
        }, 
        {
            "location": "/dev-notes/", 
            "text": "writing your own \"non-core\" programs\n\uf0c1\n\n\n\n\nThis page is about \nwriting\n hooks, commands, triggers, VREFS, and sugar\nscripts.  \nInstalling\n them, including \"where and how\", is described\n\nhere\n.\n\n\nNote: the \nnon-core\n page is the starting point for all information about\ncustomising gitolite.\n\n\nenvironment variables and other inputs\n\uf0c1\n\n\nIn general, the following environment variables should always be available:\n\n\nGL_BINDIR\nGL_REPO_BASE\nGL_ADMIN_BASE\n\n\n\nGL_BINDIR\n is loosely equivalent to GIT_EXEC_PATH in git.  \nGL_REPO_BASE\n\nis always \n$HOME/repositories\n, and \nGL_ADMIN_BASE\n is \n$HOME/.gitolite\n.\n(You might ask why, if they're fixed values, do we need those variables.  Good\nquestion... next!)\n\n\nIn addition, commands invoked by a remote client also have \nGL_USER\n, while\nhooks have \nGL_USER\n as well as \nGL_REPO\n (which is the \nlogical\nreponame\n).\n\n\nA special form of the \noption\n syntax can be used to set\n\nrepo-specific environment variables\n.\n\n\nFinally, note that triggers get a lot of relevant information from gitolite as\narguments; see \nhere\n for details.\n\n\nAPIs\n\uf0c1\n\n\nthe shell API\n\uf0c1\n\n\nThe following commands exist to help you write shell scripts that interact\neasily with gitolite.  Each of them responds to \n-h\n so please run that for\nmore info.\n\n\n\n\n\n\ngitolite access\n to check access rights given repo, user, type of access\n    (R, W, ...) and refname (optional).  Example use: src/commands/desc.\n\n\n\n\n\n\ngitolite creator\n to get/check the creator of a repo.  Example use:\n    src/commands/desc.\n\n\n\n\n\n\ngitolite git-config\n to check gitolite options or git config variables\n    directly from gitolite's \"compiled\" output, (i.e., without looking at the\n    actual \nrepo.git/config\n file or using the \ngit config\n command).  Example\n    use: src/triggers/post-compile/update-gitweb-access-list.\n\n\n\n\n\n\ngitolite query-rc\n to check the value of an RC variable.  Example use:\n    src/commands/desc.\n\n\n\n\n\n\nIn addition, you can also look at the comments in src/lib/Gitolite/Easy.pm\n(the perl API module) for ideas.\n\n\nthe perl API\n\uf0c1\n\n\n...is implemented by \nGitolite::Easy\n; the comments in\nsrc/lib/Gitolite/Easy.pm serve as documentation.\n\n\nNote that some of the perl functions called by Easy.pm will change the current\ndirectory to something else, without saving and restoring the directory.\nPatches (to Easy.pm \nonly\n) welcome.\n\n\nwriting your own...\n\uf0c1\n\n\n...commands\n\uf0c1\n\n\nCommands are standalone programs, in any language you like.  They simply\nreceive the arguments you append.  In addition, the env var \nGL_USER\n is\navailable if it is being run remotely.  src/commands/desc is the best example\nat present.\n\n\n...hooks\n\uf0c1\n\n\nanything but the update hook\n\uf0c1\n\n\nIf you want to add any hook other than the update hook, 'man githooks' is all\nyou need.\n\n\nupdate hook\n\uf0c1\n\n\nIf you want to add additional \nupdate\n hook functionality, do this:\n\n\n\n\n\n\nWrite and test your update hook separately from gitolite.\n\n\n\n\n\n\nNow add the code as a VREF (see \nhere\n for details).  Let's say\n    you called it \"foo\".\n\n\n\n\n\n\nTo call your new update hook to all accesses for all repos, add this to\n    the end of your conf file:\n\n\n\n\nrepo \n@all\n\n\n    -\n       VREF/foo        \n=\n   @all\n\n\n\n\n\n\n\n\nAs you probably guessed, you can make your additional update hooks more\nselective, applying them only to some repos / users / combinations.\n\n\nNote: a normal update hook expects 3 arguments (ref, old SHA, new SHA).  A\nVREF will get those three, followed by at least 4 more.  Your VREF should just\nignore the extra args.\n\n\n...trigger programs\n\uf0c1\n\n\nTrigger programs run at specific points in gitolite's execution, with specific\narguments being passed to them.  See the \ntriggers\n page for details.\n\n\nYou can write programs that are both manually runnable as well as callable by\ntrigger events, especially if they don't \nneed\n any arguments.\n\n\n...\"sugar\"\n\uf0c1\n\n\nSyntactic sugar helpers are NOT complete, standalone, programs.  They must\ninclude a perl sub called \nsugar_script\n that takes in a listref, and returns\na listref.  The listrefs point to a list that contains the entire conf file\n(with all \ninclude\n processing already done).  You create a new list with\ncontents modified as you like and return a ref to it.\n\n\nThere are a couple of examples in src/syntactic-sugar.\n\n\nappendix 1: repo-specific environment variables\n\uf0c1\n\n\nA special form of the \noption\n syntax can be used to set\nrepo-specific environment variables that are visible to gitolite triggers and\nany git hooks you may install.\n\n\nFor example, let's say you installed a post-update hook that initiates a CI\njob.  By default, of course, this hook will be active for \nall\n\ngitolite-managed repos.  However, you only want it to run for some specific\nrepos, say r1, r2, and r4.\n\n\nTo do that, first add this to the gitolite.conf:\n\n\n\n\nrepo \nr1 r2 r4\n    option ENV.CI = 1\n\n\n\n\nThis creates an environment variable called \nGL_OPTION_CI\n with the value 1,\nbefore any trigger or hook is invoked.\n\n\nNote: option names \nmust\n start with \nENV.\n, followed by a seqence of\ncharacters composed of alphas, numbers, and the underscore character.\n\n\nNow the hook running the CI job can easily decide what to do:\n\n\n# exit if $GL_OPTION_CI is not set\n[ -z $GL_OPTION_CI ] \n exit\n\n... rest of CI job code as before ...\n\n\n\nOf course you can also do the opposite; i.e. decide that the listed repos\nshould \nnot\n run the CI job but all other repos should:\n\n\n\n\nrepo \n@all\n\n    option ENV.CI = 1\n\n\nrepo \nr1 r2 r4\n    option ENV.CI = \n\n\n\n\n\n(The hook code remains the same as before.)\n\n\nBefore this feature was added, you could still do this, by\nusing the \ngitolite git-config\n command inside the hook code to test for\noptions and configs set for the repo, like:\n\n\nif gitolite git-config -q reponame gitolite-options.option-name\nthen\n    ...\n\n\n\nThe new method is much more convenient, as you can see.\n\n\nappendix 2: log file format\n\uf0c1\n\n\nHere's a brief description of gitolite's log file format.  All fields are tab\nseparated.\n\n\nThere are two kinds of lines in the log file:\n\n\n\n\n\n\nthird field non-empty: actual log lines.  These are documented below.\n\n\n\n\n\n\nthird field empty (i.e., two tabs after the second field): extra output to\n    help diagnose problems. These are NOT documented and may change without\n    notice.  They can be turned off completely by setting the RC variable\n    \nLOG_EXTRA\n to 0.\n\n\n\n\n\n\nFor all types of log lines, the first two fields are:\n\n\n\n\n\n\nfield 1: local time, in \nYYYY-MM-DD.HH:MM:SS\n format\n\n\n\n\n\n\nfield 2: transaction ID or \"TID\".  This is actually the PID of the\n    outermost command that was initiated (usually \"gitolite-shell\").  It helps\n    to keep log lines pertaining to one \"run\" together, even if several\n    sub-commands are spawned (like for example from triggers, or even the\n    update hook itself).\n\n\n\n\n\n\nThe third and later fields are all dependent on what type of log line it is.\n\n\nThe various log line formats are:\n\n\n\n\n\n\nstart\n\n\nThis line denotes the beginning of a gitolite operation.\n\n\n\n\n\n\nfield 3: 'ssh' or 'http'\n\n\n\n\n\n\nfield 4: \nARGV=\ncomma-separated list of command line arguments\n\n\nUsually this is just the gitolite username (the argument to\ngitolite-shell, as supplied by the forced command in the authorized\nkeys file).  If you're \ngiving shell access\n to some\nusers, this would be \n-s,username\n.  That's two command line arguments\n(\"-s\" and the username), comma separated.\n\n\n\n\n\n\nfield 5: \nSOC=\noriginal command from client\n\n\nThis is the command exactly as the git client sent it, or the user\ntyped it.  Typically this is one of these:\n\n\ngit-upload-pack 'reponame'\ngit-receive-pack 'reponame'\n\n\n\n(including the single quotes, because that's what the client sent).\n\n\nGitolite commands are also recorded as is, so this could be something\nlike \ninfo\n or perhaps \nperms -l reponame\n etc.\n\n\n\n\n\n\nfield 6: \nFROM=\nip address\n\n\n\n\n\n\n\n\n\n\npre-git\n\n\nThis log line appears when the first access check succeeds (i.e., before\ngit-upload-pack or git-receive-pack is called).\n\n\n\n\nfield 3: 'pre_git'\n\n\nfield 4: reponame\n\n\nfield 5: username\n\n\nfield 6: 'R' or 'W'\n\n\nfield 7: 'any'\n\n\nfield 8: the refex that allowed access\n\n\n\n\n\n\n\n\nupdate\n\n\nThis log line appears when the second access check succeeds (i.e., when\nthe update hook decides to allow the push).\n\n\n\n\nfield 3: 'update'\n\n\nfield 4: reponame\n\n\nfield 5: username\n\n\nfield 6: 'W', '+', 'C', 'D', 'WM', '+M', 'CM', or 'DM'\n\n\nfield 7: ref name (like 'refs/heads/master')\n\n\nfield 8: old SHA\n\n\nfield 9: new SHA\n\n\nfield 10: the refex that allowed access\n\n\n\n\nThe values in field 6 reflect the possible \nwrite types\n, but\nnote that there is a difference between what the log file contains and\nwhat the gitolite.conf file contains (e.g., \n+\n versus \nRW+\n).  There's\nanother subtle difference for those who are not thinking clearly: the\n\nRW+\n in the conf file is a permission, but it would show up as a \n+\n in\nthe log file only if an \nactual\n force push had happened, otherwise it\nwould be just \nW\n.\n\n\nBy the way, notice that fields 7 to 9 are exactly what git itself supplies\nthe update hook (see 'man githooks').\n\n\nThere is a special version of this line that appears\nwhen someone \nbypasses\n gitolite's access control to push directly\non the server.  The 'reponame' (field 4) is replaced by the full path of\nthe repo being pushed to, the username (field 5) is replaced by the Unix\nuserid in parentheses, and the operation code (field 6) is\n'bypass'.\n\n\n\n\n\n\ncreate\n\n\nThis log line appears when a wild repo was auto-created by a user.\n\n\n\n\nfield 3: 'create'\n\n\nfield 4: reponame\n\n\nfield 5: username\n\n\nfield 6: 'R' or 'W'\n\n\n\n\nField 6 is 'perms-c' if the wild repo is created using the perms command's\n'-c' option.\n\n\n\n\n\n\nend\n\n\nThis indicates the end of the transaction.  Normally, you should not see\nany more lines with the same TID after this line.\n\n\n\n\nfield 3: 'END'\n\n\n\n\n\n\n\n\nwarnings\n and \nerrors\n\n\nTypically seen when access is denied.\n\n\n\n\nfield 3: 'warn' or 'die'\n\n\nfield 4: message.  Parts of the message (like reponame, username, etc)\n    are not split out into fields, though.\n\n\n\n\n\n\n\n\ncli\n\n\nThis logs gitolite sub-commands run directly on the server, like \ngitolite\nsetup\n etc.\n\n\n\n\nfield 3: 'cli'\n\n\nfield 4: 'gitolite'\n\n\nfield 5 to end: arguments supplied to gitolite command, one per field\n\n\n\n\n\n\n\n\nGitolite allows you to send log entries to syslog.  To do that, uncomment one\nof the commented out values for LOG_DEST in the rc file.  If your rc file\ndoes not have any such lines, add one of the following lines just after the\nLOG_EXTRA line:\n\n\n# use this to log only to syslog\nLOG_DEST                        =\n 'syslog',\n\n# use this to log to syslog and the normal gitolite log\nLOG_DEST                        =\n 'syslog,normal',\n\n\n\nPlease note:\n\n\n\n\n\n\nThe first two fields described in the previous section (time, TID) are\n    different.  Syslog takes care of putting in the time, and the TID is\n    appended to the ident, so instead of just 'gitolite', you get\n    'gitolite[$GL_TID]'.\n\n\nThis means actual log lines will look something like this, since syslog\nappends the actual PID to the ident as well:\n\n\nJun  3 09:26:11 sita-lt gitolite[14950][14950]: ssh ARGV=admin  SOC=git-receive-pack 'gitolite-admin'   FROM=::1\nJun  3 09:26:11 sita-lt gitolite[14950][14950]: pre_git gitolite-admin  admin   W   any refs/.*\nJun  3 09:26:11 sita-lt gitolite[14950][14991]: update  gitolite-admin  admin   W   refs/heads/master   [snip]\nJun  3 09:26:13 sita-lt gitolite[14950][14950]: END\n\n\n\n\n\n\n\nNormal log messages use the 'info' priority, while LOG_EXTRA messages\n    (see previous section) use the 'debug' priority.\n\n\nIt may be useful to send the debug output to a different output file.\nUnlike in the normal gitolite logs, where there is an extra tab character\n(or, an empty field, depending on how you look at it), the syslog lines do\nnot let you easily distinguish between the main log lines and the\nLOG_EXTRA lines.", 
            "title": "writing your own non-core code"
        }, 
        {
            "location": "/dev-notes/#writing-your-own-non-core-programs", 
            "text": "This page is about  writing  hooks, commands, triggers, VREFS, and sugar\nscripts.   Installing  them, including \"where and how\", is described here .  Note: the  non-core  page is the starting point for all information about\ncustomising gitolite.", 
            "title": "writing your own \"non-core\" programs"
        }, 
        {
            "location": "/dev-notes/#environment-variables-and-other-inputs", 
            "text": "In general, the following environment variables should always be available:  GL_BINDIR\nGL_REPO_BASE\nGL_ADMIN_BASE  GL_BINDIR  is loosely equivalent to GIT_EXEC_PATH in git.   GL_REPO_BASE \nis always  $HOME/repositories , and  GL_ADMIN_BASE  is  $HOME/.gitolite .\n(You might ask why, if they're fixed values, do we need those variables.  Good\nquestion... next!)  In addition, commands invoked by a remote client also have  GL_USER , while\nhooks have  GL_USER  as well as  GL_REPO  (which is the  logical\nreponame ).  A special form of the  option  syntax can be used to set repo-specific environment variables .  Finally, note that triggers get a lot of relevant information from gitolite as\narguments; see  here  for details.", 
            "title": "environment variables and other inputs"
        }, 
        {
            "location": "/dev-notes/#apis", 
            "text": "", 
            "title": "APIs"
        }, 
        {
            "location": "/dev-notes/#the-shell-api", 
            "text": "The following commands exist to help you write shell scripts that interact\neasily with gitolite.  Each of them responds to  -h  so please run that for\nmore info.    gitolite access  to check access rights given repo, user, type of access\n    (R, W, ...) and refname (optional).  Example use: src/commands/desc.    gitolite creator  to get/check the creator of a repo.  Example use:\n    src/commands/desc.    gitolite git-config  to check gitolite options or git config variables\n    directly from gitolite's \"compiled\" output, (i.e., without looking at the\n    actual  repo.git/config  file or using the  git config  command).  Example\n    use: src/triggers/post-compile/update-gitweb-access-list.    gitolite query-rc  to check the value of an RC variable.  Example use:\n    src/commands/desc.    In addition, you can also look at the comments in src/lib/Gitolite/Easy.pm\n(the perl API module) for ideas.", 
            "title": "the shell API"
        }, 
        {
            "location": "/dev-notes/#the-perl-api", 
            "text": "...is implemented by  Gitolite::Easy ; the comments in\nsrc/lib/Gitolite/Easy.pm serve as documentation.  Note that some of the perl functions called by Easy.pm will change the current\ndirectory to something else, without saving and restoring the directory.\nPatches (to Easy.pm  only ) welcome.", 
            "title": "the perl API"
        }, 
        {
            "location": "/dev-notes/#writing-your-own", 
            "text": "", 
            "title": "writing your own..."
        }, 
        {
            "location": "/dev-notes/#commands", 
            "text": "Commands are standalone programs, in any language you like.  They simply\nreceive the arguments you append.  In addition, the env var  GL_USER  is\navailable if it is being run remotely.  src/commands/desc is the best example\nat present.", 
            "title": "...commands"
        }, 
        {
            "location": "/dev-notes/#hooks", 
            "text": "", 
            "title": "...hooks"
        }, 
        {
            "location": "/dev-notes/#anything-but-the-update-hook", 
            "text": "If you want to add any hook other than the update hook, 'man githooks' is all\nyou need.", 
            "title": "anything but the update hook"
        }, 
        {
            "location": "/dev-notes/#update-hook", 
            "text": "If you want to add additional  update  hook functionality, do this:    Write and test your update hook separately from gitolite.    Now add the code as a VREF (see  here  for details).  Let's say\n    you called it \"foo\".    To call your new update hook to all accesses for all repos, add this to\n    the end of your conf file:   repo  @all      -        VREF/foo         =    @all     As you probably guessed, you can make your additional update hooks more\nselective, applying them only to some repos / users / combinations.  Note: a normal update hook expects 3 arguments (ref, old SHA, new SHA).  A\nVREF will get those three, followed by at least 4 more.  Your VREF should just\nignore the extra args.", 
            "title": "update hook"
        }, 
        {
            "location": "/dev-notes/#trigger-programs", 
            "text": "Trigger programs run at specific points in gitolite's execution, with specific\narguments being passed to them.  See the  triggers  page for details.  You can write programs that are both manually runnable as well as callable by\ntrigger events, especially if they don't  need  any arguments.", 
            "title": "...trigger programs"
        }, 
        {
            "location": "/dev-notes/#sugar", 
            "text": "Syntactic sugar helpers are NOT complete, standalone, programs.  They must\ninclude a perl sub called  sugar_script  that takes in a listref, and returns\na listref.  The listrefs point to a list that contains the entire conf file\n(with all  include  processing already done).  You create a new list with\ncontents modified as you like and return a ref to it.  There are a couple of examples in src/syntactic-sugar.", 
            "title": "...\"sugar\""
        }, 
        {
            "location": "/dev-notes/#appendix-1-repo-specific-environment-variables", 
            "text": "A special form of the  option  syntax can be used to set\nrepo-specific environment variables that are visible to gitolite triggers and\nany git hooks you may install.  For example, let's say you installed a post-update hook that initiates a CI\njob.  By default, of course, this hook will be active for  all \ngitolite-managed repos.  However, you only want it to run for some specific\nrepos, say r1, r2, and r4.  To do that, first add this to the gitolite.conf:   repo  r1 r2 r4\n    option ENV.CI = 1  This creates an environment variable called  GL_OPTION_CI  with the value 1,\nbefore any trigger or hook is invoked.  Note: option names  must  start with  ENV. , followed by a seqence of\ncharacters composed of alphas, numbers, and the underscore character.  Now the hook running the CI job can easily decide what to do:  # exit if $GL_OPTION_CI is not set\n[ -z $GL_OPTION_CI ]   exit\n\n... rest of CI job code as before ...  Of course you can also do the opposite; i.e. decide that the listed repos\nshould  not  run the CI job but all other repos should:   repo  @all \n    option ENV.CI = 1 repo  r1 r2 r4\n    option ENV.CI =    (The hook code remains the same as before.)  Before this feature was added, you could still do this, by\nusing the  gitolite git-config  command inside the hook code to test for\noptions and configs set for the repo, like:  if gitolite git-config -q reponame gitolite-options.option-name\nthen\n    ...  The new method is much more convenient, as you can see.", 
            "title": "appendix 1: repo-specific environment variables"
        }, 
        {
            "location": "/dev-notes/#appendix-2-log-file-format", 
            "text": "Here's a brief description of gitolite's log file format.  All fields are tab\nseparated.  There are two kinds of lines in the log file:    third field non-empty: actual log lines.  These are documented below.    third field empty (i.e., two tabs after the second field): extra output to\n    help diagnose problems. These are NOT documented and may change without\n    notice.  They can be turned off completely by setting the RC variable\n     LOG_EXTRA  to 0.    For all types of log lines, the first two fields are:    field 1: local time, in  YYYY-MM-DD.HH:MM:SS  format    field 2: transaction ID or \"TID\".  This is actually the PID of the\n    outermost command that was initiated (usually \"gitolite-shell\").  It helps\n    to keep log lines pertaining to one \"run\" together, even if several\n    sub-commands are spawned (like for example from triggers, or even the\n    update hook itself).    The third and later fields are all dependent on what type of log line it is.  The various log line formats are:    start  This line denotes the beginning of a gitolite operation.    field 3: 'ssh' or 'http'    field 4:  ARGV= comma-separated list of command line arguments  Usually this is just the gitolite username (the argument to\ngitolite-shell, as supplied by the forced command in the authorized\nkeys file).  If you're  giving shell access  to some\nusers, this would be  -s,username .  That's two command line arguments\n(\"-s\" and the username), comma separated.    field 5:  SOC= original command from client  This is the command exactly as the git client sent it, or the user\ntyped it.  Typically this is one of these:  git-upload-pack 'reponame'\ngit-receive-pack 'reponame'  (including the single quotes, because that's what the client sent).  Gitolite commands are also recorded as is, so this could be something\nlike  info  or perhaps  perms -l reponame  etc.    field 6:  FROM= ip address      pre-git  This log line appears when the first access check succeeds (i.e., before\ngit-upload-pack or git-receive-pack is called).   field 3: 'pre_git'  field 4: reponame  field 5: username  field 6: 'R' or 'W'  field 7: 'any'  field 8: the refex that allowed access     update  This log line appears when the second access check succeeds (i.e., when\nthe update hook decides to allow the push).   field 3: 'update'  field 4: reponame  field 5: username  field 6: 'W', '+', 'C', 'D', 'WM', '+M', 'CM', or 'DM'  field 7: ref name (like 'refs/heads/master')  field 8: old SHA  field 9: new SHA  field 10: the refex that allowed access   The values in field 6 reflect the possible  write types , but\nnote that there is a difference between what the log file contains and\nwhat the gitolite.conf file contains (e.g.,  +  versus  RW+ ).  There's\nanother subtle difference for those who are not thinking clearly: the RW+  in the conf file is a permission, but it would show up as a  +  in\nthe log file only if an  actual  force push had happened, otherwise it\nwould be just  W .  By the way, notice that fields 7 to 9 are exactly what git itself supplies\nthe update hook (see 'man githooks').  There is a special version of this line that appears\nwhen someone  bypasses  gitolite's access control to push directly\non the server.  The 'reponame' (field 4) is replaced by the full path of\nthe repo being pushed to, the username (field 5) is replaced by the Unix\nuserid in parentheses, and the operation code (field 6) is\n'bypass'.    create  This log line appears when a wild repo was auto-created by a user.   field 3: 'create'  field 4: reponame  field 5: username  field 6: 'R' or 'W'   Field 6 is 'perms-c' if the wild repo is created using the perms command's\n'-c' option.    end  This indicates the end of the transaction.  Normally, you should not see\nany more lines with the same TID after this line.   field 3: 'END'     warnings  and  errors  Typically seen when access is denied.   field 3: 'warn' or 'die'  field 4: message.  Parts of the message (like reponame, username, etc)\n    are not split out into fields, though.     cli  This logs gitolite sub-commands run directly on the server, like  gitolite\nsetup  etc.   field 3: 'cli'  field 4: 'gitolite'  field 5 to end: arguments supplied to gitolite command, one per field     Gitolite allows you to send log entries to syslog.  To do that, uncomment one\nof the commented out values for LOG_DEST in the rc file.  If your rc file\ndoes not have any such lines, add one of the following lines just after the\nLOG_EXTRA line:  # use this to log only to syslog\nLOG_DEST                        =  'syslog',\n\n# use this to log to syslog and the normal gitolite log\nLOG_DEST                        =  'syslog,normal',  Please note:    The first two fields described in the previous section (time, TID) are\n    different.  Syslog takes care of putting in the time, and the TID is\n    appended to the ident, so instead of just 'gitolite', you get\n    'gitolite[$GL_TID]'.  This means actual log lines will look something like this, since syslog\nappends the actual PID to the ident as well:  Jun  3 09:26:11 sita-lt gitolite[14950][14950]: ssh ARGV=admin  SOC=git-receive-pack 'gitolite-admin'   FROM=::1\nJun  3 09:26:11 sita-lt gitolite[14950][14950]: pre_git gitolite-admin  admin   W   any refs/.*\nJun  3 09:26:11 sita-lt gitolite[14950][14991]: update  gitolite-admin  admin   W   refs/heads/master   [snip]\nJun  3 09:26:13 sita-lt gitolite[14950][14950]: END    Normal log messages use the 'info' priority, while LOG_EXTRA messages\n    (see previous section) use the 'debug' priority.  It may be useful to send the debug output to a different output file.\nUnlike in the normal gitolite logs, where there is an extra tab character\n(or, an empty field, depending on how you look at it), the syslog lines do\nnot let you easily distinguish between the main log lines and the\nLOG_EXTRA lines.", 
            "title": "appendix 2: log file format"
        }, 
        {
            "location": "/triggers/", 
            "text": "gitolite triggers\n\uf0c1\n\n\n\n\nGitolite runs trigger code at several different times.  The features you\nenable in the \nrc\n file determine what commands to run (or functions in perl\nmodules to call) at each trigger point.  Example of trigger points are\n\nINPUT\n, \nPRE_GIT\n, \nPOST_COMPILE\n, etc.; the full list is examined later in\nthis page.\n\n\n\n\nQuick tip: triggers are to gitolite what hooks are to git; we simply use a\ndifferent name to avoid constantly having to clarify which hooks we mean!\nThe other difference in gitolite is that each trigger runs multiple pieces\nof code, not just one program with the same name as the hook, like git\ndoes.\n\n\n\n\ntypes of trigger programs\n\uf0c1\n\n\nThere are two types of trigger programs.  Standalone scripts are placed in\ntriggers or its subdirectories.  Such scripts are quick and easy to write in\nany language of your choice.\n\n\nTriggers written as perl modules are placed in lib/Gitolite/Triggers.  Perl\nmodules have to follow some conventions (see some of the shipped modules for\nideas) but the advantage is that they can set environment variables and change\nthe argument list of the gitolite-shell program that invokes them.\n\n\nIf you intend to write your own triggers, it's a good idea to examine a\ndefault install of gitolite, paying attention to:\n\n\n\n\nthe path names in various trigger lists in the rc file,\n\n\ncorresponding path names in the src/ directory in gitolite source, and\n\n\nand for perl modules, the package names and function names within.\n\n\n\n\nmanually firing triggers\n\uf0c1\n\n\nIt's easy to manually fire triggers from the server command line.  For\nexample:\n\n\ngitolite trigger POST_COMPILE\n\n\n\nHowever if the triggered code depends on arguments (see next section) this\nwon't work.  (The \nPOST_COMPILE\n trigger programs all just happen to not\nrequire any arguments, so it works).\n\n\ncommon arguments\n\uf0c1\n\n\nTriggers receive the following arguments:\n\n\n\n\n\n\nAny arguments mentioned in the rc file (for an example, see the renice\n    command).\n\n\n\n\n\n\nThe name of the trigger as a string (example, \n\"POST_COMPILE\"\n), so you\n    can call the same program from multiple triggers and it can know where it\n    was called from.\n\n\n\n\n\n\nAnd finally, zero or more arguments specific to the trigger, as given in\n    the next section.\n\n\n\n\n\n\ntrigger-specific arguments and other details\n\uf0c1\n\n\nHere are the \nrest of\n the arguments for each trigger, plus a brief\ndescription of when the trigger runs.  (Note that when the repo name is passed\nin as an argument, it is without the '.git' suffix).\n\n\n\n\n\n\nINPUT\n runs before pretty much anything else.  INPUT trigger scripts\n    \nmust\n be in perl, since they manipulate the arguments and the environment\n    of the 'gitolite-shell' program itself.  Most commonly they will\n    read/change \n@ARGV\n, and/or \n$ENV{SSH_ORIGINAL_COMMAND}\n.\n\n\nThere are certain conventions to adhere to; please see some of the shipped\nsamples or ask me if you need help writing your own.\n\n\n\n\n\n\nACCESS_1\n runs after the first access check.  Extra arguments:\n\n\n\n\nrepo\n\n\nuser\n\n\n'R' or 'W'\n\n\n'any'\n\n\nresult (see notes below)\n\n\n\n\n'result' is the return value of the access() function.  If it contains the\nuppercase word \"DENIED\", the access was rejected.  Otherwise it is the\nrefex that caused the access to succeed.\n\n\n\n\nNote that if access is rejected, gitolite-shell will die as soon as it\nreturns from the trigger.\n\n\n\n\n\n\n\n\nACCESS_2\n runs after the second access check, which is invoked by the\n    update hook to check the ref.  Extra arguments:\n\n\n\n\nrepo\n\n\nuser\n\n\nany of W, +, C, D, WM, +M, CM, DM\n\n\nthe ref being updated (e.g., 'refs/heads/master')\n\n\nresult\n\n\nold SHA\n\n\nnew SHA\n\n\n\n\nACCESS_2\n also runs on each \nVREF\n that gets checked.  In this case\nthe \"ref\" argument will start with \"VREF/\", and the last two arguments\nwon't be passed.\n\n\n'result' is similar to \nACCESS_1\n, except that it is the \nupdate hook\n\nwhich dies as soon as access is rejected for the ref or any of the VREFs.\nControl then returns to git, and then to gitolite-shell, so the \nPOST_GIT\n\ntrigger \nwill\n run.\n\n\n\n\n\n\nPRE_GIT\n and \nPOST_GIT\n run just before and after the git command.\n    Extra arguments:\n\n\n\n\nrepo\n\n\nuser\n\n\n'R' or 'W'\n\n\n'any'\n\n\nthe git command ('git-receive-pack', 'git-upload-pack', or\n    'git-upload-archive') being invoked.\n\n\n\n\n\n\nNote that the \nPOST_GIT\n trigger has no way of knowing if the push\nsucceeded, because 'git-shell' (or maybe 'git-receive-pack', I don't\nknow) exits cleanly even if the update hook died.\n\n\n\n\n\n\n\n\nPRE_CREATE\n and \nPOST_CREATE\n run just before and after a new repo is\n    created.  In addition, any command that creates a repo (like 'fork') or\n    potentially changes permissions (like 'perms') may choose to run\n    \nPOST_CREATE\n.\n\n\nExtra arguments for normal repo creation (i.e., by adding a \"repo foo\"\nline to the conf file):\n\n\n\n\nrepo\n\n\n\n\nExtra arguments for wild repo creation:\n\n\n\n\nrepo\n\n\nuser\n\n\ninvoking operation\n\n\n'R' for fetch/clone/ls-remote, 'W' for push\n\n\ncan also be anything set by the command running the trigger (e.g.,\n    see the perms and fork commands).  This lets the trigger code know\n    how it was invoked.\n\n\n\n\n\n\n\n\n\n\n\n\nPOST_COMPILE\n runs after an admin push has successfully \"compiled\" the\n    config file.  By default, the next thing is to update the ssh authkeys\n    file, then all the 'git-config's, gitweb access, and daemon access.\n\n\nNo extra arguments.\n\n\n\n\n\n\nadding your own scripts to a trigger\n\uf0c1\n\n\nNote: for gitolite v3.3 or less, adding your own scripts\nto a trigger list was simply a matter of finding the trigger name in the rc\nfile and adding an entry to it.  Even for gitolite v3.4 or higher, if your rc\nfile was created before v3.4, \nit will continue to work, and you can continue\nto add triggers to it the same way as before\n.\n\n\nThe rc file (from v3.4 on) does not have trigger lists; it has a simple list\nof \"features\" within a list called \"ENABLE\" in the rc file.  Simply comment\nout or uncomment appropriate entries, and gitolite will \ninternally\n create\nthe trigger lists correctly.\n\n\nThis is fine for triggers that are shipped with gitolite, but does present a\nproblem when you want to add your own.\n\n\nHere's how to do that: Let's say you wrote yourself a trigger script called\n'foo', to be invoked from the \nPOST_CREATE\n trigger list.  To do that, just\nadd the following to the \nrc\n file, just before the ENABLE section:\n\n\nPOST_CREATE                 =\n\n    [\n        'foo'\n    ],\n\n\n\nSince the ENABLE list pulls in the rest of the trigger entries, this will be\n\neffectively\n as if you had done this in a v3.3 rc file:\n\n\nPOST_CREATE                 =\n\n    [\n        'foo',\n        'post-compile/update-git-configs',\n        'post-compile/update-gitweb-access-list',\n        'post-compile/update-git-daemon-access-list',\n    ],\n\n\n\nAs you can see, the 'foo' gets added to the top of the list.\n\n\ndisplaying the resulting trigger list\n\uf0c1\n\n\nYou can use the 'gitolite query-rc' command to see what the trigger list\nactually looks like.  For example:\n\n\ngitolite query-rc POST_CREATE\n\n\n\ntips and examples\n\uf0c1\n\n\n\n\n\n\nIf you have code that latches onto more than one trigger, collecting data\n    (such as for logging), then the outputs may be intermixed.  You can record\n    the value of the environment variable \nGL_TID\n to tie together related\n    entries.\n\n\nThe documentation on the \nlog file format\n has more on this.\n\n\n\n\n\n\nIf you look at CpuTime.pm, you'll see that it's \ninput()\n function doesn't\n    set or change anything, but does set a package variable to record the\n    start time.  Later, when the same module's \npost_git()\n function is\n    invoked, it uses this variable to determine elapsed time.\n\n\n(This is a very nice and simple example of how you can implement features\nby latching onto multiple events and sharing data to do something)\n.\n\n\n\n\n\n\nYou can even change the reponame the user sees, behind his back.  Alias.pm\n    handles that.\n\n\n\n\n\n\nFinally, as an exercise for the reader, consider how you would create a\n    brand new env var that contains the \ncomment\n field of the ssh pubkey that\n    was used to gain access, using the information \nhere\n.", 
            "title": "gitolite triggers"
        }, 
        {
            "location": "/triggers/#gitolite-triggers", 
            "text": "Gitolite runs trigger code at several different times.  The features you\nenable in the  rc  file determine what commands to run (or functions in perl\nmodules to call) at each trigger point.  Example of trigger points are INPUT ,  PRE_GIT ,  POST_COMPILE , etc.; the full list is examined later in\nthis page.   Quick tip: triggers are to gitolite what hooks are to git; we simply use a\ndifferent name to avoid constantly having to clarify which hooks we mean!\nThe other difference in gitolite is that each trigger runs multiple pieces\nof code, not just one program with the same name as the hook, like git\ndoes.", 
            "title": "gitolite triggers"
        }, 
        {
            "location": "/triggers/#types-of-trigger-programs", 
            "text": "There are two types of trigger programs.  Standalone scripts are placed in\ntriggers or its subdirectories.  Such scripts are quick and easy to write in\nany language of your choice.  Triggers written as perl modules are placed in lib/Gitolite/Triggers.  Perl\nmodules have to follow some conventions (see some of the shipped modules for\nideas) but the advantage is that they can set environment variables and change\nthe argument list of the gitolite-shell program that invokes them.  If you intend to write your own triggers, it's a good idea to examine a\ndefault install of gitolite, paying attention to:   the path names in various trigger lists in the rc file,  corresponding path names in the src/ directory in gitolite source, and  and for perl modules, the package names and function names within.", 
            "title": "types of trigger programs"
        }, 
        {
            "location": "/triggers/#manually-firing-triggers", 
            "text": "It's easy to manually fire triggers from the server command line.  For\nexample:  gitolite trigger POST_COMPILE  However if the triggered code depends on arguments (see next section) this\nwon't work.  (The  POST_COMPILE  trigger programs all just happen to not\nrequire any arguments, so it works).", 
            "title": "manually firing triggers"
        }, 
        {
            "location": "/triggers/#common-arguments", 
            "text": "Triggers receive the following arguments:    Any arguments mentioned in the rc file (for an example, see the renice\n    command).    The name of the trigger as a string (example,  \"POST_COMPILE\" ), so you\n    can call the same program from multiple triggers and it can know where it\n    was called from.    And finally, zero or more arguments specific to the trigger, as given in\n    the next section.", 
            "title": "common arguments"
        }, 
        {
            "location": "/triggers/#trigger-specific-arguments-and-other-details", 
            "text": "Here are the  rest of  the arguments for each trigger, plus a brief\ndescription of when the trigger runs.  (Note that when the repo name is passed\nin as an argument, it is without the '.git' suffix).    INPUT  runs before pretty much anything else.  INPUT trigger scripts\n     must  be in perl, since they manipulate the arguments and the environment\n    of the 'gitolite-shell' program itself.  Most commonly they will\n    read/change  @ARGV , and/or  $ENV{SSH_ORIGINAL_COMMAND} .  There are certain conventions to adhere to; please see some of the shipped\nsamples or ask me if you need help writing your own.    ACCESS_1  runs after the first access check.  Extra arguments:   repo  user  'R' or 'W'  'any'  result (see notes below)   'result' is the return value of the access() function.  If it contains the\nuppercase word \"DENIED\", the access was rejected.  Otherwise it is the\nrefex that caused the access to succeed.   Note that if access is rejected, gitolite-shell will die as soon as it\nreturns from the trigger.     ACCESS_2  runs after the second access check, which is invoked by the\n    update hook to check the ref.  Extra arguments:   repo  user  any of W, +, C, D, WM, +M, CM, DM  the ref being updated (e.g., 'refs/heads/master')  result  old SHA  new SHA   ACCESS_2  also runs on each  VREF  that gets checked.  In this case\nthe \"ref\" argument will start with \"VREF/\", and the last two arguments\nwon't be passed.  'result' is similar to  ACCESS_1 , except that it is the  update hook \nwhich dies as soon as access is rejected for the ref or any of the VREFs.\nControl then returns to git, and then to gitolite-shell, so the  POST_GIT \ntrigger  will  run.    PRE_GIT  and  POST_GIT  run just before and after the git command.\n    Extra arguments:   repo  user  'R' or 'W'  'any'  the git command ('git-receive-pack', 'git-upload-pack', or\n    'git-upload-archive') being invoked.    Note that the  POST_GIT  trigger has no way of knowing if the push\nsucceeded, because 'git-shell' (or maybe 'git-receive-pack', I don't\nknow) exits cleanly even if the update hook died.     PRE_CREATE  and  POST_CREATE  run just before and after a new repo is\n    created.  In addition, any command that creates a repo (like 'fork') or\n    potentially changes permissions (like 'perms') may choose to run\n     POST_CREATE .  Extra arguments for normal repo creation (i.e., by adding a \"repo foo\"\nline to the conf file):   repo   Extra arguments for wild repo creation:   repo  user  invoking operation  'R' for fetch/clone/ls-remote, 'W' for push  can also be anything set by the command running the trigger (e.g.,\n    see the perms and fork commands).  This lets the trigger code know\n    how it was invoked.       POST_COMPILE  runs after an admin push has successfully \"compiled\" the\n    config file.  By default, the next thing is to update the ssh authkeys\n    file, then all the 'git-config's, gitweb access, and daemon access.  No extra arguments.", 
            "title": "trigger-specific arguments and other details"
        }, 
        {
            "location": "/triggers/#adding-your-own-scripts-to-a-trigger", 
            "text": "Note: for gitolite v3.3 or less, adding your own scripts\nto a trigger list was simply a matter of finding the trigger name in the rc\nfile and adding an entry to it.  Even for gitolite v3.4 or higher, if your rc\nfile was created before v3.4,  it will continue to work, and you can continue\nto add triggers to it the same way as before .  The rc file (from v3.4 on) does not have trigger lists; it has a simple list\nof \"features\" within a list called \"ENABLE\" in the rc file.  Simply comment\nout or uncomment appropriate entries, and gitolite will  internally  create\nthe trigger lists correctly.  This is fine for triggers that are shipped with gitolite, but does present a\nproblem when you want to add your own.  Here's how to do that: Let's say you wrote yourself a trigger script called\n'foo', to be invoked from the  POST_CREATE  trigger list.  To do that, just\nadd the following to the  rc  file, just before the ENABLE section:  POST_CREATE                 = \n    [\n        'foo'\n    ],  Since the ENABLE list pulls in the rest of the trigger entries, this will be effectively  as if you had done this in a v3.3 rc file:  POST_CREATE                 = \n    [\n        'foo',\n        'post-compile/update-git-configs',\n        'post-compile/update-gitweb-access-list',\n        'post-compile/update-git-daemon-access-list',\n    ],  As you can see, the 'foo' gets added to the top of the list.", 
            "title": "adding your own scripts to a trigger"
        }, 
        {
            "location": "/triggers/#displaying-the-resulting-trigger-list", 
            "text": "You can use the 'gitolite query-rc' command to see what the trigger list\nactually looks like.  For example:  gitolite query-rc POST_CREATE", 
            "title": "displaying the resulting trigger list"
        }, 
        {
            "location": "/triggers/#tips-and-examples", 
            "text": "If you have code that latches onto more than one trigger, collecting data\n    (such as for logging), then the outputs may be intermixed.  You can record\n    the value of the environment variable  GL_TID  to tie together related\n    entries.  The documentation on the  log file format  has more on this.    If you look at CpuTime.pm, you'll see that it's  input()  function doesn't\n    set or change anything, but does set a package variable to record the\n    start time.  Later, when the same module's  post_git()  function is\n    invoked, it uses this variable to determine elapsed time.  (This is a very nice and simple example of how you can implement features\nby latching onto multiple events and sharing data to do something) .    You can even change the reponame the user sees, behind his back.  Alias.pm\n    handles that.    Finally, as an exercise for the reader, consider how you would create a\n    brand new env var that contains the  comment  field of the ssh pubkey that\n    was used to gain access, using the information  here .", 
            "title": "tips and examples"
        }, 
        {
            "location": "/list-non-core/", 
            "text": "non-core features shipped with gitolite\n\uf0c1\n\n\n\n\nImportant Notes on \"non-core\" features\n:\n\n\n\n\n\n\nThe \n\"non-core\" gitolite\n page is the starting point for all\n    information about ... non-core gitolite :)\n\n\n\n\n\n\nThis page decribes many of the non-core features that come with gitolite.\n    If a non-core feature is shipped with gitolite, but information about it\n    is not found in this page, it can be found within the source code; please\n    look there.\n\n\nCommands\n, however, have some extra magic,\nwhich is not available to the other types of non-core programs:\n\n\n\n\n\n\nRunning the command with a single \n-h\n option (i.e., \ngitolite \ncommand\n -h\n\n    or \nssh git@host \ncommand\n -h\n), will display a suitable\n    message.  Please report a bug to me if one of them doesn't.\n\n\n\n\n\n\nRunning 'help', (either as \ngitolite help\n on the server, or\n    \nssh git@host help\n remotely), will give you a list of commands you are\n    allowed to run.\n\n\n\n\n\n\n\n\n\n\nNon-core code is \nmeant\n to be \nlocalised for your site\n if\n    you don't like what the shipped version does.  You can even maintain it\n    \nwithin your gitolite-admin repo\n if you wish.\n\n\n\n\n\n\ncommands\n\uf0c1\n\n\nThis is a list of commands that are available in gitolite, with brief\ndescriptions and, if available, a link to more detailed information.  Note\nthat in most cases running it with \n-h\n will give you enough to work with.\n\n\nAlso note that not all of these commands are available remotely.\n\n\n(The more common/important commands are in bold).\n\n\n\n\naccess\n -- print or test access rights for repo/user\n\n\nconfig\n \n(v3.6.3+)\n -- allow limited remote use of 'git config'\n\n\ncreate\n -- create a wild repo\n\n\ncreator\n -- print or test creator name for wild repo\n\n\nD\n -- lets you \nD\nelete wild repos created using the \nC\n permission :)\n\n\ndesc\n -- show/set description for wild repo\n\n\nfork\n -- fork a repo on the server.  This uses the \n-l\n option to git\n    clone, so it runs really fast\n\n\ngit-config\n -- print (or text existence of) 'config' values in the repo.\n    (Don't forget that \noption foo.bar = 1\n is merely syntactic sugar for\n    \nconfig gitolite-options.foo.bar = 1\n, so this can be used to query\n    gitolite options also\n\n\nhelp\n -- see note 1 at the top of this page\n\n\nhtpasswd\n -- sets your htpasswd\n\n\ninfo\n -- print git/gitolite version, list repos you have access to\n\n\nlock\n -- lock binary files for exclusive use (in combination\n    with the 'lock' VREF)\n\n\nmirror\n -- manually mirror a repo to a slave\n\n\nmotd\n \n(v3.6.1+)\n -- set/remove a message of the day, per repo or for the whole\n    system\n\n\noption\n \n(v3.6.3+)\n -- allow repo owner to set options for a repo\n\n\nperms\n -- list or set permissions for wild repo\n\n\npush\n -- push a gitolite repo locally, bypassing gitolite\n\n\nreadme\n \n(v3.6.1+)\n -- show, remove or set the README.html file for repo.\n\n\nrsync\n -- resumable downloads of git bundles (bundles are auto-created as\n    needed)\n\n\nsshkeys-lint\n -- look for potential problems in ssh keys\n\n\nsskm\n -- self-service key management\n\n\nsudo\n -- allows an admin (i.e., someone who has push rights to the\n    'gitolite-admin' repo) to run any remote command as some other user.  This\n    is useful, for example, when a user claims he is unable to access a repo,\n    and you need to check the 'info' output for him, etc.  However, it does\n    not work the other way, sorry!\n\n\nsymbolic-ref\n -- run \ngit symbolic-ref\n on a repo, remotely\n\n\nwho-pushed\n -- determine who pushed a given commit\n\n\nwritable\n -- disable/enable writes to specific repo (or all repos, if\n    you're an admin)\n\n\n\n\nsyntactic sugar\n\uf0c1\n\n\nThe following \"sugar\" programs are available:\n\n\n\n\ncontinuation-lines\n -- allow C-style backslash escaped continuation lines\n    in the conf file\n\n\nkeysubdirs-as-groups\n -- use the last component of the sub-directory name\n    within keydir as a group name\n\n\nmacros\n -- simple line-wise macro processor\n\n\n\n\ntriggers\n\uf0c1\n\n\nHere's a list of \nfeatures\n that are enabled by \ntriggers\n, or a\ncombination of a trigger and something else, like a command.\n\n\n\n\nAlias\n -- allow repos to have aliases\n\n\nAutoCreate\n -- deny auto-create of wild repos on R or RW access\n\n\nbg\n -- allow long running post-compile/post-create jobs to be\n    backgrounded\n\n\nCpuTime\n -- CPU and elapsed times for gitolite+git\n\n\nMirroring\n -- mirroring all or some repos\n\n\nMotd\n \n(v3.6.1+)\n -- allows printing a message of the day to\n    STDERR in ssh mode\n\n\npartial-copy\n -- simulated read control for branches (in combination\n    with the partial-copy VREF)\n\n\nRefexExpr\n -- (in combination with VREF/refex-expr) logical expressions\n    over refexes, like \"refex-1 and not refex-2\".  (Example: changing file\n    'foo' but not on 'master' branch)\n\n\nrenice\n -- renice the git operation\n\n\nRepoUmask\n -- repo-specific umask settings\n\n\nShell\n -- see \"giving shell access to gitolite users\" in the \nssh\n    troubleshooting and tips\n page.  (Internally enables the\n    'ssh-authkeys-shell-users' trigger also).\n\n\nssh-authkeys-split\n -- split pubkey files with multiple keys into\n    separate files with one pubkey each\n\n\nupdate-description-file\n -- if you want the 'description' file to be\n    updated instead of the 'gitweb.description' config entry (e.g. cgit users)\n\n\nupstream\n -- manage local, gitolite-controlled, copies of read-only\n    upstream repos\n\n\n\n\nIn addition, the following post-compile trigger scripts are enabled by\ndefault, so are included here only for completeness and in case you wish to\ndisable them:\n\n\n\n\nssh-authkeys -- process keys in keydir/ and add/update appropriate lines\n    to the authorized keys file\n\n\nupdate-git-configs -- run \ngit config\n in each repo to add/update entries\n    as needed\n\n\nupdate-git-daemon-access-list -- create/delete the 'git-daemon-export-ok'\n    files in each repo as needed\n\n\nupdate-gitweb-access-list -- create the \"projects.list\" file that gitweb\n    uses to determine what repos to show/not show\n\n\n\n\nVREFs\n\uf0c1\n\n\nVREFs are a complex topic and have their \nown page\n with lots more\ndetails.  However, here's a list of VREFs shipped with gitolite:\n\n\n\n\nCOUNT\n -- restrict pushes by number of changed or new files pushed\n\n\nEMAIL-CHECK\n -- check if all new commits are authored by the person pushing\n\n\nlock\n -- lock binary files for exclusive use (in combination\n    with the 'lock' command)\n\n\nMAX_NEWBIN_SIZE\n -- restrict by size of new binary files (helps catch\n    people checking in random PDFs, JARs, WARs, etc.)\n\n\nNAME\n -- restrict pushes by dir/file name\n\n\npartial-copy\n -- simulated read control for branches (in combination\n    with the partial-copy trigger)\n\n\nrefex-expr\n -- (in combination with the refex-expr trigger) logical\n    expressions over refexes, like \"refex-1 and not refex-2\".  (Example:\n    changing file 'foo' but not on 'master' branch)\n\n\nVOTES\n -- voting on commits a la gerrit\n\n\n\n\ndetails on some non-core programs\n\uf0c1\n\n\nThese non-core programs needed more detail than could be provided in the\nsource code, but did not fit anywhere else neatly enough.\n\n\npartial-copy: selective read control for branches\n\uf0c1\n\n\nGit (and therefore gitolite) cannot do selective read control -- allowing\nsomeone to read branch A but not branch B.  It's the entire repo or nothing.\n\n\nGerrit Code Review can do that, but that is because they have their\nown git (as well as their own sshd, and so on).  If code review is part of\nyour access control decision, you really should consider Gerrit\nanyway.\n\n\nThe standard answer you get when you ask is \"use separate repos\" (where one\ncontains all the branches, and one contains a subset of the branches).  This\nis nice in theory but in practice, when people are potentially \npushing\n to\nboth repos, you need to figure out how to keep them in sync.\n\n\nGitolite can now help you do this.  Note that this is only for branches; you\ncan't do this for files and directories.\n\n\nHere's how:\n\n\n\n\n\n\nenable 'partial-copy' in the ENABLE list in the rc file.\n\n\n\n\n\n\nfor each repo \"foo\" which has secret branches that a certain set of\n    developers (we'll use a group called \n@temp-emp\n as an example) are not\n    supposed to see, do this:\n\n\n\n\nrepo \nfoo\n   \n # rules should allow @temp-emp NO ACCESS\n\n\nrepo \nfoo-partialcopy-1\n   \n # first, a deny rule that allows no access to secret-branch\n\n\n    -\n   secret-branch               \n=\n   @all\n\n\n # other rules; see notes below\n\n\n    -\n   VREF/partial-copy           \n=\n   @all\n\n\n    config \ngitolite.partialCopyOf   \n=   foo\n\n\n\nIMPORTANT NOTES\n:\n\n\n\n\n\n\nif you're using other VREFs, \nmake sure\n this one is placed at the\n    end, after all the others.\n\n\n\n\n\n\nremember that any change allowed to be made to the partial-copy repo\n    will propagate to the main repo so make sure you use other rules to\n    restrict pushes to other branches and tags as needed.\n\n\n\n\n\n\n\n\n\n\nAnd that should be it.  \nPlease test it and let me know if it doesn't work!\n\n\nWARNINGS:\n\n\n\n\n\n\nIf you change the config to disallow something that used to be allowed,\n    you should delete the partial repo on the server and then run\n    \ngitolite compile; gitolite trigger POST_COMPILE\n to let it build again.\n\n\n\n\n\n\nNot tested with smart http; probably won't work.\n\n\n\n\n\n\nAlso not tested with mirroring, or with wild card repos.", 
            "title": "list of non-core programs shipped with gitolite"
        }, 
        {
            "location": "/list-non-core/#non-core-features-shipped-with-gitolite", 
            "text": "Important Notes on \"non-core\" features :    The  \"non-core\" gitolite  page is the starting point for all\n    information about ... non-core gitolite :)    This page decribes many of the non-core features that come with gitolite.\n    If a non-core feature is shipped with gitolite, but information about it\n    is not found in this page, it can be found within the source code; please\n    look there.  Commands , however, have some extra magic,\nwhich is not available to the other types of non-core programs:    Running the command with a single  -h  option (i.e.,  gitolite  command  -h \n    or  ssh git@host  command  -h ), will display a suitable\n    message.  Please report a bug to me if one of them doesn't.    Running 'help', (either as  gitolite help  on the server, or\n     ssh git@host help  remotely), will give you a list of commands you are\n    allowed to run.      Non-core code is  meant  to be  localised for your site  if\n    you don't like what the shipped version does.  You can even maintain it\n     within your gitolite-admin repo  if you wish.", 
            "title": "non-core features shipped with gitolite"
        }, 
        {
            "location": "/list-non-core/#commands", 
            "text": "This is a list of commands that are available in gitolite, with brief\ndescriptions and, if available, a link to more detailed information.  Note\nthat in most cases running it with  -h  will give you enough to work with.  Also note that not all of these commands are available remotely.  (The more common/important commands are in bold).   access  -- print or test access rights for repo/user  config   (v3.6.3+)  -- allow limited remote use of 'git config'  create  -- create a wild repo  creator  -- print or test creator name for wild repo  D  -- lets you  D elete wild repos created using the  C  permission :)  desc  -- show/set description for wild repo  fork  -- fork a repo on the server.  This uses the  -l  option to git\n    clone, so it runs really fast  git-config  -- print (or text existence of) 'config' values in the repo.\n    (Don't forget that  option foo.bar = 1  is merely syntactic sugar for\n     config gitolite-options.foo.bar = 1 , so this can be used to query\n    gitolite options also  help  -- see note 1 at the top of this page  htpasswd  -- sets your htpasswd  info  -- print git/gitolite version, list repos you have access to  lock  -- lock binary files for exclusive use (in combination\n    with the 'lock' VREF)  mirror  -- manually mirror a repo to a slave  motd   (v3.6.1+)  -- set/remove a message of the day, per repo or for the whole\n    system  option   (v3.6.3+)  -- allow repo owner to set options for a repo  perms  -- list or set permissions for wild repo  push  -- push a gitolite repo locally, bypassing gitolite  readme   (v3.6.1+)  -- show, remove or set the README.html file for repo.  rsync  -- resumable downloads of git bundles (bundles are auto-created as\n    needed)  sshkeys-lint  -- look for potential problems in ssh keys  sskm  -- self-service key management  sudo  -- allows an admin (i.e., someone who has push rights to the\n    'gitolite-admin' repo) to run any remote command as some other user.  This\n    is useful, for example, when a user claims he is unable to access a repo,\n    and you need to check the 'info' output for him, etc.  However, it does\n    not work the other way, sorry!  symbolic-ref  -- run  git symbolic-ref  on a repo, remotely  who-pushed  -- determine who pushed a given commit  writable  -- disable/enable writes to specific repo (or all repos, if\n    you're an admin)", 
            "title": "commands"
        }, 
        {
            "location": "/list-non-core/#syntactic-sugar", 
            "text": "The following \"sugar\" programs are available:   continuation-lines  -- allow C-style backslash escaped continuation lines\n    in the conf file  keysubdirs-as-groups  -- use the last component of the sub-directory name\n    within keydir as a group name  macros  -- simple line-wise macro processor", 
            "title": "syntactic sugar"
        }, 
        {
            "location": "/list-non-core/#triggers", 
            "text": "Here's a list of  features  that are enabled by  triggers , or a\ncombination of a trigger and something else, like a command.   Alias  -- allow repos to have aliases  AutoCreate  -- deny auto-create of wild repos on R or RW access  bg  -- allow long running post-compile/post-create jobs to be\n    backgrounded  CpuTime  -- CPU and elapsed times for gitolite+git  Mirroring  -- mirroring all or some repos  Motd   (v3.6.1+)  -- allows printing a message of the day to\n    STDERR in ssh mode  partial-copy  -- simulated read control for branches (in combination\n    with the partial-copy VREF)  RefexExpr  -- (in combination with VREF/refex-expr) logical expressions\n    over refexes, like \"refex-1 and not refex-2\".  (Example: changing file\n    'foo' but not on 'master' branch)  renice  -- renice the git operation  RepoUmask  -- repo-specific umask settings  Shell  -- see \"giving shell access to gitolite users\" in the  ssh\n    troubleshooting and tips  page.  (Internally enables the\n    'ssh-authkeys-shell-users' trigger also).  ssh-authkeys-split  -- split pubkey files with multiple keys into\n    separate files with one pubkey each  update-description-file  -- if you want the 'description' file to be\n    updated instead of the 'gitweb.description' config entry (e.g. cgit users)  upstream  -- manage local, gitolite-controlled, copies of read-only\n    upstream repos   In addition, the following post-compile trigger scripts are enabled by\ndefault, so are included here only for completeness and in case you wish to\ndisable them:   ssh-authkeys -- process keys in keydir/ and add/update appropriate lines\n    to the authorized keys file  update-git-configs -- run  git config  in each repo to add/update entries\n    as needed  update-git-daemon-access-list -- create/delete the 'git-daemon-export-ok'\n    files in each repo as needed  update-gitweb-access-list -- create the \"projects.list\" file that gitweb\n    uses to determine what repos to show/not show", 
            "title": "triggers"
        }, 
        {
            "location": "/list-non-core/#vrefs", 
            "text": "VREFs are a complex topic and have their  own page  with lots more\ndetails.  However, here's a list of VREFs shipped with gitolite:   COUNT  -- restrict pushes by number of changed or new files pushed  EMAIL-CHECK  -- check if all new commits are authored by the person pushing  lock  -- lock binary files for exclusive use (in combination\n    with the 'lock' command)  MAX_NEWBIN_SIZE  -- restrict by size of new binary files (helps catch\n    people checking in random PDFs, JARs, WARs, etc.)  NAME  -- restrict pushes by dir/file name  partial-copy  -- simulated read control for branches (in combination\n    with the partial-copy trigger)  refex-expr  -- (in combination with the refex-expr trigger) logical\n    expressions over refexes, like \"refex-1 and not refex-2\".  (Example:\n    changing file 'foo' but not on 'master' branch)  VOTES  -- voting on commits a la gerrit", 
            "title": "VREFs"
        }, 
        {
            "location": "/list-non-core/#details-on-some-non-core-programs", 
            "text": "These non-core programs needed more detail than could be provided in the\nsource code, but did not fit anywhere else neatly enough.", 
            "title": "details on some non-core programs"
        }, 
        {
            "location": "/list-non-core/#partial-copy-selective-read-control-for-branches", 
            "text": "Git (and therefore gitolite) cannot do selective read control -- allowing\nsomeone to read branch A but not branch B.  It's the entire repo or nothing.  Gerrit Code Review can do that, but that is because they have their\nown git (as well as their own sshd, and so on).  If code review is part of\nyour access control decision, you really should consider Gerrit\nanyway.  The standard answer you get when you ask is \"use separate repos\" (where one\ncontains all the branches, and one contains a subset of the branches).  This\nis nice in theory but in practice, when people are potentially  pushing  to\nboth repos, you need to figure out how to keep them in sync.  Gitolite can now help you do this.  Note that this is only for branches; you\ncan't do this for files and directories.  Here's how:    enable 'partial-copy' in the ENABLE list in the rc file.    for each repo \"foo\" which has secret branches that a certain set of\n    developers (we'll use a group called  @temp-emp  as an example) are not\n    supposed to see, do this:   repo  foo\n     # rules should allow @temp-emp NO ACCESS  repo  foo-partialcopy-1\n     # first, a deny rule that allows no access to secret-branch      -    secret-branch                =    @all   # other rules; see notes below      -    VREF/partial-copy            =    @all      config  gitolite.partialCopyOf    =   foo  IMPORTANT NOTES :    if you're using other VREFs,  make sure  this one is placed at the\n    end, after all the others.    remember that any change allowed to be made to the partial-copy repo\n    will propagate to the main repo so make sure you use other rules to\n    restrict pushes to other branches and tags as needed.      And that should be it.   Please test it and let me know if it doesn't work!  WARNINGS:    If you change the config to disallow something that used to be allowed,\n    you should delete the partial repo on the server and then run\n     gitolite compile; gitolite trigger POST_COMPILE  to let it build again.    Not tested with smart http; probably won't work.    Also not tested with mirroring, or with wild card repos.", 
            "title": "partial-copy: selective read control for branches"
        }, 
        {
            "location": "/cookbook/", 
            "text": "gitolite cookbook\n\uf0c1\n\n\n(a.k.a. \"stop all that rambling and just tell me what I need to do!\")\n\n\n\n\nDocumentation is meant to be as complete as possible, which means it attempts\nto cover all situations and scenarios.  That makes it harder to read.\n\n\nHowever, if you make some assumptions, remove the rationale, justification,\nexceptions and special cases, etc., and generally just say \nwhat\n is to be\ndone rather than explain \nwhy\n, many tasks can be described very easily.\n\n\nOr, if the main documentation already does that, a cookbook may help you find\nit faster, simply because it's organised differently.\n\n\nMaybe this will help.  If you run into problems, please check the main\ndocumentation before asking for help.\n\n\nadministration\n\uf0c1\n\n\nseparating \"key admin\" from \"repo admin\"\n\uf0c1\n\n\nIn gitolite, the person who controls the keys is the most critical in terms of\nsecurity -- because he can always add his own key in your name :-)\n\n\nTraditionally, the same person also administers repos and permissions.  But\nsometimes you want to separate them.\n\n\nTo separate those roles, put the following in conf/gitolite.conf, and let the\nrepo-manager manage everything through \"actual.conf\":\n\n\n\n\nrepo \ngitolite-admin\n\n    RW+\n \n= key-manager repo-manager\n\n\n    RW+\n VREF/NAME/                    \n= key-manager\n\n    -\n   VREF/NAME/keydir/             \n=\n @all\n\n\n    -\n   VREF/NAME/conf/gitolite.conf  \n=\n @all\n\n\n\ninclude \nactual.conf\n\n\n\n\n\naccess\n\uf0c1\n\n\nlooking up repo access from external tools\n\uf0c1\n\n\nThere are two supported interfaces for this, one in perl and one in shell.\nOther languages should probably use the shell mode.  (The shell mode has a\nvery convenient \"batch\" mode if you need to check many repos at once).\n\n\nPerl interface\n: A good intro to this, including a link to code, using\ngitweb as an example can be found by looking for 'repo-specific authorisation\nin gitweb' in the page on \nallowing access to gitweb and\ngit-daemon\n. Some notes:\n\n\n\n\nbe sure to read the comments in the code to learn exactly how to adapt it\n    to your needs\n\n\nin place of the \ncan_read\n function in that code, you can of course use\n    \ncan_write\n.  In fact, reading the comments in \"Easy.pm\" (look for it in\n    the source) shows you several other interesting tests you can make, like\n    \nis_admin\n, \nin_group\n, and \nowns\n.\n\n\n\n\nShell interface\n: If you want to do this from shell, it's even easier. The\nsame \"Easy.pm\" source contains comments that show shell equivalents for each\nof the functions it exports, but here's a sample:\n\n\nif gitolite access -q reponame username W\nthen\n    ...\n\n\n\nYou can even test for access to specific branches:\n\n\nif gitolite access -q reponame username W master\nthen\n    ...\n\n\n\nIf your gitolite is older than v3.6, you must use the full ref name;\njust 'master' won't do.\n\n\nallowing access by other programs\n\uf0c1\n\n\nGiving external tools (like apache) access to gitolite repositories involves\nmaking sure that the unix owner/group and permissions settings allow this.\nThis is all described in the UMASK section in the page on the \nrc file\n,\nbecause that's the only setting that gitolite controls; every thing else is\npure Unix.\n\n\ncommands\n\uf0c1\n\n\nadding your own commands\n\uf0c1\n\n\nTo add a command, say \nfoo\n, do this:\n\n\n\n\n\n\nadd this line in the rc file, within the \n%RC\n block, if it's not already\n    present, or uncomment it if it's already present and commented out:\n\n\nLOCAL_CODE =\n \"$ENV{HOME}/local\",\n\n\n\n\n\n\n\ncopy the program \nfoo\n into \n$HOME/local/commands\n.  (Don't forget the\n    \nchmod +x\n!)\n\n\n\n\n\n\nmaking commands available to remote users\n\uf0c1\n\n\nOnce you do the above, \nfoo\n is available as \ngitolite foo\n.  To make it\navailable to remote users (as \nssh git@host foo\n), add the line:\n\n\n`foo`,\n\n\n\n(including the comma at the end) to the ENABLE list in the rc file.\n\n\nhooks\n\uf0c1\n\n\nNote: the main documentation for this feature starts \nhere\n.\n\n\nadding your own update hooks\n\uf0c1\n\n\nYou have some update hooks (for example crlf checking) that you want to\ninclude in gitolite.  Assuming the hook itself is tested and works as a normal\n\ngit\n update hook does (i.e., conforms to what \nman githooks\n says an update\nhook should do), here's how to do this:\n\n\n\n\n\n\nadd this line in the rc file, within the \n%RC\n block, if it's not already\n    present, or uncomment it if it's already present and commented out:\n\n\nLOCAL_CODE =\n \"$ENV{HOME}/local\",\n\n\n\n\n\n\n\ncopy your update hook to a subdirectory called VREF under this directory,\n    giving it a suitable name (let's say \"crlf\"):\n\n\n# log on to gitolite hosting user on the server, then:\ncd $HOME\nmkdir -p local/VREF\ncp your-crlf-update-hook local/VREF/crlf\nchmod +x local/VREF/crlf\n\n\n\n\n\n\n\nin your gitolite-admin clone, edit conf/gitolite.conf and\n    add lines like this:\n\n\n    -   VREF/crlf       =   @all\n\n\n\nto each repo that should have that \"update\" hook.\n\n\nAlternatively, you can simply add this at the end of the\ngitolite.conf file:\n\n\n\n\nrepo \n@all\n\n\n    -\n   VREF/crlf       \n=\n   @all\n\n\n\n\nEither way, add/commit/push the change to the gitolite-admin repo.\n\n\n\n\n\n\nadding other (non-update) hooks\n\uf0c1\n\n\nSay you want other hooks, like a post-receive hook.  Here's how:\n\n\n\n\n\n\nadd this line in the rc file, within the \n%RC\n block, if it's not already\n    present, or uncomment it if it's already present and commented out:\n\n\nLOCAL_CODE =\n \"$ENV{HOME}/local\",\n\n\n\n\n\n\n\nput your hooks into that directory, in a sub-sub-directory called\n    \"hooks/common\":\n\n\n# log on to gitolite hosting user on the server, then:\ncd $HOME\nmkdir -p local/hooks/common\ncp your-post-receive-hook local/hooks/common/post-receive\nchmod +x local/hooks/common/post-receive\n\n\n\n\n\n\n\nrun \ngitolite setup\n to have the hooks propagate to existing repos (repos\n    created after this will get them anyway).\n\n\n\n\n\n\nvariation: maintain these hooks in the gitolite-admin repo\n\uf0c1\n\n\n\n\nImportant security note:\n\n\nIf you enable this, anyone who can push changes to the admin repo will\neffectively be able to run any arbitrary command on the server.\n  See\n\ngitolite admin and shell access\n for more background.\n\n\n\n\nIf you want to maintain these update hooks (VREFs) or non-update hooks\n(post-update, pre-receive, post-receive) in the gitolite-admin repo, instead\nof having to log on to the server and make changes, the procedure is almost\nthe same except for the following differences:\n\n\n\n\n\n\nadd this line in the rc file, within the \n%RC\n block, if it's not already\n    present, or uncomment it if it's already present and commented out:\n\n\nLOCAL_CODE =\n \"$rc{GL_ADMIN_BASE}/local\",\n\n\n\nNotice \"local\" is \nnot\n in \n$HOME\n like in the previous examples!\n\n\n\n\n\n\nthe hooks/scripts are to be added inside your gitolite-admin clone, not on\n    the server.  That is, whereever the above two sections say \ncd $HOME\n,\n    you should read it as \"cd /path/to/your/gitolite-admin-clone\".\n\n\n(The directory \nlocal\n will be within this clone of course, not in\n\n$HOME\n.)\n\n\n\n\n\n\nadd/commit/push as usual.\n\n\n\n\n\n\nFor update hooks, you will of course need to add VREF rule lines to\nappropriate repos in the conf file.  For non-update hooks, you \ndon't\n need\nto run 'gitolite setup' on the server; the push takes care of that.\n\n\n(v3.6+)\n variation: repo-specific hooks\n\uf0c1\n\n\nUntil now, the non-update hooks you specified apply to all repos.  Here's how\nto apply them only to certain repos:\n\n\n\n\n\n\nadd this line in the rc file, within the \n%RC\n block, if it's not already\n    present, or uncomment it if it's already present and commented out:\n\n\nLOCAL_CODE =\n \"$rc{GL_ADMIN_BASE}/local\",\n\n\n\n\n\n\n\nuncomment the 'repo-specific-hooks' line in the rc file or add it to the\n    ENABLE list if it doesn't exist.\n\n\nIf your rc file does not have an ENABLE list, you need to add this to the\nPOST_COMPILE and the POST_CREATE lists.  Click \nhere\n for more on\nall this.\n\n\n\n\n\n\nput your hooks into your gitolite-admin clone, as follows:\n\n\n# on your workstation\ncd /path/to/your/gitolite-admin-clone\nmkdir -p local/hooks/repo-specific\n\n\n\nNow add your hooks to that directory, but instead of using the git\n\"standard\" names (pre-receive, post-receive, post-update), you use\ndescriptive names (e.g. \"deploy\", \"RSS-post\", etc).\n\n\nFor pre-receive or pre-auto-gc you should not use more than one hook.\nIf you really need more than one, ask on the mailing list.\n\n\n\n\n\n\nadd them to the repos you want them to be active in, in your conf file.\n    For example:\n\n\nrepo foo\n    option hook.post-update     =   jenkins\nrepo bar @baz\n    option hook.post-update     =   deploy RSS-post\n\n\n\n\n\n\n\nadd, commit, and push the admin repo.\n\n\n\n\n\n\ntriggers\n\uf0c1\n\n\nadding your own triggers\n\uf0c1\n\n\nFirst, write your trigger code, using the documentation \nhere\n.\nNote especially the sections \"common arguments\" and \"trigger-specific\narguments\".  Look in the shipped triggers for ideas.\n\n\nLet's say your trigger is called \nfoo\n, and it will be a \nPRE_GIT\n trigger.\n\n\n\n\n\n\nadd this line in the rc file, within the \n%RC\n block, if it's not already\n    present, or uncomment it if it's already present and commented out:\n\n\nLOCAL_CODE =\n \"$ENV{HOME}/local\",\n\n\n\n\n\n\n\ncopy the program \nfoo\n into \n$HOME/local/triggers\n.  (Don't forget the\n    \nchmod +x\n!)\n\n\n\n\n\n\nedit \n~/.gitolite.rc\n again, and look for a \nPRE_GIT\n section.  If it\n    exists, add \n'foo',\n (note the trailing comma!) to it.  If it does not\n    exist, add this block just before the \nENABLE\n section:\n\n\nPRE_GIT =\n\n[\n    'foo'\n],\n\n\n\n(again, note the trailing comma at the end of the block!)\n\n\nAfter saving the file, test that this worked by running \ngitolite query-rc PRE_GIT\n;\nyour \nfoo\n should be in the output list.  If it's not, back up\nand double check your work.\n\n\n\n\n\n\nThat should be it.\n\n\nVREFs\n\uf0c1\n\n\nadding your own VREFs\n\uf0c1\n\n\nAdding VREFs is the same as adding the update hook, so please see the section\non \"adding your own update hooks\" above.\n\n\nexample VREFs\n\uf0c1\n\n\nHowever, \nwriting\n a proper VREF is not the same as writing a normal git\n\"update hook\".  A proper VREF does more than just take 3 arguments, do\nsomething, and exit with a non-zero exit code for failure.\n\n\nA VREF is called with at least 4 more arguments after the 3 that git itself\ndefines for an update hook, plus usually at least one or two more.  It also\nreturns a lot more meaningful results via STDOUT.\n\n\nHere are some examples.  I also advise you to keep a browser tab open to the\ndoc on \nVREF arguments\n as you look at these.\n\n\n\n\nImportant:\n\n\nVREFs only come into play for push operations.  When we say \"access\" in\nthis section, we mean only write access.\n  If you want to restrict it\neven for reads, you can do this in a \nPRE_GIT\n trigger; there's an example\nin \ncontrib/triggers/IP-check\n in the gitolite source tree that may be\nuseful as a template.\n\n\n\n\nexample 1: restricting by day of week\n\uf0c1\n\n\nHere's the conf extract to say \"junior devs can only push on weekdays\":\n\n\n\n\nrepo \nfoo\n\n    -\n   VREF/DAY/Sat    \n=\n   @junior-devs\n\n\n    -\n   VREF/DAY/Sun    \n=\n   @junior-devs\n\n\n\n\n\nThe code for this VREF is ridiculously simple:\n\n\n\n\n#!/bin/bash\n\n\necho\n VREF/DAY/\n`date +%a`\n\n\n\n\n\nOn encountering the VREF rules (i.e., when a junior dev tries to push to this\nrepo), gitolite calls the \"DAY\" VREF-maker.  The code within the VREF maker\nsimply echoes something like \"VREF/DAY/Mon\", where the last part is whatever\nthe actual day of the week happens to be.\n\n\nThis output is then treated as a virtual ref and matched against the rules.\nOn a Monday to Friday, nothing happens, because the VREFs generated do not\nmatch any deny rules (or indeed any rules at all).  On weekends, they do\nmatch, and the push is denied.\n\n\nexample 2: restricting by source IP address\n\uf0c1\n\n\nThis one restricts junior developers to push to this repo only from a specific\nnetwork block.  The conf file here is slightly different.  We know that the\nVREF-maker will return with \nsome\n network address (as you'll see in the code\nlater), so we set it up so that the correct network block is allowed and\nanything else is disallowed:\n\n\n\n\nrepo \nfoo\n\n    RW+\n VREF/FROM/192.168.48.0/23   \n=   \n@junior-devs\n\n\n    -\n   VREF/FROM                   \n=\n   @junior-devs\n\n\n\n\n\nThe code is not that complex.  We take the user's actual IP address (this is\navailable as the first word in \n$SSH_CONNECTION\n for ssh users, and for\nsmart-http users, gitolite fakes it and creates that variable!).  We then\ntreat the \"23\" in the VREF rule, which appears to the code as \n$9\n, as the\nnumber of bits in the network address, then compute the network address for\nthe users IP with that number of bits.\n\n\nThis network address is then sent back.  (The \n$9\n is added back at the end,\nbut this is only to enable it to match the VREF rule).\n\n\n\n\n#!/bin/bash\n\n\n\n# exit if no arguments were supplied to the VREF.  This covers the\n\n\n# second VREF rule in the conf above\n\n\n[\n \n-n\n \n$8\n \n]\n || \nexit\n \n0\n\n\n\nfrom\n=\n${\nSSH_CONNECTION\n%%\n *\n}\n\n\n\neval\n \n`ipcalc \n-n\n \n$from\n/\n$9\n`\n       \n# sets env var \nNETWORK\n\n\n\necho\n VREF/FROM/\n$NETWORK\n/\n$9\n\n\n\n\n\nFor a source IP of 192.168.49.97, this runs \nipcalc -n 192.168.49.97/23\n,\nwhich gives the network address 192.168.48.0.  The echo then just sends back\nVREF/FROM/192.168.48.0/23.  This VREF matches the RW+ line.\n\n\nBut if the IP is, say, 192.168.45.67, running \nipcalc -n 192.168.45.67/23\n\ngives you 192.168.44.0.  The echo then send back VREF/FROM/192.18.44.0/23,\nwhich won't match the RW+ line, but will match the next one and thus deny\nthe push.\n\n\n(One thing that may not be obvious in this specific example is that you have\nto be careful when constructing the VREF rule.  For any VREF/FROM/A/B, the\nresult of running \nipcalc -n A/B\n must be A, otherwise this won't work.  That\nis, the bits of the network address after the network bits must be zero).\n\n\nwild repos\n\uf0c1\n\n\nmaking exceptions for \nspecific\n instances of a wild repo\n\uf0c1\n\n\nSometimes you want to specify rules or config for specific instances of a wild\nrepo, while still leaving it to be created by a user in the normal way.\n\n\nThis \nwill not\n work:\n\n\n\n\nrepo \nfoo/..*\n\n\n    C\n                   \n=   blah blah\n\n    RW+\n                 \n=   \nCREATOR\n\n\n    RW\n                  \n=   \nWRITERS\n\n\n    R\n                   \n=   \nREADERS\n\n\n\n# this does \nNOT\n work\n\n\nrepo \nfoo/special-1\n\n    RW+\n                 \n=   sitaram\n    option  foo.bar     =   baz\n\n\n\n\nThe repo will be created as a \nnormal\n (not wild) repo as soon as you push,\nwhich means you can't run the \nperms\n command on it to add people to the\nREADERS and WRITERS \nroles\n, or do other things that wild repos allow.\n\n\nThe mental nudge you need to deal with this is to think what you would do if\nyou had to write the same rule for more than one repo, say, any repo starting\nwith \"foo/special-\" followed by a number.  You'd use a pattern.  And a pattern\nprevents an ordinary repo from being created.\n\n\nSo do this:\n\n\n\n\n# this will work\n\n\nrepo \nfoo/special-[1]\n\n\n    RW+\n                 \n=   sitaram\n    option  foo.bar     =   baz\n\n\n\n\nUsing a pattern for just one repo might sound like a kludge, but it's\nperfectly valid and supported.\n\n\nNote that you do NOT need a \"C\" rule in there, since the pattern is a subset\nof the previous one (\nfoo/..*\n), everything there applies to this repo also.\nIf you're not sure why that is, you may need to read up on \nrule\naccumulation\n.\n\n\nmoving stuff around\n\uf0c1\n\n\nmoving a gitolite install from one machine to another\n\uf0c1\n\n\nSee \nmoving servers\n.", 
            "title": "(quick! how do I...) the cookbook"
        }, 
        {
            "location": "/cookbook/#gitolite-cookbook", 
            "text": "(a.k.a. \"stop all that rambling and just tell me what I need to do!\")   Documentation is meant to be as complete as possible, which means it attempts\nto cover all situations and scenarios.  That makes it harder to read.  However, if you make some assumptions, remove the rationale, justification,\nexceptions and special cases, etc., and generally just say  what  is to be\ndone rather than explain  why , many tasks can be described very easily.  Or, if the main documentation already does that, a cookbook may help you find\nit faster, simply because it's organised differently.  Maybe this will help.  If you run into problems, please check the main\ndocumentation before asking for help.", 
            "title": "gitolite cookbook"
        }, 
        {
            "location": "/cookbook/#administration", 
            "text": "", 
            "title": "administration"
        }, 
        {
            "location": "/cookbook/#separating-key-admin-from-repo-admin", 
            "text": "In gitolite, the person who controls the keys is the most critical in terms of\nsecurity -- because he can always add his own key in your name :-)  Traditionally, the same person also administers repos and permissions.  But\nsometimes you want to separate them.  To separate those roles, put the following in conf/gitolite.conf, and let the\nrepo-manager manage everything through \"actual.conf\":   repo  gitolite-admin     RW+   = key-manager repo-manager     RW+  VREF/NAME/                     = key-manager     -    VREF/NAME/keydir/              =  @all      -    VREF/NAME/conf/gitolite.conf   =  @all  include  actual.conf", 
            "title": "separating \"key admin\" from \"repo admin\""
        }, 
        {
            "location": "/cookbook/#access", 
            "text": "", 
            "title": "access"
        }, 
        {
            "location": "/cookbook/#looking-up-repo-access-from-external-tools", 
            "text": "There are two supported interfaces for this, one in perl and one in shell.\nOther languages should probably use the shell mode.  (The shell mode has a\nvery convenient \"batch\" mode if you need to check many repos at once).  Perl interface : A good intro to this, including a link to code, using\ngitweb as an example can be found by looking for 'repo-specific authorisation\nin gitweb' in the page on  allowing access to gitweb and\ngit-daemon . Some notes:   be sure to read the comments in the code to learn exactly how to adapt it\n    to your needs  in place of the  can_read  function in that code, you can of course use\n     can_write .  In fact, reading the comments in \"Easy.pm\" (look for it in\n    the source) shows you several other interesting tests you can make, like\n     is_admin ,  in_group , and  owns .   Shell interface : If you want to do this from shell, it's even easier. The\nsame \"Easy.pm\" source contains comments that show shell equivalents for each\nof the functions it exports, but here's a sample:  if gitolite access -q reponame username W\nthen\n    ...  You can even test for access to specific branches:  if gitolite access -q reponame username W master\nthen\n    ...  If your gitolite is older than v3.6, you must use the full ref name;\njust 'master' won't do.", 
            "title": "looking up repo access from external tools"
        }, 
        {
            "location": "/cookbook/#allowing-access-by-other-programs", 
            "text": "Giving external tools (like apache) access to gitolite repositories involves\nmaking sure that the unix owner/group and permissions settings allow this.\nThis is all described in the UMASK section in the page on the  rc file ,\nbecause that's the only setting that gitolite controls; every thing else is\npure Unix.", 
            "title": "allowing access by other programs"
        }, 
        {
            "location": "/cookbook/#commands", 
            "text": "", 
            "title": "commands"
        }, 
        {
            "location": "/cookbook/#adding-your-own-commands", 
            "text": "To add a command, say  foo , do this:    add this line in the rc file, within the  %RC  block, if it's not already\n    present, or uncomment it if it's already present and commented out:  LOCAL_CODE =  \"$ENV{HOME}/local\",    copy the program  foo  into  $HOME/local/commands .  (Don't forget the\n     chmod +x !)", 
            "title": "adding your own commands"
        }, 
        {
            "location": "/cookbook/#making-commands-available-to-remote-users", 
            "text": "Once you do the above,  foo  is available as  gitolite foo .  To make it\navailable to remote users (as  ssh git@host foo ), add the line:  `foo`,  (including the comma at the end) to the ENABLE list in the rc file.", 
            "title": "making commands available to remote users"
        }, 
        {
            "location": "/cookbook/#hooks", 
            "text": "Note: the main documentation for this feature starts  here .", 
            "title": "hooks"
        }, 
        {
            "location": "/cookbook/#adding-your-own-update-hooks", 
            "text": "You have some update hooks (for example crlf checking) that you want to\ninclude in gitolite.  Assuming the hook itself is tested and works as a normal git  update hook does (i.e., conforms to what  man githooks  says an update\nhook should do), here's how to do this:    add this line in the rc file, within the  %RC  block, if it's not already\n    present, or uncomment it if it's already present and commented out:  LOCAL_CODE =  \"$ENV{HOME}/local\",    copy your update hook to a subdirectory called VREF under this directory,\n    giving it a suitable name (let's say \"crlf\"):  # log on to gitolite hosting user on the server, then:\ncd $HOME\nmkdir -p local/VREF\ncp your-crlf-update-hook local/VREF/crlf\nchmod +x local/VREF/crlf    in your gitolite-admin clone, edit conf/gitolite.conf and\n    add lines like this:      -   VREF/crlf       =   @all  to each repo that should have that \"update\" hook.  Alternatively, you can simply add this at the end of the\ngitolite.conf file:   repo  @all      -    VREF/crlf        =    @all   Either way, add/commit/push the change to the gitolite-admin repo.", 
            "title": "adding your own update hooks"
        }, 
        {
            "location": "/cookbook/#adding-other-non-update-hooks", 
            "text": "Say you want other hooks, like a post-receive hook.  Here's how:    add this line in the rc file, within the  %RC  block, if it's not already\n    present, or uncomment it if it's already present and commented out:  LOCAL_CODE =  \"$ENV{HOME}/local\",    put your hooks into that directory, in a sub-sub-directory called\n    \"hooks/common\":  # log on to gitolite hosting user on the server, then:\ncd $HOME\nmkdir -p local/hooks/common\ncp your-post-receive-hook local/hooks/common/post-receive\nchmod +x local/hooks/common/post-receive    run  gitolite setup  to have the hooks propagate to existing repos (repos\n    created after this will get them anyway).", 
            "title": "adding other (non-update) hooks"
        }, 
        {
            "location": "/cookbook/#variation-maintain-these-hooks-in-the-gitolite-admin-repo", 
            "text": "Important security note:  If you enable this, anyone who can push changes to the admin repo will\neffectively be able to run any arbitrary command on the server.   See gitolite admin and shell access  for more background.   If you want to maintain these update hooks (VREFs) or non-update hooks\n(post-update, pre-receive, post-receive) in the gitolite-admin repo, instead\nof having to log on to the server and make changes, the procedure is almost\nthe same except for the following differences:    add this line in the rc file, within the  %RC  block, if it's not already\n    present, or uncomment it if it's already present and commented out:  LOCAL_CODE =  \"$rc{GL_ADMIN_BASE}/local\",  Notice \"local\" is  not  in  $HOME  like in the previous examples!    the hooks/scripts are to be added inside your gitolite-admin clone, not on\n    the server.  That is, whereever the above two sections say  cd $HOME ,\n    you should read it as \"cd /path/to/your/gitolite-admin-clone\".  (The directory  local  will be within this clone of course, not in $HOME .)    add/commit/push as usual.    For update hooks, you will of course need to add VREF rule lines to\nappropriate repos in the conf file.  For non-update hooks, you  don't  need\nto run 'gitolite setup' on the server; the push takes care of that.", 
            "title": "variation: maintain these hooks in the gitolite-admin repo"
        }, 
        {
            "location": "/cookbook/#v36-variation-repo-specific-hooks", 
            "text": "Until now, the non-update hooks you specified apply to all repos.  Here's how\nto apply them only to certain repos:    add this line in the rc file, within the  %RC  block, if it's not already\n    present, or uncomment it if it's already present and commented out:  LOCAL_CODE =  \"$rc{GL_ADMIN_BASE}/local\",    uncomment the 'repo-specific-hooks' line in the rc file or add it to the\n    ENABLE list if it doesn't exist.  If your rc file does not have an ENABLE list, you need to add this to the\nPOST_COMPILE and the POST_CREATE lists.  Click  here  for more on\nall this.    put your hooks into your gitolite-admin clone, as follows:  # on your workstation\ncd /path/to/your/gitolite-admin-clone\nmkdir -p local/hooks/repo-specific  Now add your hooks to that directory, but instead of using the git\n\"standard\" names (pre-receive, post-receive, post-update), you use\ndescriptive names (e.g. \"deploy\", \"RSS-post\", etc).  For pre-receive or pre-auto-gc you should not use more than one hook.\nIf you really need more than one, ask on the mailing list.    add them to the repos you want them to be active in, in your conf file.\n    For example:  repo foo\n    option hook.post-update     =   jenkins\nrepo bar @baz\n    option hook.post-update     =   deploy RSS-post    add, commit, and push the admin repo.", 
            "title": "(v3.6+) variation: repo-specific hooks"
        }, 
        {
            "location": "/cookbook/#triggers", 
            "text": "", 
            "title": "triggers"
        }, 
        {
            "location": "/cookbook/#adding-your-own-triggers", 
            "text": "First, write your trigger code, using the documentation  here .\nNote especially the sections \"common arguments\" and \"trigger-specific\narguments\".  Look in the shipped triggers for ideas.  Let's say your trigger is called  foo , and it will be a  PRE_GIT  trigger.    add this line in the rc file, within the  %RC  block, if it's not already\n    present, or uncomment it if it's already present and commented out:  LOCAL_CODE =  \"$ENV{HOME}/local\",    copy the program  foo  into  $HOME/local/triggers .  (Don't forget the\n     chmod +x !)    edit  ~/.gitolite.rc  again, and look for a  PRE_GIT  section.  If it\n    exists, add  'foo',  (note the trailing comma!) to it.  If it does not\n    exist, add this block just before the  ENABLE  section:  PRE_GIT = \n[\n    'foo'\n],  (again, note the trailing comma at the end of the block!)  After saving the file, test that this worked by running  gitolite query-rc PRE_GIT ;\nyour  foo  should be in the output list.  If it's not, back up\nand double check your work.    That should be it.", 
            "title": "adding your own triggers"
        }, 
        {
            "location": "/cookbook/#vrefs", 
            "text": "", 
            "title": "VREFs"
        }, 
        {
            "location": "/cookbook/#adding-your-own-vrefs", 
            "text": "Adding VREFs is the same as adding the update hook, so please see the section\non \"adding your own update hooks\" above.", 
            "title": "adding your own VREFs"
        }, 
        {
            "location": "/cookbook/#example-vrefs", 
            "text": "However,  writing  a proper VREF is not the same as writing a normal git\n\"update hook\".  A proper VREF does more than just take 3 arguments, do\nsomething, and exit with a non-zero exit code for failure.  A VREF is called with at least 4 more arguments after the 3 that git itself\ndefines for an update hook, plus usually at least one or two more.  It also\nreturns a lot more meaningful results via STDOUT.  Here are some examples.  I also advise you to keep a browser tab open to the\ndoc on  VREF arguments  as you look at these.   Important:  VREFs only come into play for push operations.  When we say \"access\" in\nthis section, we mean only write access.   If you want to restrict it\neven for reads, you can do this in a  PRE_GIT  trigger; there's an example\nin  contrib/triggers/IP-check  in the gitolite source tree that may be\nuseful as a template.", 
            "title": "example VREFs"
        }, 
        {
            "location": "/cookbook/#example-1-restricting-by-day-of-week", 
            "text": "Here's the conf extract to say \"junior devs can only push on weekdays\":   repo  foo     -    VREF/DAY/Sat     =    @junior-devs      -    VREF/DAY/Sun     =    @junior-devs   The code for this VREF is ridiculously simple:   #!/bin/bash  echo  VREF/DAY/ `date +%a`   On encountering the VREF rules (i.e., when a junior dev tries to push to this\nrepo), gitolite calls the \"DAY\" VREF-maker.  The code within the VREF maker\nsimply echoes something like \"VREF/DAY/Mon\", where the last part is whatever\nthe actual day of the week happens to be.  This output is then treated as a virtual ref and matched against the rules.\nOn a Monday to Friday, nothing happens, because the VREFs generated do not\nmatch any deny rules (or indeed any rules at all).  On weekends, they do\nmatch, and the push is denied.", 
            "title": "example 1: restricting by day of week"
        }, 
        {
            "location": "/cookbook/#example-2-restricting-by-source-ip-address", 
            "text": "This one restricts junior developers to push to this repo only from a specific\nnetwork block.  The conf file here is slightly different.  We know that the\nVREF-maker will return with  some  network address (as you'll see in the code\nlater), so we set it up so that the correct network block is allowed and\nanything else is disallowed:   repo  foo     RW+  VREF/FROM/192.168.48.0/23    =    @junior-devs      -    VREF/FROM                    =    @junior-devs   The code is not that complex.  We take the user's actual IP address (this is\navailable as the first word in  $SSH_CONNECTION  for ssh users, and for\nsmart-http users, gitolite fakes it and creates that variable!).  We then\ntreat the \"23\" in the VREF rule, which appears to the code as  $9 , as the\nnumber of bits in the network address, then compute the network address for\nthe users IP with that number of bits.  This network address is then sent back.  (The  $9  is added back at the end,\nbut this is only to enable it to match the VREF rule).   #!/bin/bash  # exit if no arguments were supplied to the VREF.  This covers the  # second VREF rule in the conf above  [   -n   $8   ]  ||  exit   0  from = ${ SSH_CONNECTION %%  * }  eval   `ipcalc  -n   $from / $9 `         # sets env var  NETWORK  echo  VREF/FROM/ $NETWORK / $9   For a source IP of 192.168.49.97, this runs  ipcalc -n 192.168.49.97/23 ,\nwhich gives the network address 192.168.48.0.  The echo then just sends back\nVREF/FROM/192.168.48.0/23.  This VREF matches the RW+ line.  But if the IP is, say, 192.168.45.67, running  ipcalc -n 192.168.45.67/23 \ngives you 192.168.44.0.  The echo then send back VREF/FROM/192.18.44.0/23,\nwhich won't match the RW+ line, but will match the next one and thus deny\nthe push.  (One thing that may not be obvious in this specific example is that you have\nto be careful when constructing the VREF rule.  For any VREF/FROM/A/B, the\nresult of running  ipcalc -n A/B  must be A, otherwise this won't work.  That\nis, the bits of the network address after the network bits must be zero).", 
            "title": "example 2: restricting by source IP address"
        }, 
        {
            "location": "/cookbook/#wild-repos", 
            "text": "", 
            "title": "wild repos"
        }, 
        {
            "location": "/cookbook/#making-exceptions-for-specific-instances-of-a-wild-repo", 
            "text": "Sometimes you want to specify rules or config for specific instances of a wild\nrepo, while still leaving it to be created by a user in the normal way.  This  will not  work:   repo  foo/..*      C                     =   blah blah     RW+                   =    CREATOR      RW                    =    WRITERS      R                     =    READERS  # this does  NOT  work  repo  foo/special-1     RW+                   =   sitaram\n    option  foo.bar     =   baz  The repo will be created as a  normal  (not wild) repo as soon as you push,\nwhich means you can't run the  perms  command on it to add people to the\nREADERS and WRITERS  roles , or do other things that wild repos allow.  The mental nudge you need to deal with this is to think what you would do if\nyou had to write the same rule for more than one repo, say, any repo starting\nwith \"foo/special-\" followed by a number.  You'd use a pattern.  And a pattern\nprevents an ordinary repo from being created.  So do this:   # this will work  repo  foo/special-[1]      RW+                   =   sitaram\n    option  foo.bar     =   baz  Using a pattern for just one repo might sound like a kludge, but it's\nperfectly valid and supported.  Note that you do NOT need a \"C\" rule in there, since the pattern is a subset\nof the previous one ( foo/..* ), everything there applies to this repo also.\nIf you're not sure why that is, you may need to read up on  rule\naccumulation .", 
            "title": "making exceptions for specific instances of a wild repo"
        }, 
        {
            "location": "/cookbook/#moving-stuff-around", 
            "text": "", 
            "title": "moving stuff around"
        }, 
        {
            "location": "/cookbook/#moving-a-gitolite-install-from-one-machine-to-another", 
            "text": "See  moving servers .", 
            "title": "moving a gitolite install from one machine to another"
        }, 
        {
            "location": "/emergencies/", 
            "text": "help for emergencies\n\uf0c1\n\n\n\"Don't Panic!\"\n\n\n\n\n\n\nIMPORTANT\n\n\nAlmost nothing in gitolite requires \nroot\n (with some obvious exceptions).\nUnless the documentation says \"do this from \nroot\n\", assume it is to be\ndone from the \nhosting user\n account.\n\n\n\n\ninstall/setup issues\n\uf0c1\n\n\nMost install/setup issues in ssh mode are caused by lack of ssh knowledge.\nSsh is a complex beast, and can cause problems for people who are not familiar\nwith its quirks.\n\n\nBe prepared to spend some time reading the \nssh\n documentation that comes\nwith gitolite\n.\n\n\nlost admin key/access\n\uf0c1\n\n\nIf you lost your gitolite \nadmin\n key or access, here's what you do.  We'll\nassume your username is \"alice\" (i.e., alice has RW or RW+ permissions on the\ngitolite-admin repo).\n\n\n\n\n\n\nMake yourself a new keypair and copy the public key to the server as\n    'alice.pub'.\n\n\n\n\n\n\nLog on to the server, and run \ngitolite setup -pk alice.pub\n.\n\n\n\n\n\n\nThat's it; the new alice.pub file replaces whatever existed in the repo\nbefore.\n\n\nbypassing gitolite\n\uf0c1\n\n\nYou may have lost access because of a conf file error, in which case the above\ntrick (which merely changes a pubkey) won't help.  What you want is to make\nchanges to the gitolite-admin repo (or perhaps just rewind) and push that.\nHere's how to do that:\n\n\n\n\n\n\nLog on to the server.\n\n\n\n\n\n\nClone the admin repo using the full path:\n\n\ngit clone $HOME/repositories/gitolite-admin.git temp\n\n\n\n\n\n\n\n'cd' to this clone and make whatever changes you want -- add/replace a\n    key, 'git revert' or 'git reset --hard' to an older commit, etc.  Anything\n    you need to fix the problem, really.\n\n\n\n\n\n\nRun \ngitolite push\n (or possibly \ngitolite push -f\n).  \nNote that's\n    'gitolite push', not 'git push'\n.\n\n\n\n\n\n\n\n\nNOTE\n: gitolite does \nno access checking\n when you do this!\n\n\n\nbotched something?\n\uf0c1\n\n\nfixing botched repos\n\uf0c1\n\n\nIf you copied some repos from somewhere else, or mucked with the hooks for\nsome reason, or deleted any gitolite-specific files, or tried any other\n\"behind the scenes\" stunts, the quickest, sanest, way to fix everything up is:\n\n\n\n\nMake sure any new repos you copied in are mentioned in the gitolite.conf\n    in some 'repo' line and the change pushed.\n\n\nThen run \ngitolite setup\n on the server.\n\n\n\n\nIf the repo you botched is a wild repo, there's a bit more to be done.  Wild\nrepos store the creator name in a file called gl-creator, and the data managed\nby the \nperms\n command in a file called \"gl-perms\".  If these files got\ndeleted, you may have to manually recreate them.  The format is very simple\nand guessable by looking at those files on any other wild repo.\n\n\ncleaning out a botched install\n\uf0c1\n\n\nHere's a list of files and directories to deal with:\n\n\n\n\n\n\nGitolite sources\n -- can be found by running \nwhich gitolite\n.  If it's\n    a symlink, go to its target directory.\n\n\nIf the \nwhich\n command does not work, you'll have to find this info from\nlooking at the 'command=' option in pubkey lines in\n\n~/.ssh/authorized_keys\n.\n\n\n\n\n\n\nGitolite admin directory\n -- \n$HOME/.gitolite\n.  Save the 'logs'\n    directory if you want to preserve them for any reason.\n\n\n\n\n\n\nThe rc file\n -- \n$HOME/.gitolite.rc\n.  If you made any changes to it\n    you can save it as some other name instead of deleting it.\n\n\n\n\n\n\nThe gitolite-admin repo\n -- \n$HOME/repositories/gitolite-admin.git\n.\n    You can clone it somewhere to save it before blowing it away if you wish.\n\n\n\n\n\n\nGit repositories\n -- \n$HOME/repositories\n.  The install process will\n    not touch any existing repos except 'gitolite-admin.git', so you do not\n    have to blow away (or move) your work repos to fix a botched install.\n\n\nOnly when you update the conf to include those repos and push the changes\nwill those repos be touched.  And even then all that happens is that the\nupdate hook, if any, is replaced with gitolite's own hook.\n\n\n\n\n\n\nSsh stuff\n -- exercise caution when doing this, but in general it\n    should be safe to delete all lines between the \"gitolite start\" and\n    \"gitolite end\" markers in \n$HOME/.ssh/authorized_keys\n.\n\n\nGitolite does not touch any other files in the ssh directory.\n\n\n\n\n\n\ncommon errors\n\uf0c1\n\n\n\n\n\n\nWARNING: keydir/\nyourname\n.pub duplicates a non-gitolite key, sshd will ignore it\n\n\nYou used a key that is already set to give you shell access.  You cannot\nuse the same key to get shell access as well as access gitolite repos.\n\n\nSolution: use a different keypair for gitolite.  There's a wee bit more on\nthis in the \nsetup\n section of the install page.  Also see\n\nwhy bypassing causes a problem\n and both the pages linked from\n\nssh\n for background.\n\n\n\n\n\n\nEmpty compile time value given to use lib at hooks/update line 6\n\n\n(followed by \nCan't locate Gitolite/Hooks/Update.pm in @INC\n a couple of\nlines later).\n\n\nYou're bypassing gitolite.  You cloned the repo using the full path (i.e.,\nincluding the \nrepositories/\n prefix), either directly on the server, or\nvia ssh with a key that gives you \nshell\n access.\n\n\nSolution: same as for the previous bullet.\n\n\nNOTE: If you really \nmust\n do it, and this is on the server and is a\none-time thing, you can try \ngitolite push\n instead of \ngit push\n.\n\nBUT\n... this defeats all gitolite access control, so if you're going to\ndo this often, maybe you don't need gitolite!\n\n\n\n\n\n\nuncommon errors\n\uf0c1\n\n\n(This page intentionally left blank)\n\n\nnon-standard configs that'll trip you up\n\uf0c1\n\n\n\n\n\n\nIMPORTANT\n: although a default openssh config will not do this (AFAIK),\n    \ndo not\n allow the user to set environment variables if you care about\n    security at all.\n\n\n\n\n\n\nIf your 'git' binary is in a non-PATH location, or you have more than one\n    version and want a specific one to be picked up, you will have to add a\n    line like this at the end of the rc file (outside the \n%RC\n hash, but\n    before the \n1;\n line):\n\n\n$ENV{PATH} = \"/your/git/path:$ENV{PATH}\";\n\n\n\n\n\n\n\nIf you have your sshd configured to put the authorized_keys file\n    somewhere other than the default (which is in .ssh in the \nhosting\n    user\n's home directory), you'll probably have to roll your own ssh\n    handling, either disabling 'ssh-authkeys' in the rc file, or building on\n    that somehow (maybe a post-processing step that copies the relevant auth\n    keys lines from the default file to the other).\n\n\n\n\n\n\nIf you have sshd setup to not allow incoming ssh for the hosting user,\n    gitolite won't work.  Check things like \nAllowusers\n setting in\n    \n/etc/ssh/sshd_config\n etc. to make sure.\n\n\n\n\n\n\nIf you have the home directory in a partition that is mounted noexec,\n    gitolite won't work.  I believe it would be sufficient if the \".gitolite\"\n    directory were moved to a different mount and symlinked, but please test\n    thoroughly.  A failure to execute a hook does not throw up any errors or\n    warnings for you to notice!\n\n\n\n\n\n\nIf the default shell is something like /bin/false, and/or not listed in\n    /etc/shells, there might be problems.\n\n\n\n\n\n\nthings that are not gitolite problems\n\uf0c1\n\n\nThere are several things that appear to be gitolite problems but are not.  I\ncannot help with most of these (although the good folks on irc or the mailing\nlist -- see \ncontact\n -- might be able to; they certainly appear to have a\nlot more patience than I do, bless 'em!)\n\n\n\n\n\n\nClient side software\n\n\n\n\nputty/plink\n\n\njgit/Eclipse\n\n\nMac OS client \nor\n server\n\n\nputty/plink\n\n\nwindows as a server\n\n\n...probably some more I forgot; will update this list as I remember...\n\n\ndid I mention putty/plink?\n\n\n\n\n\n\n\n\nSsh\n\n\nThe \nsuperstar\n of the \"not a gitolite problem\" category is actually ssh.\n\n\nSurprised?  It's a common misunderstanding; see \nthis section\n in\nthe concepts page, and then \nthis page\n for details.\n\n\nEverything I know is in that latter link, and the two more pages it points\nto.  Please email me about ssh ONLY if you find something wrong or missing\nin those pages.\n\n\n\n\n\n\nGit\n\n\nI wish I had a dollar for each time someone did a \nfirst push\n on a new\nrepo, got an error because there were \"no refs in common (etc.)\", and\nasked me why gitolite was not allowing the push.\n\n\nGitolite is designed to look like just another bare repo server to a\nclient (except requiring public keys -- no passwords allowed).  It is\n\ncompletely transparent\n when there is no authorisation failure (i.e.,\nwhen the access is allowed, the remote client has no way of knowing\ngitolite was even installed!)\n\n\nEven \"on disk\", apart from reserving the \nupdate\n hook for itself,\ngitolite does nothing to your bare repos unless you tell it to (for\nexample, adding 'gitweb.owner' and such to the config file).\n\n\nBEFORE you think gitolite is the problem, try the same thing with a normal\nbare repo.  In most cases you can play with it just by doing something\nlike this:\n\n\nmkdir /tmp/throwaway\ncd    /tmp/throwaway\ngit clone --mirror \nsome repo you have a URL for\n bare.git\ngit clone bare.git worktree\ncd worktree\n\n...try stuff", 
            "title": "emergency!!"
        }, 
        {
            "location": "/emergencies/#help-for-emergencies", 
            "text": "\"Don't Panic!\"    IMPORTANT  Almost nothing in gitolite requires  root  (with some obvious exceptions).\nUnless the documentation says \"do this from  root \", assume it is to be\ndone from the  hosting user  account.", 
            "title": "help for emergencies"
        }, 
        {
            "location": "/emergencies/#installsetup-issues", 
            "text": "Most install/setup issues in ssh mode are caused by lack of ssh knowledge.\nSsh is a complex beast, and can cause problems for people who are not familiar\nwith its quirks.  Be prepared to spend some time reading the  ssh  documentation that comes\nwith gitolite .", 
            "title": "install/setup issues"
        }, 
        {
            "location": "/emergencies/#lost-admin-keyaccess", 
            "text": "If you lost your gitolite  admin  key or access, here's what you do.  We'll\nassume your username is \"alice\" (i.e., alice has RW or RW+ permissions on the\ngitolite-admin repo).    Make yourself a new keypair and copy the public key to the server as\n    'alice.pub'.    Log on to the server, and run  gitolite setup -pk alice.pub .    That's it; the new alice.pub file replaces whatever existed in the repo\nbefore.", 
            "title": "lost admin key/access"
        }, 
        {
            "location": "/emergencies/#bypassing-gitolite", 
            "text": "You may have lost access because of a conf file error, in which case the above\ntrick (which merely changes a pubkey) won't help.  What you want is to make\nchanges to the gitolite-admin repo (or perhaps just rewind) and push that.\nHere's how to do that:    Log on to the server.    Clone the admin repo using the full path:  git clone $HOME/repositories/gitolite-admin.git temp    'cd' to this clone and make whatever changes you want -- add/replace a\n    key, 'git revert' or 'git reset --hard' to an older commit, etc.  Anything\n    you need to fix the problem, really.    Run  gitolite push  (or possibly  gitolite push -f ).   Note that's\n    'gitolite push', not 'git push' .     NOTE : gitolite does  no access checking  when you do this!", 
            "title": "bypassing gitolite"
        }, 
        {
            "location": "/emergencies/#botched-something", 
            "text": "", 
            "title": "botched something?"
        }, 
        {
            "location": "/emergencies/#fixing-botched-repos", 
            "text": "If you copied some repos from somewhere else, or mucked with the hooks for\nsome reason, or deleted any gitolite-specific files, or tried any other\n\"behind the scenes\" stunts, the quickest, sanest, way to fix everything up is:   Make sure any new repos you copied in are mentioned in the gitolite.conf\n    in some 'repo' line and the change pushed.  Then run  gitolite setup  on the server.   If the repo you botched is a wild repo, there's a bit more to be done.  Wild\nrepos store the creator name in a file called gl-creator, and the data managed\nby the  perms  command in a file called \"gl-perms\".  If these files got\ndeleted, you may have to manually recreate them.  The format is very simple\nand guessable by looking at those files on any other wild repo.", 
            "title": "fixing botched repos"
        }, 
        {
            "location": "/emergencies/#cleaning-out-a-botched-install", 
            "text": "Here's a list of files and directories to deal with:    Gitolite sources  -- can be found by running  which gitolite .  If it's\n    a symlink, go to its target directory.  If the  which  command does not work, you'll have to find this info from\nlooking at the 'command=' option in pubkey lines in ~/.ssh/authorized_keys .    Gitolite admin directory  --  $HOME/.gitolite .  Save the 'logs'\n    directory if you want to preserve them for any reason.    The rc file  --  $HOME/.gitolite.rc .  If you made any changes to it\n    you can save it as some other name instead of deleting it.    The gitolite-admin repo  --  $HOME/repositories/gitolite-admin.git .\n    You can clone it somewhere to save it before blowing it away if you wish.    Git repositories  --  $HOME/repositories .  The install process will\n    not touch any existing repos except 'gitolite-admin.git', so you do not\n    have to blow away (or move) your work repos to fix a botched install.  Only when you update the conf to include those repos and push the changes\nwill those repos be touched.  And even then all that happens is that the\nupdate hook, if any, is replaced with gitolite's own hook.    Ssh stuff  -- exercise caution when doing this, but in general it\n    should be safe to delete all lines between the \"gitolite start\" and\n    \"gitolite end\" markers in  $HOME/.ssh/authorized_keys .  Gitolite does not touch any other files in the ssh directory.", 
            "title": "cleaning out a botched install"
        }, 
        {
            "location": "/emergencies/#common-errors", 
            "text": "WARNING: keydir/ yourname .pub duplicates a non-gitolite key, sshd will ignore it  You used a key that is already set to give you shell access.  You cannot\nuse the same key to get shell access as well as access gitolite repos.  Solution: use a different keypair for gitolite.  There's a wee bit more on\nthis in the  setup  section of the install page.  Also see why bypassing causes a problem  and both the pages linked from ssh  for background.    Empty compile time value given to use lib at hooks/update line 6  (followed by  Can't locate Gitolite/Hooks/Update.pm in @INC  a couple of\nlines later).  You're bypassing gitolite.  You cloned the repo using the full path (i.e.,\nincluding the  repositories/  prefix), either directly on the server, or\nvia ssh with a key that gives you  shell  access.  Solution: same as for the previous bullet.  NOTE: If you really  must  do it, and this is on the server and is a\none-time thing, you can try  gitolite push  instead of  git push . BUT ... this defeats all gitolite access control, so if you're going to\ndo this often, maybe you don't need gitolite!", 
            "title": "common errors"
        }, 
        {
            "location": "/emergencies/#uncommon-errors", 
            "text": "(This page intentionally left blank)", 
            "title": "uncommon errors"
        }, 
        {
            "location": "/emergencies/#non-standard-configs-thatll-trip-you-up", 
            "text": "IMPORTANT : although a default openssh config will not do this (AFAIK),\n     do not  allow the user to set environment variables if you care about\n    security at all.    If your 'git' binary is in a non-PATH location, or you have more than one\n    version and want a specific one to be picked up, you will have to add a\n    line like this at the end of the rc file (outside the  %RC  hash, but\n    before the  1;  line):  $ENV{PATH} = \"/your/git/path:$ENV{PATH}\";    If you have your sshd configured to put the authorized_keys file\n    somewhere other than the default (which is in .ssh in the  hosting\n    user 's home directory), you'll probably have to roll your own ssh\n    handling, either disabling 'ssh-authkeys' in the rc file, or building on\n    that somehow (maybe a post-processing step that copies the relevant auth\n    keys lines from the default file to the other).    If you have sshd setup to not allow incoming ssh for the hosting user,\n    gitolite won't work.  Check things like  Allowusers  setting in\n     /etc/ssh/sshd_config  etc. to make sure.    If you have the home directory in a partition that is mounted noexec,\n    gitolite won't work.  I believe it would be sufficient if the \".gitolite\"\n    directory were moved to a different mount and symlinked, but please test\n    thoroughly.  A failure to execute a hook does not throw up any errors or\n    warnings for you to notice!    If the default shell is something like /bin/false, and/or not listed in\n    /etc/shells, there might be problems.", 
            "title": "non-standard configs that'll trip you up"
        }, 
        {
            "location": "/emergencies/#things-that-are-not-gitolite-problems", 
            "text": "There are several things that appear to be gitolite problems but are not.  I\ncannot help with most of these (although the good folks on irc or the mailing\nlist -- see  contact  -- might be able to; they certainly appear to have a\nlot more patience than I do, bless 'em!)    Client side software   putty/plink  jgit/Eclipse  Mac OS client  or  server  putty/plink  windows as a server  ...probably some more I forgot; will update this list as I remember...  did I mention putty/plink?     Ssh  The  superstar  of the \"not a gitolite problem\" category is actually ssh.  Surprised?  It's a common misunderstanding; see  this section  in\nthe concepts page, and then  this page  for details.  Everything I know is in that latter link, and the two more pages it points\nto.  Please email me about ssh ONLY if you find something wrong or missing\nin those pages.    Git  I wish I had a dollar for each time someone did a  first push  on a new\nrepo, got an error because there were \"no refs in common (etc.)\", and\nasked me why gitolite was not allowing the push.  Gitolite is designed to look like just another bare repo server to a\nclient (except requiring public keys -- no passwords allowed).  It is completely transparent  when there is no authorisation failure (i.e.,\nwhen the access is allowed, the remote client has no way of knowing\ngitolite was even installed!)  Even \"on disk\", apart from reserving the  update  hook for itself,\ngitolite does nothing to your bare repos unless you tell it to (for\nexample, adding 'gitweb.owner' and such to the config file).  BEFORE you think gitolite is the problem, try the same thing with a normal\nbare repo.  In most cases you can play with it just by doing something\nlike this:  mkdir /tmp/throwaway\ncd    /tmp/throwaway\ngit clone --mirror  some repo you have a URL for  bare.git\ngit clone bare.git worktree\ncd worktree ...try stuff", 
            "title": "things that are not gitolite problems"
        }, 
        {
            "location": "/ssh/", 
            "text": "ssh\n\uf0c1\n\n\n\n\nIf you're installing gitolite, you're a \"system admin\", like it or not.  If\nyou're using the default ssh mode (i.e., not \nhttp\n mode), ssh is a\nnecessary skill.  Please take the time to learn at least enough to get\npasswordless access working.\n\n\nYou \nmust\n read both these pages before asking for\nhelp:\n\n\n\n\n\n\nGitolite and ssh\n explains how gitolite uses openssh features to\n    create any number of virtual users over just one actual (unix) user, and\n    distinguish between them by their public keys.\n\n\n\n\n\n\nSsh troubleshooting\n is a rather long page that, as far as I know,\n    covers almost every known ssh related issue.  If you find something\n    missing, send me an email with details so I can update it.\n\n\n\n\n\n\nssh related features\n\uf0c1\n\n\nThis section will explain why an \"ssh issue\" is almost never a \"gitolite\nissue\", and, indirectly, why I dont get too excited about the former.\n\n\nTo start with, as \nthis\n section of the \nconcepts\n page explained,\n\nGitolite does not do authentication.  It only does\nauthorisation\n.\n\n\nLet's recap the definition of those words:\n\n\n\n\nAuthentication\n is the process of verifying that you are who you claim\n  to be.  An authentication system will establish that I am the user\n  \"sitaram\" on my work system.  The one behind gmail will similarly\n  establish that I am \"sitaramc\".  And so on...\n\n\nAuthorisation\n is the process of asking what you want to do and\n  deciding if you're allowed to do it or not.\n\n\n\n\nNow, if you managed to read the \ngitolite and ssh\n link above, you know\nthat gitolite is meant to be invoked as:\n\n\n/full/path/to/gitolite-shell some-authenticated-gitolite-username\n\n\n\n(where the \"gitolite username\" is a \"virtual\" username; it does not have to\nbe, and usually \nisn't\n, an actual \nunix\n username).\n\n\nAs you can see, authentication happens before gitolite is called.\n\n\nbut... but... you have all that ssh stuff in gitolite!\n\uf0c1\n\n\nNo I don't.  Not in \"core\" gitolite from v3 onwards :-)\n\n\nThe default setup does use ssh keys, but it's only helping you \nsetup\n\nssh-based authentication \nas a convenience to you\n.  But in fact it is a\n\ncompletely\n separate program that you can disable (in the rc file) or replace\nwith something else of your choice.\n\n\nFor example, in both \nsmart http\n and ldap-backed sshd, gitolite has no\nrole to play in creating users, setting up their passwords/keys, etc.\n\n\nso you're basically saying you won't support \"X\"\n\uf0c1\n\n\n(where \"X\" is some ssh related behaviour change or feature)\n\n\nWell, if it's not a security issue I won't.  But since it's no longer part of\n\"core\" gitolite, I can be much more relaxed about taking patches, or even\nalternative implementations.\n\n\nWhile we're on the subject, locking someone out is \nnot\n a security issue.\nEven if you \nlost the admin key\n, the docs tell you how to recover\nfrom such errors.  You do need some password based method to get a shell\ncommand line on the server, of course.\n\n\nusing other authentication systems with gitolite\n\uf0c1\n\n\nThe bottom line in terms of how to invoke gitolite has been described above,\nand as long as you manage to do that gitolite won't even know how the\nauthentication was done.  Which in turn means you can use whatever\nauthentication scheme you want.\n\n\nIt also expects the \nSSH_ORIGINAL_COMMAND\n environment variable to contain the\nfull command (typically starting with git-receive-pack or git-upload-pack)\nthat the client sent.  Also, when using \nsmart http\n, things are somewhat\ndifferent: gitolite uses certain environment variables that it expects httpd\nto have set up.  Even the user name comes from the \nREMOTE_USER\n environment\nvariable instead of as a command line argument in this case.\n\n\nHowever, it has to be an authentication system that is compatible with sshd or\nhttpd in some form.  Why?  Because the git \nclient\n accessing the server only\nknows those 2 protocols to \"speak git\".  (Well, the \ngit://\n protocol is\nunauthenticated, and \nfile://\n doesn't really apply to this discussion, so\nwe're ignoring those).\n\n\nFor example, let's say you have an LDAP-based authentication system somewhere.\nIt is possible to make apache use that to authenticate users, so when a user\naccesses a git url using \nhttp://sitaram:password@git.example.com/repo\n, it is\nLDAP that does the actual authentication.  [I wouldn't know how to do it but I\nknow it is possible.  Patches to this doc explaining how are welcome!]\n\n\nThere are also ssh daemons that use LDAP to store the authorised keys (instead\nof putting them all in \n~/.ssh/authorized_keys\n).  The clients will still need\nto generate keypairs and send them to the admin, but they can be more\ncentrally stored and perhaps used by other programs or tools simultaneously,\nwhich can be useful.", 
            "title": "ssh"
        }, 
        {
            "location": "/ssh/#ssh", 
            "text": "If you're installing gitolite, you're a \"system admin\", like it or not.  If\nyou're using the default ssh mode (i.e., not  http  mode), ssh is a\nnecessary skill.  Please take the time to learn at least enough to get\npasswordless access working.  You  must  read both these pages before asking for\nhelp:    Gitolite and ssh  explains how gitolite uses openssh features to\n    create any number of virtual users over just one actual (unix) user, and\n    distinguish between them by their public keys.    Ssh troubleshooting  is a rather long page that, as far as I know,\n    covers almost every known ssh related issue.  If you find something\n    missing, send me an email with details so I can update it.", 
            "title": "ssh"
        }, 
        {
            "location": "/ssh/#ssh-related-features", 
            "text": "This section will explain why an \"ssh issue\" is almost never a \"gitolite\nissue\", and, indirectly, why I dont get too excited about the former.  To start with, as  this  section of the  concepts  page explained, Gitolite does not do authentication.  It only does\nauthorisation .  Let's recap the definition of those words:   Authentication  is the process of verifying that you are who you claim\n  to be.  An authentication system will establish that I am the user\n  \"sitaram\" on my work system.  The one behind gmail will similarly\n  establish that I am \"sitaramc\".  And so on...  Authorisation  is the process of asking what you want to do and\n  deciding if you're allowed to do it or not.   Now, if you managed to read the  gitolite and ssh  link above, you know\nthat gitolite is meant to be invoked as:  /full/path/to/gitolite-shell some-authenticated-gitolite-username  (where the \"gitolite username\" is a \"virtual\" username; it does not have to\nbe, and usually  isn't , an actual  unix  username).  As you can see, authentication happens before gitolite is called.", 
            "title": "ssh related features"
        }, 
        {
            "location": "/ssh/#but-but-you-have-all-that-ssh-stuff-in-gitolite", 
            "text": "No I don't.  Not in \"core\" gitolite from v3 onwards :-)  The default setup does use ssh keys, but it's only helping you  setup \nssh-based authentication  as a convenience to you .  But in fact it is a completely  separate program that you can disable (in the rc file) or replace\nwith something else of your choice.  For example, in both  smart http  and ldap-backed sshd, gitolite has no\nrole to play in creating users, setting up their passwords/keys, etc.", 
            "title": "but... but... you have all that ssh stuff in gitolite!"
        }, 
        {
            "location": "/ssh/#so-youre-basically-saying-you-wont-support-x", 
            "text": "(where \"X\" is some ssh related behaviour change or feature)  Well, if it's not a security issue I won't.  But since it's no longer part of\n\"core\" gitolite, I can be much more relaxed about taking patches, or even\nalternative implementations.  While we're on the subject, locking someone out is  not  a security issue.\nEven if you  lost the admin key , the docs tell you how to recover\nfrom such errors.  You do need some password based method to get a shell\ncommand line on the server, of course.", 
            "title": "so you're basically saying you won't support \"X\""
        }, 
        {
            "location": "/ssh/#using-other-authentication-systems-with-gitolite", 
            "text": "The bottom line in terms of how to invoke gitolite has been described above,\nand as long as you manage to do that gitolite won't even know how the\nauthentication was done.  Which in turn means you can use whatever\nauthentication scheme you want.  It also expects the  SSH_ORIGINAL_COMMAND  environment variable to contain the\nfull command (typically starting with git-receive-pack or git-upload-pack)\nthat the client sent.  Also, when using  smart http , things are somewhat\ndifferent: gitolite uses certain environment variables that it expects httpd\nto have set up.  Even the user name comes from the  REMOTE_USER  environment\nvariable instead of as a command line argument in this case.  However, it has to be an authentication system that is compatible with sshd or\nhttpd in some form.  Why?  Because the git  client  accessing the server only\nknows those 2 protocols to \"speak git\".  (Well, the  git://  protocol is\nunauthenticated, and  file://  doesn't really apply to this discussion, so\nwe're ignoring those).  For example, let's say you have an LDAP-based authentication system somewhere.\nIt is possible to make apache use that to authenticate users, so when a user\naccesses a git url using  http://sitaram:password@git.example.com/repo , it is\nLDAP that does the actual authentication.  [I wouldn't know how to do it but I\nknow it is possible.  Patches to this doc explaining how are welcome!]  There are also ssh daemons that use LDAP to store the authorised keys (instead\nof putting them all in  ~/.ssh/authorized_keys ).  The clients will still need\nto generate keypairs and send them to the admin, but they can be more\ncentrally stored and perhaps used by other programs or tools simultaneously,\nwhich can be useful.", 
            "title": "using other authentication systems with gitolite"
        }, 
        {
            "location": "/glssh/", 
            "text": "how gitolite uses ssh\n\uf0c1\n\n\n\n\nAlthough other forms of authentications exist (see the section on\n\nauthentication versus authorisation\n), ssh is the one that most git\nusers use.\n\n\nTherefore, gitolite is (usually) heavily dependent on ssh\n.\n\n\nMost people didn't realise this, and even if they did they don't know ssh\nwell enough to help themselves.  If you don't understand how ssh public key\nauthentication works, or how the \n~/.ssh/authorized_keys\n file can be used to\nrestrict users, etc., you will have endless amounts of trouble getting\ngitolite to work, because you'll be attacking the wrong problem.\n\n\nSo please please please understand this before tearing your hair out and\nblaming \ngit/gitolite\n for whatever is going wrong with your setup :-)\n\n\nssh basics\n\uf0c1\n\n\nLet's start with some basics, focusing \nonly\n on the pieces relevant to\n\ngitolite\n.  If this is not detailed enough, please use google and learn more\nfrom somewhere, or maybe buy the OReilly ssh book.\n\n\n\n\n\n\nYou can login to an ssh server by typing a password, but ssh can also use\n    \npublic-private keys\n (also called \"key pairs\") for authentication.\n    \ngitolite\n \nrequires\n you to use this mechanism for your users -- they\n    cannot log in using passwords.  Hopefully by the time you finish reading\n    this page you will understand why :-)\n\n\nThe way you set this up is you generate a key pair on your workstation,\nand give the server the public key.  (I need not add that the \"private\"\nkey must be, well, kept \nprivate\n!)\n\n\n\n\n\n\nGenerating a key pair on your workstation\n is done by running the\n    command \nssh-keygen -t rsa\n.  This produces two files in \n~/.ssh\n.  One is\n    \nid_rsa\n; this is the \nprivate\n key -- \nnever\n let it out of your\n    machine.  The other is \nid_rsa.pub\n, which is the corresponding public\n    key.  This public key is usually just one long line of text.\n\n\n\n\nOn Windows machines with msysgit installed, you should do this from\n  within a \"git bash\" window.  The command will report the full path where\n  the files have been written; make a note of this, and use those files in\n  any of the description that follows.\n\n\n\n\n\n\n\n\nAdding your public key to the server\n's \n~/.ssh/authorized_keys\n\n    file is how ssh uses pubkeys to authenticate users.  Let's say\n    sita@work.station is trying to log in as git@serv.er.  What you have to do\n    is take the \n~/.ssh/id_rsa.pub\n file for user sita on work.station and\n    append its contents (remember it's only one line) to\n    \n~/.ssh/authorized_keys\n for user git on serv.er.\n\n\nThe \nauthorized_keys\n file can have multiple public keys (from many\ndifferent people) added to it so any of them can log in to git@serv.er.\n\n\nIn the normal case (not gitolite, but your normal everyday shell access),\nthere's a command that does this, \nssh-copy-id\n, which also fixes up\npermissions etc., as needed, since sshd is a little picky about allowing\npubkey access if permissions on the server are loose.  Or you can do it\nmanually, as long as you know what you're doing and you're careful not to\nerase or overwrite the existing contents of \n~/.ssh/authorized_keys\n on\nthe server!\n\n\nBut with gitolite, it does this for you; see \nadding and removing\nusers\n for more.\n\n\n\n\nTroubleshooting pubkey authentication failures\n: if you are unable to\n  get ssh access to the server after doing all this, you'll have to look\n  in \n/var/log/secure\n or \n/var/log/auth.log\n or some such file on the\n  server to see what specific error \nsshd\n is complaining about.\n\n\n\n\n\n\n\n\nRestricting users to specific commands\n is very important for gitolite.\n    If you read \nman sshd\n and look for \nauthorized_keys file format\n, you'll\n    see a lot of options you can add to the public key line, which restrict\n    the incoming user in various ways.  In particular, note the \ncommand=\n\n    option, which means \"regardless of what the incoming user is asking to do,\n    forcibly run this command instead\".\n\n\nAlso note that when there are many public keys (i.e., lines) in the\n\nauthorized_keys\n file, each line can have a \ndifferent\n set of options\nand \ncommand=\n values.\n\n\nWithout this \ncommand=\n option, the ssh daemon will simply give you a\nshell, which is not what we want for our gitolite keys (although we may\nwell have other keys which we use to get a shell).\n\n\nThis is the backbone of what makes gitolite work; please make sure you\nunderstand this\n.\n\n\n\n\n\n\nhow does gitolite use all this ssh magic?\n\uf0c1\n\n\nThese are two different questions you ought to be having by now: \n\n\n\n\nHow does it distinguish between me and someone else, since we're all\n    logging in as the same remote user \"git\".\n\n\nHow does it restrict what I can do within a repository.\n\n\n\n\nrestricting shell access/distinguishing one user from another\n\uf0c1\n\n\nThe answer to the first question is the \ncommand=\n we talked about before.  If\nyou look in the \nauthorized_keys\n file, you'll see entries like this (I chopped\noff the ends of course; they're pretty long lines):\n\n\ncommand=\"[path]/gitolite-shell sitaram\",[more options] ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA18S2t...\ncommand=\"[path]/gitolite-shell usertwo\",[more options] ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEArXtCT...\n\n\n\nFirst, it finds out which of the public keys in this file match the incoming\nlogin.  That's crypto stuff, and I won't go into it.  Once the match has been\nfound, it will run the command given on that line; e.g., if I logged in, it\nwould run \n[path]/gitolite-shell sitaram\n.  So the first thing to note is\nthat such users do not get \"shell access\", which is good!\n\n\nBefore running the command, however, sshd sets up an environment variable\ncalled \nSSH_ORIGINAL_COMMAND\n which contains the actual git command that your\nworkstation sent out.  This is the command that \nwould have run\n if you did\nnot have the \ncommand=\n part in the authorised keys file.\n\n\nWhen \ngitolite-shell\n gets control, it looks at the first argument\n(\"sitaram\", \"usertwo\", etc) to determine who you are.  It then looks at the\n\nSSH_ORIGINAL_COMMAND\n variable to find out which repository you want to\naccess, and whether you're reading or writing.\n\n\nNow that it has a user, repository, and access requested (read/write), gitolite looks\nat its config file, and either allows or rejects the request.\n\n\nBut this cannot differentiate between different branches within a repo; that\nhas to be done separately.\n\n\nrestricting branch level actions\n\uf0c1\n\n\n[If you look inside the git source tree, there's a file among the \"howto\"s in\nthere called \nupdate-hook-example.txt\n, which was the inspiration for this\npart of gitolite.]\n\n\nGit allows you to specify many \"hooks\", which get control as various events\nhappen -- see \ngit help hooks\n for details.  One of those hooks is the\n\nupdate\n hook, which, if it is present, is invoked just before a branch or a\ntag is about to be updated.  The hook is passed the name of the branch or tag,\nthe old SHA1 value, and the new SHA1 value, as arguments.  Hooks that are\ncalled \nbefore\n an action happens are allowed to prevent that action from\nhappening by returning an error code.\n\n\nWhen gitolite is told to create a new repository (by the admin), it installs\na special update hook.  This hook takes all the information presented, looks\nat the config file, and decides to allow or reject the update.\n\n\nAnd that's basically it.", 
            "title": "how gitolite uses ssh"
        }, 
        {
            "location": "/glssh/#how-gitolite-uses-ssh", 
            "text": "Although other forms of authentications exist (see the section on authentication versus authorisation ), ssh is the one that most git\nusers use.  Therefore, gitolite is (usually) heavily dependent on ssh .  Most people didn't realise this, and even if they did they don't know ssh\nwell enough to help themselves.  If you don't understand how ssh public key\nauthentication works, or how the  ~/.ssh/authorized_keys  file can be used to\nrestrict users, etc., you will have endless amounts of trouble getting\ngitolite to work, because you'll be attacking the wrong problem.  So please please please understand this before tearing your hair out and\nblaming  git/gitolite  for whatever is going wrong with your setup :-)", 
            "title": "how gitolite uses ssh"
        }, 
        {
            "location": "/glssh/#ssh-basics", 
            "text": "Let's start with some basics, focusing  only  on the pieces relevant to gitolite .  If this is not detailed enough, please use google and learn more\nfrom somewhere, or maybe buy the OReilly ssh book.    You can login to an ssh server by typing a password, but ssh can also use\n     public-private keys  (also called \"key pairs\") for authentication.\n     gitolite   requires  you to use this mechanism for your users -- they\n    cannot log in using passwords.  Hopefully by the time you finish reading\n    this page you will understand why :-)  The way you set this up is you generate a key pair on your workstation,\nand give the server the public key.  (I need not add that the \"private\"\nkey must be, well, kept  private !)    Generating a key pair on your workstation  is done by running the\n    command  ssh-keygen -t rsa .  This produces two files in  ~/.ssh .  One is\n     id_rsa ; this is the  private  key --  never  let it out of your\n    machine.  The other is  id_rsa.pub , which is the corresponding public\n    key.  This public key is usually just one long line of text.   On Windows machines with msysgit installed, you should do this from\n  within a \"git bash\" window.  The command will report the full path where\n  the files have been written; make a note of this, and use those files in\n  any of the description that follows.     Adding your public key to the server 's  ~/.ssh/authorized_keys \n    file is how ssh uses pubkeys to authenticate users.  Let's say\n    sita@work.station is trying to log in as git@serv.er.  What you have to do\n    is take the  ~/.ssh/id_rsa.pub  file for user sita on work.station and\n    append its contents (remember it's only one line) to\n     ~/.ssh/authorized_keys  for user git on serv.er.  The  authorized_keys  file can have multiple public keys (from many\ndifferent people) added to it so any of them can log in to git@serv.er.  In the normal case (not gitolite, but your normal everyday shell access),\nthere's a command that does this,  ssh-copy-id , which also fixes up\npermissions etc., as needed, since sshd is a little picky about allowing\npubkey access if permissions on the server are loose.  Or you can do it\nmanually, as long as you know what you're doing and you're careful not to\nerase or overwrite the existing contents of  ~/.ssh/authorized_keys  on\nthe server!  But with gitolite, it does this for you; see  adding and removing\nusers  for more.   Troubleshooting pubkey authentication failures : if you are unable to\n  get ssh access to the server after doing all this, you'll have to look\n  in  /var/log/secure  or  /var/log/auth.log  or some such file on the\n  server to see what specific error  sshd  is complaining about.     Restricting users to specific commands  is very important for gitolite.\n    If you read  man sshd  and look for  authorized_keys file format , you'll\n    see a lot of options you can add to the public key line, which restrict\n    the incoming user in various ways.  In particular, note the  command= \n    option, which means \"regardless of what the incoming user is asking to do,\n    forcibly run this command instead\".  Also note that when there are many public keys (i.e., lines) in the authorized_keys  file, each line can have a  different  set of options\nand  command=  values.  Without this  command=  option, the ssh daemon will simply give you a\nshell, which is not what we want for our gitolite keys (although we may\nwell have other keys which we use to get a shell).  This is the backbone of what makes gitolite work; please make sure you\nunderstand this .", 
            "title": "ssh basics"
        }, 
        {
            "location": "/glssh/#how-does-gitolite-use-all-this-ssh-magic", 
            "text": "These are two different questions you ought to be having by now:    How does it distinguish between me and someone else, since we're all\n    logging in as the same remote user \"git\".  How does it restrict what I can do within a repository.", 
            "title": "how does gitolite use all this ssh magic?"
        }, 
        {
            "location": "/glssh/#restricting-shell-accessdistinguishing-one-user-from-another", 
            "text": "The answer to the first question is the  command=  we talked about before.  If\nyou look in the  authorized_keys  file, you'll see entries like this (I chopped\noff the ends of course; they're pretty long lines):  command=\"[path]/gitolite-shell sitaram\",[more options] ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA18S2t...\ncommand=\"[path]/gitolite-shell usertwo\",[more options] ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEArXtCT...  First, it finds out which of the public keys in this file match the incoming\nlogin.  That's crypto stuff, and I won't go into it.  Once the match has been\nfound, it will run the command given on that line; e.g., if I logged in, it\nwould run  [path]/gitolite-shell sitaram .  So the first thing to note is\nthat such users do not get \"shell access\", which is good!  Before running the command, however, sshd sets up an environment variable\ncalled  SSH_ORIGINAL_COMMAND  which contains the actual git command that your\nworkstation sent out.  This is the command that  would have run  if you did\nnot have the  command=  part in the authorised keys file.  When  gitolite-shell  gets control, it looks at the first argument\n(\"sitaram\", \"usertwo\", etc) to determine who you are.  It then looks at the SSH_ORIGINAL_COMMAND  variable to find out which repository you want to\naccess, and whether you're reading or writing.  Now that it has a user, repository, and access requested (read/write), gitolite looks\nat its config file, and either allows or rejects the request.  But this cannot differentiate between different branches within a repo; that\nhas to be done separately.", 
            "title": "restricting shell access/distinguishing one user from another"
        }, 
        {
            "location": "/glssh/#restricting-branch-level-actions", 
            "text": "[If you look inside the git source tree, there's a file among the \"howto\"s in\nthere called  update-hook-example.txt , which was the inspiration for this\npart of gitolite.]  Git allows you to specify many \"hooks\", which get control as various events\nhappen -- see  git help hooks  for details.  One of those hooks is the update  hook, which, if it is present, is invoked just before a branch or a\ntag is about to be updated.  The hook is passed the name of the branch or tag,\nthe old SHA1 value, and the new SHA1 value, as arguments.  Hooks that are\ncalled  before  an action happens are allowed to prevent that action from\nhappening by returning an error code.  When gitolite is told to create a new repository (by the admin), it installs\na special update hook.  This hook takes all the information presented, looks\nat the config file, and decides to allow or reject the update.  And that's basically it.", 
            "title": "restricting branch level actions"
        }, 
        {
            "location": "/sts/", 
            "text": "ssh troubleshooting and tips\n\uf0c1\n\n\n\n\nThis page must be read in full the first time.  If you start from some nice\nlooking section in the middle it may not help you unless you're already an\nexpert at ssh\n.\n\n\nThis page should help you troubleshoot ssh-related problems in installing and\naccessing gitolite.  It also has a section of random ssh-related tips and\ntricks that gitolite can do.\n\n\nIMPORTANT -- READ THIS FIRST\n\uf0c1\n\n\ncaveats\n\uf0c1\n\n\n\n\n\n\nBefore reading this page, it is \nmandatory\n to read and \ncompletely\n    understand\n \nthis\n, which is a very detailed look at how gitolite\n    uses ssh's features on the server side.  Don't assume you know all that;\n    if you did, you wouldn't be needing \nthis\n page either!\n\n\n\n\n\n\nThis page, and others linked from this, together comprise all the help I\n    can give you in terms of the ssh aspect of using gitolite.  If you're\n    installing gitolite, you're a \"system admin\", like it or not.  Ssh is\n    therefore a necessary skill.  Please take the time to learn at least\n    enough to get passwordless access working.\n\n\n\n\n\n\nPlease note that authentication is not really gitolite's job at all.  I'd\n    rather spend time on actual gitolite features, code, and documentation\n    than authentication (i.e., ssh, in the common case).\n\n\nSurprised?  \nThis\n might help explain better.\n\n\n\n\n\n\nnaming conventions used\n\uf0c1\n\n\n\n\n\n\nYour workstation is the \nclient\n.  Your userid on the client does not\n    matter, and it has no relation to your gitolite username.\n\n\n\n\n\n\nThe server is called \nserver\n and the \"hosting user\" is \ngit\n.  If\n    this is an RPM/DEB install, the hosting user is probably called\n    \"gitolite\", however we will use \"git\" in this page.\n\n\n\n\n\n\ntaking stock -- relevant files and directories\n\uf0c1\n\n\n\n\n\n\nThe client has a \n~/.ssh\n containing a few keypairs.  It may also have a\n    \nconfig\n file.\n\n\n\n\n\n\nThe client also has a clone of the \"gitolite-admin\" repo, which contains a\n    bunch of \n*.pub\n files in \nkeydir\n.  We assume this clone is in \n$HOME\n;\n    if it is not, adjust instructions accordingly when needed.\n\n\n\n\n\n\nThe git user on the server has a \n~/.ssh/authorized_keys\n file that the\n    ssh daemon uses to authenticate incoming users.  We often call this file\n    \nauthkeys\n to save typing, and it always means the one on the server\n    (we're not interested in this file on the client side).\n\n\n\n\n\n\nThe server also has a \n~/.gitolite/keydir\n which contains a bunch of\n    \n*.pub\n files.\n\n\n\n\n\n\nnormal gitolite key handling\n\uf0c1\n\n\nHere's how normal gitolite key handling works:\n\n\n\n\n\n\n(On client) pub key changes like adding new ones, deleting old ones, etc.,\n    are done in the \nkeydir\n directory in the gitolite-admin repo clone.  Then\n    the admin \ngit add\ns and \ngit commit\ns those changes, then \ngit push\nes\n    them to the server.\n\n\n\n\n\n\n(On server) a successful push from the client makes git invoke the\n    post-update hook in the gitolite-admin repo.  This hook is installed by\n    gitolite, and it does a bunch of things which are quite transparent to\n    the admin, but we'll describe briefly here:\n\n\n\n\n\n\nThe pubkey files from this push are checked-out into\n    \n~/.gitolite/keydir\n (and similarly the config files into\n    \n~/.gitolite/conf\n).\n\n\n\n\n\n\nThe \"compile\" script then runs, which uses these files to populate\n    \n~/.ssh/authorized_keys\n on the server.\n\n\nThe authkeys file may have other, (non-gitolite) keys also.  Those\nlines are preserved.  Gitolite only touches lines that are found\nbetween gitolite's \"marker\" lines (\n# gitolite start\n and \n# gitolite end\n).\n\n\n\n\n\n\n\n\n\n\ncommon ssh problems\n\uf0c1\n\n\nSince I'm pretty sure at least some of you didn't bother to read the\n\"IMPORTANT: PLEASE READ FIRST\" section above, let me take a minute to point\nyou there again.  Especially the first bullet.\n\n\nDone?  OK, read on...\n\n\nThe following problem(s) indicate that pubkey access is not working at all, so\nyou should start with \nappendix 1\n.  If that doesn't fix the problem, continue\nwith the other appendices in sequence.\n\n\n\n\nRunning any git clone/fetch/ls-remote or just \nssh git@server info\n asks\n    you for a password.  (Or, if your sshd is set to use keys only, it just\n    disconnects without doing anything).\n\n\n\n\nThe following problem(s) indicate that your pubkey is bypassing gitolite and\ngoing straight to a shell.  You should start with \nappendix 2\n\nand continue with the rest in sequence.  \nAppendix 5\n has some\nbackground info.\n\n\n\n\n\n\nRunning \nssh git@server info\n gets you the output of the GNU 'info'\n    command instead of gitolite's version and access info.\n\n\n\n\n\n\nRunning \ngit clone git@server:repositories/reponame\n (note presence of\n    \nrepositories/\n in URL) works.\n\n\n[A proper gitolite key will only let you \ngit clone git@server:reponame\n\n(note absence of \nrepositories/\n)]\n\n\n\n\n\n\nYou are able to clone repositories but are unable to push changes back\n    (the error complains about the \nGL_BINDIR\n environment variable not being\n    set or about not being able to locate \nGitolite/Hooks/Update.pm\n, and the\n    \nhooks/update\n failing in some way).\n\n\n[If you run \ngit remote -v\n you will find that your clone URL included the\n\nrepositories/\n described above!]\n\n\n\n\n\n\nConversely, using the correct syntax, \ngit clone git@server:reponame\n\n    (note absence of \nrepositories/\n in the URL), gets you\n    \nfatal: 'reponame' does not appear to be a git repository\n, and yet\n    you are sure 'reponame' exists, you haven't mis-spelled it, etc.\n\n\n\n\n\n\nstep by step\n\uf0c1\n\n\nSince I'm pretty sure at least some of you didn't bother to read the\n\"IMPORTANT: PLEASE READ FIRST\" section above, let me take a minute to point\nyou there again.  Especially the first bullet.\n\n\nDone?  OK, now the general outline for ssh troubleshooting is this:\n\n\n\n\n\n\nMake sure the server's overall setup even \nallows\n pubkey based login.\n    I.e., check that git fetch/clone/ls-remote commands or a plain\n    \nssh git@server info\n do NOT ask for a password.  If you do get asked for\n    a password, see \nappendix 1\n.\n\n\n\n\n\n\nMatch client-side pubkeys (\n~/.ssh/*.pub\n) with the server's authkeys\n    file.  To do this, run \nsshkeys-lint\n, which tells you in detail what key\n    has what access.  See \nappendix 2\n.\n\n\n\n\n\n\nAt this point, we know that we have the right key, and that if sshd\n    receives that key, things will work.  But we're not done yet.  We still\n    need to make sure that this specific key is being offered/sent by the\n    client, instead of the default key.  See \nappendix 3\n and\n    \nappendix 4\n.\n\n\n\n\n\n\nrandom tips, tricks, and notes\n\uf0c1\n\n\ngiving shell access to gitolite users\n\uf0c1\n\n\nThanks to an idea from Jesse Keating, a single key can allow both gitolite\naccess \nand\n shell access.\n\n\n(v3.6.1+)\n There are two ways to do this, both require uncommenting\nand editing the 'Shell' line in the ENABLE list in the rc file.\n\n\nIf you have only a few users who need to get shell access, edit the line to\nlook like this (note the trailing comma!):\n\n\n'Shell alice bob',\n\n\n\nIf you have lots of users, add them to some file accessible to gitolite, (one\nper line, no extra whitespace), then specify the full path of the file.  For\nexample:\n\n\n\"Shell $ENV{HOME}/.gitolite.shell-users\",\n\n\n\n(Note in this case we have to use double quotes since we are using a variable\nthat needs to be interpolated into the value).\n\n\nThen run \ngitolite compile; gitolite trigger POST_COMPILE\n or push a dummy\nchange to the admin repo.\n\n\nthe SHELL_USERS_LIST\n\uf0c1\n\n\nIf you're using gitolite v3.6 or below, it's slightly different.  You have to\nenable the trigger by uncommenting the 'Shell' line in the ENABLE list, but\nyou cannot list the users directly on the 'Shell' line in the rc file, nor can\nyou put the file name on that line. Instead, you have to go to the variables\nsection in the rc file and set the SHELL_USERS_LIST variable to the\nfilename.  For example:\n\n\nSHELL_USERS_LIST        =\n  \"$ENV{HOME}/.gitolite.shell-users\",\n\n\n\nThen run \ngitolite compile; gitolite trigger POST_COMPILE\n or push a dummy\nchange to the admin repo.\n\n\nNOTE\n: to maintain backward compatibility, this method will continue to\nwork in 3.6.*, but when 3.7 is released (whenever that may be), it will not\nwork, and you will have to use the new syntax described above.\n\n\ndistinguishing one key from another\n\uf0c1\n\n\nSince a user can have \nmore than one key\n, it is sometimes useful\nto distinguish one key from another.  Sshd does not tell you even the\nfingerprint of the key that finally matched, so normally all you have is the\n\nGL_USER\n env var.\n\n\nHowever, if you replace\n\n\n'ssh-authkeys',\n\n\n\nin the ENABLE list with\n\n\n'ssh-authkeys --key-file-name',\n\n\n\nthen an extra argument is added after the username in the \"command\" variable\nof the authkeys file.  That is, instead of this:\n\n\ncommand=\"/home/g3/gitolite/src/gitolite-shell u3\",no-port-forwarding,...\n\n\n\nyou get this:\n\n\ncommand=\"/home/g3/gitolite/src/gitolite-shell u3 keydir/u3.pub\",no-port-forwarding,...\n\n\n\nYou can then write an INPUT trigger to do whatever you need with the file\nname, which is in \n$ARGV[1]\n (the second argument).  The actual file is\navailable at \n$ENV{GL_ADMIN_BASE}/$ARGV[1]\n if you need its contents.\n\n\nsimulating ssh-copy-id\n\uf0c1\n\n\ndon't have \nssh-copy-id\n?  This is broadly what that command does, if you want\nto replicate it manually.  The input is your pubkey, typically\n\n~/.ssh/id_rsa.pub\n from your client/workstation.\n\n\n\n\n\n\nIt copies it to the server as some file.\n\n\n\n\n\n\nIt appends that file to \n~/.ssh/authorized_keys\n on the server\n    (creating it if it doesn't already exist).\n\n\n\n\n\n\nIt then makes sure that all these files/directories have go-w perms\n    set (assuming user is \"git\"):\n\n\n/home/git/.ssh/authorized_keys\n/home/git/.ssh\n/home/git\n\n\n\n\n\n\n\n[Actually, \nsshd\n requires that even directories \nabove\n \n~\n (\n/\n, \n/home\n,\ntypically) also must be \ngo-w\n, but that needs root.  And typically\nthey're already set that way anyway.  (Or if they're not, you've got\nbigger problems than gitolite install not working!)]\n\n\nproblems with using non-openssh public keys\n\uf0c1\n\n\nGitolite accepts public keys only in openssh format.  Trying to use an \"ssh2\"\nkey (used by proprietary SSH software) will not be a happy experience.\nsrc/triggers/post-compile/ssh-authkeys can be made to detect non-openssh\nformats and automatically convert them; patches welcome!\n\n\nThe actual conversion command, if you want to just do it manually for now and\nbe done with it, is:\n\n\nssh-keygen -i -f /tmp/ssh2/YourName.pub \n /tmp/openssh/YourName.pub\n\n\n\nthen use the resulting pubkey as you normally would in gitolite.\n\n\nwindows issues\n\uf0c1\n\n\nOn windows, I have only used msysgit, and the openssh that comes with it.\nOver time, I have grown to distrust putty/plink due to the number of people\nwho seem to have trouble when those beasts are involved (I myself have never\nused them for any kind of git access).  If you have unusual ssh problems that\njust don't seem to have any explanation, try removing all traces of\nputty/plink, including environment variables, etc., and then try again.\n\n\nThankfully, someone contributed \nthis\n.\n\n\nappendix 1: ssh daemon asks for a password\n\uf0c1\n\n\n\n\nNOTE\n: This section should be useful to anyone trying to get\n  password-less access working.  It is not necessarily specific to gitolite,\n  so keep that in mind if the wording feels a little more general than you\n  were expecting.\n\n\n\n\nYou have generated a keypair on your workstation (\nssh-keygen\n) and copied the\npublic part of it (\n~/.ssh/id_rsa.pub\n, by default) to the server.\n\n\nOn the server you have appended this file to \n~/.ssh/authorized_keys\n.  Or you\nran something, like the \ngitolite setup\n step during a gitolite install, which\nshould have done that for you.\n\n\nYou now expect to log in without having to type in a password, but when you\ntry, you are being asked for a password.\n\n\nThis is a quick checklist:\n\n\n\n\n\n\nMake sure you're being asked for a password and not a pass\nphrase\n.  Do\n    not confuse or mistake a prompt saying\n    \nEnter passphrase for key '/home/sitaram/.ssh/id_rsa':\n for a password\n    prompt from the remote server!\n\n\nWhen you create an ssh keypair using \nssh-keygen\n, you have the option of\nprotecting it with a passphrase.  When you subsequently use that keypair\nto access a remote host, your \nlocal\n ssh client needs to unlock the\ncorresponding private key, and ssh will probably ask for the passphrase\nyou set when you created the keypair.\n\n\nYou have two choices to avoid this prompt every time you try to use the\nprivate key.  The first is to create keypairs \nwithout\n a passphrase (just\nhit enter when prompted for one).  \nBe sure to add a passphrase later,\nonce everything is working, using \nssh-keygen -p\n.\n\n\nThe second is to use \nssh-agent\n (or \nkeychain\n, which in turn uses\n\nssh-agent\n) or something like that to manage your keys.  Other than\ndiscussing one more potential trouble-spot with ssh-agent (see below),\nfurther discussion of ssh-agent/keychain is out of scope of this page.\n\n\n\n\n\n\nSsh is very sensitive to permissions.  An extremely conservative setup is\n    given below, but be sure to do this on \nboth the client and the server\n:\n\n\ncd $HOME\nchmod go-rwx .\nchmod -R go-rwx .ssh\n\n\n\n\n\n\n\nActually, every component of the path to \n~/.ssh/authorized_keys\n all the\n    way upto the root directory must be at least \nchmod go-w\n.  So be sure to\n    check \n/\n and \n/home\n also.\n\n\n\n\n\n\nWhile you're doing this, make sure the owner and group info for each of\n    these components are correct.  \nls -ald ~ ~/.ssh ~/.ssh/authorized_keys\n\n    will tell you what they are.\n\n\n\n\n\n\nYou may also want to check \n/etc/ssh/sshd_config\n to see if the \"git\" user\n    is allowed to login at all.  For example, if that file contains an\n    \nAllowUsers\n config entry, then only users mentioned in that line are\n    allowed to log in!\n\n\n\n\n\n\nWhile you're in there, check that file does NOT have a setting for\n    \nAuthorizedKeysFile\n.  See \nman sshd_config\n for details.  This setting is\n    a show stopper for gitolite to use ssh.\n\n\n\n\n\n\nSome OSs/distributions require that the \"git\" user should have a password\n    and/or not be a locked account.  You may want to check that as well.\n\n\n\n\n\n\nIf your server is running SELinux, and you install gitolite to\n    \n/var/gitolite\n or another location unsupported by default SELinux\n    policies, then SELinux will prevent sshd from reading\n    \n.ssh/authorized_keys\n. Consider installing gitolite to\n    \n/var/lib/gitolite\n, which is a supported location by default SELinux\n    policies.\n\n\n\n\n\n\nIf all that fails, log onto the server as root, \ncd /var/log\n, and look\n    for a file called \nauth.log\n or \nsecure\n or some such name.  Look inside\n    this file for messages matching the approximate time of your last attempt\n    to login, to see if they tell you what is the problem.\n\n\n\n\n\n\nappendix 2: which key is which -- running sshkeys-lint\n\uf0c1\n\n\nThe sshkeys-lint program can be run on the server or the client.  Run it with\n'-h' to get a help message.\n\n\nOn the server you can run \ngitolite sshkeys-lint\n and it will tell you, for\neach key in the admin directory's keydir, what access is available.  This is\nespecially good at finding duplicate keys and such.\n\n\nTo run it on the client you have to copy the file src/commands/sshkeys-lint\nfrom some gitolite clone, then follow these steps:\n\n\n\n\n\n\nGet a copy of \n~/.ssh/authorized_keys\n from the server and put it in\n    \n/tmp/foo\n or something.\n\n\n\n\n\n\ncd to \n~/.ssh\n.\n\n\n\n\n\n\nRun \n/path/to/sshkeys-lint *.pub \n /tmp/foo\n.\n\n\n\n\n\n\nNote that it is not trying to log in or anything -- it's just comparing\nfingerprints as computed by \nssh-keygen -l\n.\n\n\nIf the pubkey file you're interested in appears to have the correct access to\nthe server, you're done with this step.\n\n\nOtherwise you have to rename some keypairs and try again to get the effect you\nneed.  Be careful:\n\n\n\n\n\n\nDo not just rename the \".pub\" file; you will have to rename the\n    corresponding private key also (the one with the same basename but without\n    an extension).\n\n\n\n\n\n\nIf you're running ssh-agent, you may have to delete (using \nssh-add -D\n)\n    and re-add identities for it to pick up the renamed ones correctly.\n\n\n\n\n\n\ntypical cause(s)\n\uf0c1\n\n\nThe admin often has passwordless shell access to \ngit@server\n already, and\nthen used that same key to get access to gitolite (i.e., copied that same\npubkey as YourName.pub and ran \ngitolite setup\n on it).\n\n\nAs a result, the same key appears twice in the authkeys file now, and since\nthe ssh server will always use the first match, the second occurrence (which\ninvokes gitolite) is ignored.\n\n\nTo fix this, you have to use a different keypair for gitolite access.  The\nbest way to do this is to create a new keypair, copy the pubkey to the server\nas YourName.pub, then run \ngitolite setup -pk YourName.pub\n on the server.\nRemember to adjust your agent identities using ssh-add -D and ssh-add if\nyou're using ssh-agent, otherwise these new keys may not work.\n\n\nappendix 3: ssh client may not be offering the right key\n\uf0c1\n\n\n\n\n\n\nMake sure the right private key is being offered.  Run ssh in very\n    verbose mode and look for the word \"Offering\", like so:\n\n\nssh -vvv user@host pwd 2\n \n(grep -i offer)\n\n\n\nIf some keys \nare\n being offered, but not the key that was supposed to be\nused, you may be using ssh-agent (next bullet).  You may also need to\ncreate some host aliases in \n~/.ssh/config\n (\nappendix 4\n).\n\n\n\n\n\n\n(ssh-agent issues) If \nssh-add -l\n responds with either \"The agent has no\n    identities.\" or \"Could not open a connection to your authentication\n    agent.\", then you can skip this bullet.\n\n\nHowever, if \nssh-add -l\n lists \nany\n keys at all, then something weird\nhappens.  Due to a quirk in ssh-agent, ssh will now \nonly\n use one of\nthose keys, \neven if you explicitly ask\n for some other key to be used.\n\n\nIn that case, add the key you want using \nssh-add ~/.ssh/YourName\n and try\nthe access again.\n\n\n\n\n\n\nappendix 4: ssh host aliases\n\uf0c1\n\n\n(or \"making git use the right options for ssh\")\n\n\nThe ssh command has several options for non-default items to be specified.\nTwo common examples are \n-p\n for the port number if it is not 22, and \n-i\n for\nthe public key file if you do not want to use just \n~/.ssh/id_rsa\n or such.\n\n\nGit has two ssh-based URL syntaxes, but neither allows specifying a\nnon-default public key file.  And a port number is only allowed in one of\nthem.  (See \nman git-clone\n for details).  Finally, hosts often have to be\nreferred with IP addresses (such is life), or the name is very long, or hard\nto remember.\n\n\nUsing a \"host\" para in \n~/.ssh/config\n lets you nicely encapsulate all this\nwithin ssh and give it a short, easy-to-remember, name.  Example:\n\n\n\n\nhost\n gitolite\n    \nuser\n git\n    \nhostname\n \na.long.server.name.or.annoying.IP.address\n\n    \nport\n \n22\n\n    \nidentityfile\n ~/.ssh/id_rsa\n\n\n\n\nNow you can simply use the one word \ngitolite\n (which is the host alias we\ndefined here) and ssh will infer all those details defined under it -- just\nsay \nssh gitolite\n and \ngit clone gitolite:reponame\n and things will work.\n\n\n(By the way, the 'port' and 'identityfile' lines are needed only if you have\nnon-default values, although I put them in anyway just to be complete).\n\n\nmore than one keypair\n\uf0c1\n\n\nIf you have \nmore than one\n pubkey with access to the \nsame\n server, you\n\nmust\n use this method to make git pick up the right key.  There is no other\nway to do this, as far as I know.\n\n\nA typical example would be if you wanted shell access to the gitolite server\nusing one keypair, and gitolite-mediated access using another.  Here's how I\ndo that, where my \"id_rsa\" keypair has shell access, and my \"sitaram\" keypair\nhas gitolite access:\n\n\n\n\nhost\n gitolite\n    \nuser\n git\n    \nhostname\n \ngitolite.mydomain.com\n\n    \nport\n \n22\n\n    \nidentityfile\n ~/.ssh/sitaram\n\n\nhost\n gitolite-sh\n    \nuser\n git\n    \nhostname\n \ngitolite.mydomain.com\n\n    \nport\n \n22\n\n    \nidentityfile\n ~/.ssh/id_rsa\n\n\n\n\nThen I would use \"ssh gitolite-ssh\" to get a command line, and use the host\nalias \"gitolite\" in git clone and other commands, as well as for gitolite\ncommands (like \"ssh gitolite info\").\n\n\nJust to be clear, please note that this assumes the authorized keys file on\nthe gitolite hosting user has my \"id_rsa.pub\" line, \nwithout\n the gitolite\nrelated forced command and options.\n\n\nappendix 5: why bypassing gitolite causes a problem\n\uf0c1\n\n\nWhen you bypass gitolite, you end up running your normal shell instead of the\nspecial gitolite entry point script \ngitolite-shell\n.\n\n\nThis means commands (like 'info') are interpreted by the shell instead of\ngitolite.\n\n\nIt also means git operations look for repos in \n$HOME\n.\n\n\nHowever, gitolite places all your repos in \n~/repositories\n, and internally\nprefixes this before calling the actual git command you invoked.  Thus, the\npathname of the repo that you use on the client is almost never the correct\npathname on the server.  (This is by design.  Don't argue...)\n\n\nThis means that, you get 2 kinds of errors if you bypass gitolite\n\n\n\n\n\n\nWhen you use \ngit@server:reponame\n with a key that bypasses gitolite\n    (i.e., gets you a shell), this prefixing does not happen, and so the repo\n    is not found.  Neither a clone/fetch nor a push will work.\n\n\n\n\n\n\nConversely, consider \ngit@server:repositories/reponame.git\n.  The clone\n    operation will work -- you're using the full Unix path, and so the shell\n    finds the repo where you said it would be.  However, when you push,\n    gitolite's \nupdate hook\n kicks in, and fails to run because some of the\n    environment variables it is expecting are not present.", 
            "title": "ssh troubleshooting"
        }, 
        {
            "location": "/sts/#ssh-troubleshooting-and-tips", 
            "text": "This page must be read in full the first time.  If you start from some nice\nlooking section in the middle it may not help you unless you're already an\nexpert at ssh .  This page should help you troubleshoot ssh-related problems in installing and\naccessing gitolite.  It also has a section of random ssh-related tips and\ntricks that gitolite can do.", 
            "title": "ssh troubleshooting and tips"
        }, 
        {
            "location": "/sts/#important-read-this-first", 
            "text": "", 
            "title": "IMPORTANT -- READ THIS FIRST"
        }, 
        {
            "location": "/sts/#caveats", 
            "text": "Before reading this page, it is  mandatory  to read and  completely\n    understand   this , which is a very detailed look at how gitolite\n    uses ssh's features on the server side.  Don't assume you know all that;\n    if you did, you wouldn't be needing  this  page either!    This page, and others linked from this, together comprise all the help I\n    can give you in terms of the ssh aspect of using gitolite.  If you're\n    installing gitolite, you're a \"system admin\", like it or not.  Ssh is\n    therefore a necessary skill.  Please take the time to learn at least\n    enough to get passwordless access working.    Please note that authentication is not really gitolite's job at all.  I'd\n    rather spend time on actual gitolite features, code, and documentation\n    than authentication (i.e., ssh, in the common case).  Surprised?   This  might help explain better.", 
            "title": "caveats"
        }, 
        {
            "location": "/sts/#naming-conventions-used", 
            "text": "Your workstation is the  client .  Your userid on the client does not\n    matter, and it has no relation to your gitolite username.    The server is called  server  and the \"hosting user\" is  git .  If\n    this is an RPM/DEB install, the hosting user is probably called\n    \"gitolite\", however we will use \"git\" in this page.", 
            "title": "naming conventions used"
        }, 
        {
            "location": "/sts/#taking-stock-relevant-files-and-directories", 
            "text": "The client has a  ~/.ssh  containing a few keypairs.  It may also have a\n     config  file.    The client also has a clone of the \"gitolite-admin\" repo, which contains a\n    bunch of  *.pub  files in  keydir .  We assume this clone is in  $HOME ;\n    if it is not, adjust instructions accordingly when needed.    The git user on the server has a  ~/.ssh/authorized_keys  file that the\n    ssh daemon uses to authenticate incoming users.  We often call this file\n     authkeys  to save typing, and it always means the one on the server\n    (we're not interested in this file on the client side).    The server also has a  ~/.gitolite/keydir  which contains a bunch of\n     *.pub  files.", 
            "title": "taking stock -- relevant files and directories"
        }, 
        {
            "location": "/sts/#normal-gitolite-key-handling", 
            "text": "Here's how normal gitolite key handling works:    (On client) pub key changes like adding new ones, deleting old ones, etc.,\n    are done in the  keydir  directory in the gitolite-admin repo clone.  Then\n    the admin  git add s and  git commit s those changes, then  git push es\n    them to the server.    (On server) a successful push from the client makes git invoke the\n    post-update hook in the gitolite-admin repo.  This hook is installed by\n    gitolite, and it does a bunch of things which are quite transparent to\n    the admin, but we'll describe briefly here:    The pubkey files from this push are checked-out into\n     ~/.gitolite/keydir  (and similarly the config files into\n     ~/.gitolite/conf ).    The \"compile\" script then runs, which uses these files to populate\n     ~/.ssh/authorized_keys  on the server.  The authkeys file may have other, (non-gitolite) keys also.  Those\nlines are preserved.  Gitolite only touches lines that are found\nbetween gitolite's \"marker\" lines ( # gitolite start  and  # gitolite end ).", 
            "title": "normal gitolite key handling"
        }, 
        {
            "location": "/sts/#common-ssh-problems", 
            "text": "Since I'm pretty sure at least some of you didn't bother to read the\n\"IMPORTANT: PLEASE READ FIRST\" section above, let me take a minute to point\nyou there again.  Especially the first bullet.  Done?  OK, read on...  The following problem(s) indicate that pubkey access is not working at all, so\nyou should start with  appendix 1 .  If that doesn't fix the problem, continue\nwith the other appendices in sequence.   Running any git clone/fetch/ls-remote or just  ssh git@server info  asks\n    you for a password.  (Or, if your sshd is set to use keys only, it just\n    disconnects without doing anything).   The following problem(s) indicate that your pubkey is bypassing gitolite and\ngoing straight to a shell.  You should start with  appendix 2 \nand continue with the rest in sequence.   Appendix 5  has some\nbackground info.    Running  ssh git@server info  gets you the output of the GNU 'info'\n    command instead of gitolite's version and access info.    Running  git clone git@server:repositories/reponame  (note presence of\n     repositories/  in URL) works.  [A proper gitolite key will only let you  git clone git@server:reponame \n(note absence of  repositories/ )]    You are able to clone repositories but are unable to push changes back\n    (the error complains about the  GL_BINDIR  environment variable not being\n    set or about not being able to locate  Gitolite/Hooks/Update.pm , and the\n     hooks/update  failing in some way).  [If you run  git remote -v  you will find that your clone URL included the repositories/  described above!]    Conversely, using the correct syntax,  git clone git@server:reponame \n    (note absence of  repositories/  in the URL), gets you\n     fatal: 'reponame' does not appear to be a git repository , and yet\n    you are sure 'reponame' exists, you haven't mis-spelled it, etc.", 
            "title": "common ssh problems"
        }, 
        {
            "location": "/sts/#step-by-step", 
            "text": "Since I'm pretty sure at least some of you didn't bother to read the\n\"IMPORTANT: PLEASE READ FIRST\" section above, let me take a minute to point\nyou there again.  Especially the first bullet.  Done?  OK, now the general outline for ssh troubleshooting is this:    Make sure the server's overall setup even  allows  pubkey based login.\n    I.e., check that git fetch/clone/ls-remote commands or a plain\n     ssh git@server info  do NOT ask for a password.  If you do get asked for\n    a password, see  appendix 1 .    Match client-side pubkeys ( ~/.ssh/*.pub ) with the server's authkeys\n    file.  To do this, run  sshkeys-lint , which tells you in detail what key\n    has what access.  See  appendix 2 .    At this point, we know that we have the right key, and that if sshd\n    receives that key, things will work.  But we're not done yet.  We still\n    need to make sure that this specific key is being offered/sent by the\n    client, instead of the default key.  See  appendix 3  and\n     appendix 4 .", 
            "title": "step by step"
        }, 
        {
            "location": "/sts/#random-tips-tricks-and-notes", 
            "text": "", 
            "title": "random tips, tricks, and notes"
        }, 
        {
            "location": "/sts/#giving-shell-access-to-gitolite-users", 
            "text": "Thanks to an idea from Jesse Keating, a single key can allow both gitolite\naccess  and  shell access.  (v3.6.1+)  There are two ways to do this, both require uncommenting\nand editing the 'Shell' line in the ENABLE list in the rc file.  If you have only a few users who need to get shell access, edit the line to\nlook like this (note the trailing comma!):  'Shell alice bob',  If you have lots of users, add them to some file accessible to gitolite, (one\nper line, no extra whitespace), then specify the full path of the file.  For\nexample:  \"Shell $ENV{HOME}/.gitolite.shell-users\",  (Note in this case we have to use double quotes since we are using a variable\nthat needs to be interpolated into the value).  Then run  gitolite compile; gitolite trigger POST_COMPILE  or push a dummy\nchange to the admin repo.", 
            "title": "giving shell access to gitolite users"
        }, 
        {
            "location": "/sts/#the-shell95users95list", 
            "text": "If you're using gitolite v3.6 or below, it's slightly different.  You have to\nenable the trigger by uncommenting the 'Shell' line in the ENABLE list, but\nyou cannot list the users directly on the 'Shell' line in the rc file, nor can\nyou put the file name on that line. Instead, you have to go to the variables\nsection in the rc file and set the SHELL_USERS_LIST variable to the\nfilename.  For example:  SHELL_USERS_LIST        =   \"$ENV{HOME}/.gitolite.shell-users\",  Then run  gitolite compile; gitolite trigger POST_COMPILE  or push a dummy\nchange to the admin repo.  NOTE : to maintain backward compatibility, this method will continue to\nwork in 3.6.*, but when 3.7 is released (whenever that may be), it will not\nwork, and you will have to use the new syntax described above.", 
            "title": "the SHELL_USERS_LIST"
        }, 
        {
            "location": "/sts/#distinguishing-one-key-from-another", 
            "text": "Since a user can have  more than one key , it is sometimes useful\nto distinguish one key from another.  Sshd does not tell you even the\nfingerprint of the key that finally matched, so normally all you have is the GL_USER  env var.  However, if you replace  'ssh-authkeys',  in the ENABLE list with  'ssh-authkeys --key-file-name',  then an extra argument is added after the username in the \"command\" variable\nof the authkeys file.  That is, instead of this:  command=\"/home/g3/gitolite/src/gitolite-shell u3\",no-port-forwarding,...  you get this:  command=\"/home/g3/gitolite/src/gitolite-shell u3 keydir/u3.pub\",no-port-forwarding,...  You can then write an INPUT trigger to do whatever you need with the file\nname, which is in  $ARGV[1]  (the second argument).  The actual file is\navailable at  $ENV{GL_ADMIN_BASE}/$ARGV[1]  if you need its contents.", 
            "title": "distinguishing one key from another"
        }, 
        {
            "location": "/sts/#simulating-ssh-copy-id", 
            "text": "don't have  ssh-copy-id ?  This is broadly what that command does, if you want\nto replicate it manually.  The input is your pubkey, typically ~/.ssh/id_rsa.pub  from your client/workstation.    It copies it to the server as some file.    It appends that file to  ~/.ssh/authorized_keys  on the server\n    (creating it if it doesn't already exist).    It then makes sure that all these files/directories have go-w perms\n    set (assuming user is \"git\"):  /home/git/.ssh/authorized_keys\n/home/git/.ssh\n/home/git    [Actually,  sshd  requires that even directories  above   ~  ( / ,  /home ,\ntypically) also must be  go-w , but that needs root.  And typically\nthey're already set that way anyway.  (Or if they're not, you've got\nbigger problems than gitolite install not working!)]", 
            "title": "simulating ssh-copy-id"
        }, 
        {
            "location": "/sts/#problems-with-using-non-openssh-public-keys", 
            "text": "Gitolite accepts public keys only in openssh format.  Trying to use an \"ssh2\"\nkey (used by proprietary SSH software) will not be a happy experience.\nsrc/triggers/post-compile/ssh-authkeys can be made to detect non-openssh\nformats and automatically convert them; patches welcome!  The actual conversion command, if you want to just do it manually for now and\nbe done with it, is:  ssh-keygen -i -f /tmp/ssh2/YourName.pub   /tmp/openssh/YourName.pub  then use the resulting pubkey as you normally would in gitolite.", 
            "title": "problems with using non-openssh public keys"
        }, 
        {
            "location": "/sts/#windows-issues", 
            "text": "On windows, I have only used msysgit, and the openssh that comes with it.\nOver time, I have grown to distrust putty/plink due to the number of people\nwho seem to have trouble when those beasts are involved (I myself have never\nused them for any kind of git access).  If you have unusual ssh problems that\njust don't seem to have any explanation, try removing all traces of\nputty/plink, including environment variables, etc., and then try again.  Thankfully, someone contributed  this .", 
            "title": "windows issues"
        }, 
        {
            "location": "/sts/#appendix-1-ssh-daemon-asks-for-a-password", 
            "text": "NOTE : This section should be useful to anyone trying to get\n  password-less access working.  It is not necessarily specific to gitolite,\n  so keep that in mind if the wording feels a little more general than you\n  were expecting.   You have generated a keypair on your workstation ( ssh-keygen ) and copied the\npublic part of it ( ~/.ssh/id_rsa.pub , by default) to the server.  On the server you have appended this file to  ~/.ssh/authorized_keys .  Or you\nran something, like the  gitolite setup  step during a gitolite install, which\nshould have done that for you.  You now expect to log in without having to type in a password, but when you\ntry, you are being asked for a password.  This is a quick checklist:    Make sure you're being asked for a password and not a pass phrase .  Do\n    not confuse or mistake a prompt saying\n     Enter passphrase for key '/home/sitaram/.ssh/id_rsa':  for a password\n    prompt from the remote server!  When you create an ssh keypair using  ssh-keygen , you have the option of\nprotecting it with a passphrase.  When you subsequently use that keypair\nto access a remote host, your  local  ssh client needs to unlock the\ncorresponding private key, and ssh will probably ask for the passphrase\nyou set when you created the keypair.  You have two choices to avoid this prompt every time you try to use the\nprivate key.  The first is to create keypairs  without  a passphrase (just\nhit enter when prompted for one).   Be sure to add a passphrase later,\nonce everything is working, using  ssh-keygen -p .  The second is to use  ssh-agent  (or  keychain , which in turn uses ssh-agent ) or something like that to manage your keys.  Other than\ndiscussing one more potential trouble-spot with ssh-agent (see below),\nfurther discussion of ssh-agent/keychain is out of scope of this page.    Ssh is very sensitive to permissions.  An extremely conservative setup is\n    given below, but be sure to do this on  both the client and the server :  cd $HOME\nchmod go-rwx .\nchmod -R go-rwx .ssh    Actually, every component of the path to  ~/.ssh/authorized_keys  all the\n    way upto the root directory must be at least  chmod go-w .  So be sure to\n    check  /  and  /home  also.    While you're doing this, make sure the owner and group info for each of\n    these components are correct.   ls -ald ~ ~/.ssh ~/.ssh/authorized_keys \n    will tell you what they are.    You may also want to check  /etc/ssh/sshd_config  to see if the \"git\" user\n    is allowed to login at all.  For example, if that file contains an\n     AllowUsers  config entry, then only users mentioned in that line are\n    allowed to log in!    While you're in there, check that file does NOT have a setting for\n     AuthorizedKeysFile .  See  man sshd_config  for details.  This setting is\n    a show stopper for gitolite to use ssh.    Some OSs/distributions require that the \"git\" user should have a password\n    and/or not be a locked account.  You may want to check that as well.    If your server is running SELinux, and you install gitolite to\n     /var/gitolite  or another location unsupported by default SELinux\n    policies, then SELinux will prevent sshd from reading\n     .ssh/authorized_keys . Consider installing gitolite to\n     /var/lib/gitolite , which is a supported location by default SELinux\n    policies.    If all that fails, log onto the server as root,  cd /var/log , and look\n    for a file called  auth.log  or  secure  or some such name.  Look inside\n    this file for messages matching the approximate time of your last attempt\n    to login, to see if they tell you what is the problem.", 
            "title": "appendix 1: ssh daemon asks for a password"
        }, 
        {
            "location": "/sts/#appendix-2-which-key-is-which-running-sshkeys-lint", 
            "text": "The sshkeys-lint program can be run on the server or the client.  Run it with\n'-h' to get a help message.  On the server you can run  gitolite sshkeys-lint  and it will tell you, for\neach key in the admin directory's keydir, what access is available.  This is\nespecially good at finding duplicate keys and such.  To run it on the client you have to copy the file src/commands/sshkeys-lint\nfrom some gitolite clone, then follow these steps:    Get a copy of  ~/.ssh/authorized_keys  from the server and put it in\n     /tmp/foo  or something.    cd to  ~/.ssh .    Run  /path/to/sshkeys-lint *.pub   /tmp/foo .    Note that it is not trying to log in or anything -- it's just comparing\nfingerprints as computed by  ssh-keygen -l .  If the pubkey file you're interested in appears to have the correct access to\nthe server, you're done with this step.  Otherwise you have to rename some keypairs and try again to get the effect you\nneed.  Be careful:    Do not just rename the \".pub\" file; you will have to rename the\n    corresponding private key also (the one with the same basename but without\n    an extension).    If you're running ssh-agent, you may have to delete (using  ssh-add -D )\n    and re-add identities for it to pick up the renamed ones correctly.", 
            "title": "appendix 2: which key is which -- running sshkeys-lint"
        }, 
        {
            "location": "/sts/#typical-causes", 
            "text": "The admin often has passwordless shell access to  git@server  already, and\nthen used that same key to get access to gitolite (i.e., copied that same\npubkey as YourName.pub and ran  gitolite setup  on it).  As a result, the same key appears twice in the authkeys file now, and since\nthe ssh server will always use the first match, the second occurrence (which\ninvokes gitolite) is ignored.  To fix this, you have to use a different keypair for gitolite access.  The\nbest way to do this is to create a new keypair, copy the pubkey to the server\nas YourName.pub, then run  gitolite setup -pk YourName.pub  on the server.\nRemember to adjust your agent identities using ssh-add -D and ssh-add if\nyou're using ssh-agent, otherwise these new keys may not work.", 
            "title": "typical cause(s)"
        }, 
        {
            "location": "/sts/#appendix-3-ssh-client-may-not-be-offering-the-right-key", 
            "text": "Make sure the right private key is being offered.  Run ssh in very\n    verbose mode and look for the word \"Offering\", like so:  ssh -vvv user@host pwd 2   (grep -i offer)  If some keys  are  being offered, but not the key that was supposed to be\nused, you may be using ssh-agent (next bullet).  You may also need to\ncreate some host aliases in  ~/.ssh/config  ( appendix 4 ).    (ssh-agent issues) If  ssh-add -l  responds with either \"The agent has no\n    identities.\" or \"Could not open a connection to your authentication\n    agent.\", then you can skip this bullet.  However, if  ssh-add -l  lists  any  keys at all, then something weird\nhappens.  Due to a quirk in ssh-agent, ssh will now  only  use one of\nthose keys,  even if you explicitly ask  for some other key to be used.  In that case, add the key you want using  ssh-add ~/.ssh/YourName  and try\nthe access again.", 
            "title": "appendix 3: ssh client may not be offering the right key"
        }, 
        {
            "location": "/sts/#appendix-4-ssh-host-aliases", 
            "text": "(or \"making git use the right options for ssh\")  The ssh command has several options for non-default items to be specified.\nTwo common examples are  -p  for the port number if it is not 22, and  -i  for\nthe public key file if you do not want to use just  ~/.ssh/id_rsa  or such.  Git has two ssh-based URL syntaxes, but neither allows specifying a\nnon-default public key file.  And a port number is only allowed in one of\nthem.  (See  man git-clone  for details).  Finally, hosts often have to be\nreferred with IP addresses (such is life), or the name is very long, or hard\nto remember.  Using a \"host\" para in  ~/.ssh/config  lets you nicely encapsulate all this\nwithin ssh and give it a short, easy-to-remember, name.  Example:   host  gitolite\n     user  git\n     hostname   a.long.server.name.or.annoying.IP.address \n     port   22 \n     identityfile  ~/.ssh/id_rsa  Now you can simply use the one word  gitolite  (which is the host alias we\ndefined here) and ssh will infer all those details defined under it -- just\nsay  ssh gitolite  and  git clone gitolite:reponame  and things will work.  (By the way, the 'port' and 'identityfile' lines are needed only if you have\nnon-default values, although I put them in anyway just to be complete).", 
            "title": "appendix 4: ssh host aliases"
        }, 
        {
            "location": "/sts/#more-than-one-keypair", 
            "text": "If you have  more than one  pubkey with access to the  same  server, you must  use this method to make git pick up the right key.  There is no other\nway to do this, as far as I know.  A typical example would be if you wanted shell access to the gitolite server\nusing one keypair, and gitolite-mediated access using another.  Here's how I\ndo that, where my \"id_rsa\" keypair has shell access, and my \"sitaram\" keypair\nhas gitolite access:   host  gitolite\n     user  git\n     hostname   gitolite.mydomain.com \n     port   22 \n     identityfile  ~/.ssh/sitaram host  gitolite-sh\n     user  git\n     hostname   gitolite.mydomain.com \n     port   22 \n     identityfile  ~/.ssh/id_rsa  Then I would use \"ssh gitolite-ssh\" to get a command line, and use the host\nalias \"gitolite\" in git clone and other commands, as well as for gitolite\ncommands (like \"ssh gitolite info\").  Just to be clear, please note that this assumes the authorized keys file on\nthe gitolite hosting user has my \"id_rsa.pub\" line,  without  the gitolite\nrelated forced command and options.", 
            "title": "more than one keypair"
        }, 
        {
            "location": "/sts/#appendix-5-why-bypassing-gitolite-causes-a-problem", 
            "text": "When you bypass gitolite, you end up running your normal shell instead of the\nspecial gitolite entry point script  gitolite-shell .  This means commands (like 'info') are interpreted by the shell instead of\ngitolite.  It also means git operations look for repos in  $HOME .  However, gitolite places all your repos in  ~/repositories , and internally\nprefixes this before calling the actual git command you invoked.  Thus, the\npathname of the repo that you use on the client is almost never the correct\npathname on the server.  (This is by design.  Don't argue...)  This means that, you get 2 kinds of errors if you bypass gitolite    When you use  git@server:reponame  with a key that bypasses gitolite\n    (i.e., gets you a shell), this prefixing does not happen, and so the repo\n    is not found.  Neither a clone/fetch nor a push will work.    Conversely, consider  git@server:repositories/reponame.git .  The clone\n    operation will work -- you're using the full Unix path, and so the shell\n    finds the repo where you said it would be.  However, when you push,\n    gitolite's  update hook  kicks in, and fails to run because some of the\n    environment variables it is expecting are not present.", 
            "title": "appendix 5: why bypassing gitolite causes a problem"
        }, 
        {
            "location": "/regex/", 
            "text": "extremely brief regex overview\n\uf0c1\n\n\n\n\nRegexes are powerful.  Gitolite uses that power as much as it can.  If you\ncan't handle that power, hire someone who can and become a manager ;-)\n\n\nThat said, here's a very quick overview of the highlights.\n\n\n^\n and \n$\n are called \"anchors\".  They anchor the match to the beginning and\nend of the string respectively.\n\n\n\n^foo    matches any string starting with 'foo'\nfoo$    matches any string ending with 'foo'\n^foo$   matches exact string 'foo'.\n\n\n\n\nTo be precise, the last one is \"any string starting and ending with \nthe same\n\n'foo'\"; \"foofoo\" does not match.\n\n\n[0-9]\n is an example of a character class; it matches any single digit.\n\n[a-z]\n matches any lower case alpha, and \n[0-9a-f]\n is the range of hex\ncharacters.  You should now guess what \n[a-zA-Z0-9_]\n does.\n\n\n.\n (the period) is special -- it matches any character.  If you want to match\nan actual period, you need to say \n\\.\n.\n\n\n*\n, \n?\n, and \n+\n are quantifiers.  They apply to the previous token.  \na*\n\nmeans \"zero or more 'a' characters\".  Similarly \na+\n means \"one or more\", and\n\na?\n means \"zero or one\".\n\n\nAs a result, \n.*\n means \"any number (including zero) of any character\".\n\n\nThe previous token need not be a single character; you can use parens to make\nit longer.  \n(foo)+\n matches one or more \"foo\", (like \"foo\", \"foofoo\",\n\"foofoofoo\", etc.)", 
            "title": "regular expressions"
        }, 
        {
            "location": "/regex/#extremely-brief-regex-overview", 
            "text": "Regexes are powerful.  Gitolite uses that power as much as it can.  If you\ncan't handle that power, hire someone who can and become a manager ;-)  That said, here's a very quick overview of the highlights.  ^  and  $  are called \"anchors\".  They anchor the match to the beginning and\nend of the string respectively.  \n^foo    matches any string starting with 'foo'\nfoo$    matches any string ending with 'foo'\n^foo$   matches exact string 'foo'.  To be precise, the last one is \"any string starting and ending with  the same \n'foo'\"; \"foofoo\" does not match.  [0-9]  is an example of a character class; it matches any single digit. [a-z]  matches any lower case alpha, and  [0-9a-f]  is the range of hex\ncharacters.  You should now guess what  [a-zA-Z0-9_]  does.  .  (the period) is special -- it matches any character.  If you want to match\nan actual period, you need to say  \\. .  * ,  ? , and  +  are quantifiers.  They apply to the previous token.   a* \nmeans \"zero or more 'a' characters\".  Similarly  a+  means \"one or more\", and a?  means \"zero or one\".  As a result,  .*  means \"any number (including zero) of any character\".  The previous token need not be a single character; you can use parens to make\nit longer.   (foo)+  matches one or more \"foo\", (like \"foo\", \"foofoo\",\n\"foofoofoo\", etc.)", 
            "title": "extremely brief regex overview"
        }, 
        {
            "location": "/odds-and-ends/", 
            "text": "miscellaneous features\n\uf0c1\n\n\n\n\nThis page has a bunch of features that didn't seem to fit anywhere.\n\n\ndisabling pushes to take backups\n\uf0c1\n\n\nThe \nwritable\n command allows you to disable pushes to all repos or just the\nnamed repo, in order to do file-system level things to the repo directory that\nrequire it not to change, like using normal backup software.\n\n\nRun \ngitolite writable -h\n for more info.\n\n\nputting 'repositories' and '.gitolite' elsewhere\n\uf0c1\n\n\nGitolite insists that the \"repositories\" and \".gitolite\" directories be in\n\n$HOME\n.  If you want them somewhere else:\n\n\n\n\ndo the install as normal,\n\n\nthen\n move those directories to wherever you want and replace them with\n    symlinks pointing to the new location.\n\n\n\n\nusing pubkeys obtained from elsewhere\n\uf0c1\n\n\nIf you're not managing keys via the gitolite-admin repo, but getting them from\nsomewhere else, you'll want to periodically \"update\" the keys.\n\n\nTo do that, first edit your rc file and add something like this:\n\n\nSSH_AUTHKEYS                =\n\n    [\n        'post-compile/ssh-authkeys',\n    ],\n\n\n\nThen write a script that\n\n\n\n\ngets all the keys and dumps them into \n$HOME/.gitolite/keydir\n (or into a\n    subdirectory of it), and\n\n\nruns \ngitolite trigger SSH_AUTHKEYS\n.\n\n\n\n\nRun this from cron or however you want.\n\n\ngiving users their own repos\n\uf0c1\n\n\n(Please see \nthis\n for background on the ideas in this section).\n\n\nIt's very easy to give users their own set of repos to create, with the\nusername at the top level.  The simplest setup is:\n\n\n\n\nrepo \nCREATOR\n/..*\n\n    C\n   \n=   \n@all\n\n\n    RW+\n \n=   \nCREATOR\n\n\n    RW\n  \n=   \nWRITERS\n\n\n    R\n   \n=   \nREADERS\n\n\n\n\n\nNow users can create any repo under their own name simply by cloning it or\npushing to it, then use the \nperms\n command to add other users to their\nWRITERS and READERS lists.\n\n\nOf course you can get much more creative if you add a few more \nroles\n.\n\n\n(I prefer using some prefix, say \"u\", as in\n\nrepo u/CREATOR/..*\n.  This helps to keep user-created repos separate, and\navoid name clashes in some far-fetched scenarios).\n\n\nadministering gitolite directly on the server\n\uf0c1\n\n\nThe main use of managing gitolite via the admin repo is that you get to\nversion control the access rules.  But for large sites, there's another use:\nyou can share the admin load with more people, \nwithout\n having to give all\nof them shell access on the server.\n\n\nHowever, people who use puppet and similar systems already have a conf\nversioning and management system.  And they'd like to continue to use that to\nmanage gitolite repos and users, rather than be forced to do it through the\ngitolite-admin repo.\n\n\nSuch sites don't really need the admin repo at all, so here's how to get rid\nof it and run things directly on the server (which you can script into your\npuppet or similar software quite easily).\n\n\nFirst the one-time stuff:\n\n\n\n\n\n\ninstall\n the software as normal\n\n\n\n\n\n\nrun \ngitolite setup -a dummy\n instead of the normal \nsetup\n\n    command\n\n\n\n\n\n\ndelete (or move away) \n~/repositories/gitolite-admin.git\n\n\n\n\n\n\nedit \n~/.gitolite/conf/gitolite.conf\n and remove the gitolite-admin repo\n    and its access line.\n\n\n\n\n\n\nmkdir ~/.gitolite/keydir\n (because \"setup -a\" does not create it, but you\n    will need it later to add keys).\n\n\n\n\n\n\nrun \ngitolite compile; gitolite trigger POST_COMPILE\n\n\n\n\n\n\nTo manage gitolite, you can directly edit files in \n~/.gitolite\n (or cause\npuppet to place files there), and then run the commands in the last step\nabove.  For example:\n\n\n\n\ncopy someone's pubkey file to \n~/.gitolite/keydir\n\n\nedit \n~/.gitolite/conf/gitolite.conf\n and add a repo or three, giving\n    access to some user(s)\n\n\nrun \ngitolite compile; gitolite trigger POST_COMPILE\n\n\n\n\nThat's it.", 
            "title": "miscellaneous features"
        }, 
        {
            "location": "/odds-and-ends/#miscellaneous-features", 
            "text": "This page has a bunch of features that didn't seem to fit anywhere.", 
            "title": "miscellaneous features"
        }, 
        {
            "location": "/odds-and-ends/#disabling-pushes-to-take-backups", 
            "text": "The  writable  command allows you to disable pushes to all repos or just the\nnamed repo, in order to do file-system level things to the repo directory that\nrequire it not to change, like using normal backup software.  Run  gitolite writable -h  for more info.", 
            "title": "disabling pushes to take backups"
        }, 
        {
            "location": "/odds-and-ends/#putting-repositories-and-gitolite-elsewhere", 
            "text": "Gitolite insists that the \"repositories\" and \".gitolite\" directories be in $HOME .  If you want them somewhere else:   do the install as normal,  then  move those directories to wherever you want and replace them with\n    symlinks pointing to the new location.", 
            "title": "putting 'repositories' and '.gitolite' elsewhere"
        }, 
        {
            "location": "/odds-and-ends/#using-pubkeys-obtained-from-elsewhere", 
            "text": "If you're not managing keys via the gitolite-admin repo, but getting them from\nsomewhere else, you'll want to periodically \"update\" the keys.  To do that, first edit your rc file and add something like this:  SSH_AUTHKEYS                = \n    [\n        'post-compile/ssh-authkeys',\n    ],  Then write a script that   gets all the keys and dumps them into  $HOME/.gitolite/keydir  (or into a\n    subdirectory of it), and  runs  gitolite trigger SSH_AUTHKEYS .   Run this from cron or however you want.", 
            "title": "using pubkeys obtained from elsewhere"
        }, 
        {
            "location": "/odds-and-ends/#giving-users-their-own-repos", 
            "text": "(Please see  this  for background on the ideas in this section).  It's very easy to give users their own set of repos to create, with the\nusername at the top level.  The simplest setup is:   repo  CREATOR /..*     C     =    @all      RW+   =    CREATOR      RW    =    WRITERS      R     =    READERS   Now users can create any repo under their own name simply by cloning it or\npushing to it, then use the  perms  command to add other users to their\nWRITERS and READERS lists.  Of course you can get much more creative if you add a few more  roles .  (I prefer using some prefix, say \"u\", as in repo u/CREATOR/..* .  This helps to keep user-created repos separate, and\navoid name clashes in some far-fetched scenarios).", 
            "title": "giving users their own repos"
        }, 
        {
            "location": "/odds-and-ends/#administering-gitolite-directly-on-the-server", 
            "text": "The main use of managing gitolite via the admin repo is that you get to\nversion control the access rules.  But for large sites, there's another use:\nyou can share the admin load with more people,  without  having to give all\nof them shell access on the server.  However, people who use puppet and similar systems already have a conf\nversioning and management system.  And they'd like to continue to use that to\nmanage gitolite repos and users, rather than be forced to do it through the\ngitolite-admin repo.  Such sites don't really need the admin repo at all, so here's how to get rid\nof it and run things directly on the server (which you can script into your\npuppet or similar software quite easily).  First the one-time stuff:    install  the software as normal    run  gitolite setup -a dummy  instead of the normal  setup \n    command    delete (or move away)  ~/repositories/gitolite-admin.git    edit  ~/.gitolite/conf/gitolite.conf  and remove the gitolite-admin repo\n    and its access line.    mkdir ~/.gitolite/keydir  (because \"setup -a\" does not create it, but you\n    will need it later to add keys).    run  gitolite compile; gitolite trigger POST_COMPILE    To manage gitolite, you can directly edit files in  ~/.gitolite  (or cause\npuppet to place files there), and then run the commands in the last step\nabove.  For example:   copy someone's pubkey file to  ~/.gitolite/keydir  edit  ~/.gitolite/conf/gitolite.conf  and add a repo or three, giving\n    access to some user(s)  run  gitolite compile; gitolite trigger POST_COMPILE   That's it.", 
            "title": "administering gitolite directly on the server"
        }, 
        {
            "location": "/namespaces/", 
            "text": "namespace support in gitolite\n\uf0c1\n\n\nThis feature is only available in the 'namespaces' branch until enough people\ntest it and tell me it works fine\n.\n\n\n\n\nAVOID NASTY SURPRISES!\n  Please read the entire page before attempting to\nuse or install this.  Most non-core features of gitolite do not work with\nnamespaces, and, worse, many of them will \nfail silently\n.  There are also\nsecurity issues you need to be aware of.\n\n\nbackground\n\uf0c1\n\n\nIn many projects, developers need to push their work to some central place for\nothers to fetch.  Namespaces allow you to give each developer what looks like\nher own repo or set of repos, while combining all these logical repos into one\nphysical repo on the server.  This saves a lot of disk space if they all share\na lot of common history.\n\n\nThe logical repos look like normal repos to a git \nclient\n; all the magic is\non the server side.  (But see the \"WARNINGS\" section).\n\n\nterminology\n\uf0c1\n\n\nThere is one repo that is special, and several others that depend upon it or\nuse it.  Depending on context, we use one of the following names:\n\n\n\n\nStorage context: backing repo/real repo, and logical repos\n\n\nWorkflow\n context: blessed repo and developer repos\n\n\n\n\nIn addition, in the gitolite context you could say that the\nblessed repo is a normal (not \"wild\") repo and the logical repos are \nwild\n\nrepos, since that is the most convenient way to set this up.  However, it is\nnot mandatory -- you can have a wild repo as a backing repo, and/or a normal\nrepo as a logical repo if you wish.\n\n\nsetup\n\uf0c1\n\n\nFirst, add the following lines to the rc file, as indicated:\n\n\n# add this line as the *last* item in the PRE_GIT trigger list.  In\n# particular, it should be *after* the Mirroring::pre_git line if you're\n# using mirroring.\n'Namespaces::pre_git',\n\n# add this line as the *first* item in the POST_GIT trigger list.  In\n# particular, it should be *before* the Mirroring::post_git line if you're\n# using mirroring.\n'Namespaces::post_git',\n\n\n\nThen use the following example conf below as a guide and roll your own.  This\nexample is from a mail to the gitolite list by Javier Domingo (\"Mirroring\nforks\", 13-11-2012), modified slightly.\n\n\n\n\n# backing repos, normal (non-wild), serving as blessed repos\n\n\nrepo \n   linux git gitolite \n[...other\n \nprojects...]\n\n\n    RW+\n     \n=   integration-manager\n\n    R\n       \n=   \n@all\n\n\n\n# logical repos, wild, created by devs as needed\n\n\nrepo \n   \nCREATOR\n/[a-zA-Z0-9].*\n\n    C\n       \n=   \n@all\n\n\n    RW+\n     \n=   \nCREATOR\n\n\n    R\n       \n=   \nREADERS\n \n@all\n\n    option namespace.pattern = %/* is @1 in @2\n\n\n\n\nuse\n\uf0c1\n\n\nA developer doesn't have to do anything differently.  She will still run,\ne.g., \ngit clone git@host:alice/linux\n to auto-create and clone a \nwild\n\nrepo for herself, then add a remote to the \"backing\" repo, fetch it, start\nworking, and eventually push her work to alice/linux.\n\n\nHowever, she might notice some differences.  To begin with, her first push of\nan enormous code base, to what she thought was an empty repo on the server,\nmight go surprisingly fast :)\n\n\nSecondly, a lot of \ngitolite\n commands (and other features) won't work.  See\nthe \"WARNINGS\" section below for more.\n\n\ndetails\n\uf0c1\n\n\nThe option line above has 3 parts separated by the words \"is\" and \"in\":\n\n\npattern\n is \nnamespace\n in \nbacking repo\n\n\n\n\nWhen a user attempts to access a logical repo (say \"alice/linux\"), the\nnamespace pattern for that repo is applied to the repo name as follows:\n\n\n\n\na percent sign matches a single component in the repo name\n\n\nan asterisk matches one or more components\n\n\n\n\nOnce the matching is done, each \"at-digit\" combination is replaced by the\ncorresponding matched segment to derive the namespace and the backing repo\nname.\n\n\nSome examples may help:\n\n\n\n\n\n\nHere's a simple one that separate the first component from the rest:\n\n\n\n    option namespace.pattern = %/* is @1 in @2\n\n\n\nA reponame of 'alice/linux' gives you a namespace of 'alice' and a backing\nreponame of 'linux'.  Similarly, 'alice/linux/2.2' gives you 'alice' and\n'linux/2.2' (which means a repo of that name has to exist!); notice how\nthe asterisk grabs up all the remaining components in the repo name.\n\n\n\n\n\n\nThis one separates the first, the second, and all the rest, but combines\n    them in a different order:\n\n\n\n    option namespace.pattern = %/%/* is @1/@3 in @2\n\n\n\nA reponame of 'alice/linux/2.2' gives you 'alice/2.2' and 'linux', while a\nreponame of 'alice/linux/2.2/smp' gives you 'alice/2.2/smp' and 'linux'.\n\n\n\n\n\n\nHere's another example on the same lines:\n\n\n\n    option namespace.pattern = %/%/%/* is @3/@2/@4 in @1\n\n\n\nA reponame of 'linux/kernel/torvalds/linux-2.6' gives you a namespace of\n'torvalds/kernel/linux-2.6' and a backing repo name of 'linux'.\n\n\n\n\n\n\nHere's an interesting example, given in full to explain better.  The basic\n    problem is that one of our backing repos is not a simple name (like 'git'\n    or 'linux'); it is 'sitaramc/gitolite'.\n\n\nIn addition, any developer-owned repo that has 3 or more components is not\na fork of anything at all, and should not be subject to namespace\nprocessing (i.e., it's just a normal repo)\n\n\n\n\n# backing repos\n\n\nrepo \nsitaramc/gitolite linux git\n    ...access rules for backing repos...\n\n# logical repos\n\n\nrepo \nCREATOR\n/..\n\n\n    C\n   \n=   \n@team\n\n\n    RW+\n \n=   \nCREATOR\n\n\n    R\n   \n=   \n@all\n\n    option namespace.pattern-1 = %/gitolite is @1 in sitaramc/gitolite\n    option namespace.pattern-2 = %/% is @1 in @2\n    option namespace.pattern-3 = %/%/\n is none in @1/@2/@3\n\n\n\nFirstly, this shows how to specify more than one namespace pattern.  Each\npattern is tried in \nlexically\n sorted order until a match is found.\n(Warning: \"lexically sorted\" means 'namespace.pattern-10' sorts before\n'namespace.pattern-2'!)\n\n\nSecondly, the example shows that you can hardcode anything, like we did\nfor the backing reponame in pattern 1.\n\n\nThirdly, it shows how you can specify a pattern that disables namespacing,\nlike the last pattern.  When the backing repo name ends up being exactly\nthe same as the original repo name, gitolite notices this and treats it as\na real repo, not as a logical repo.  (If this confuses you, ignore it and\nuse some other pattern, say \nCREATOR/personal/..*\n for developers personal\nrepos, and don't give them namespace pattern options).\n\n\nHere are some example results from this setup:\n\n\nalice/gitolite              -\n  alice, sitaramc/gitolite (pattern 1)\nalice/linux                 -\n  alice, linux (pattern 2)\nalice/linux/2.2             -\n  (namespace processing disabled)\nalice/personal/foo          -\n  (namespace processing disabled)\n\n\n\n\n\n\n\nHere's an example with some errors:\n\n\n\n    option namespace.pattern-1 = %/gitolite is @1 in sitaramc/gitolite\n    option namespace.pattern-2 = %/% is @1 in @2\n    option namespace.pattern-3 = %/%/* is @1/@3 in @2\n\n\n\nIf you try 'alice/gitolite/foo' in this setup, it will only match the 3rd\npattern.  The backing repo name will be 'gitolite', which probably doesn't\nexist, and git will complain.\n\n\nAlso, without rule 3, trying a repo with more than 2 components won't\nwork.  Gitolite will complain that no namespace options matched.  This\nwould indicate a discrepancy between the \nrepo [...]\n line governing those\noptions and the options themselves; you need to fine tune one or the\nothers to fix things.\n\n\n\n\n\n\nWARNINGS\n\uf0c1\n\n\nSECURITY\n\uf0c1\n\n\nFirst and most important\n, please read 'man gitnamespaces' for important\nsecurity information about namespaces.\n\n\nSecondly, please note that gitolite's access control decisions are made based\non the repo name that the user supplies, even if that is only a logical repo.\nE.g., in a sequence like this:\n\n\ngit clone git@server:alice/linux                        # 1\ncd alice\ngit remote add backing git@server:linux\ngit fetch backing                                       # 2\ngit checkout master\ngit push origin master                                  # 3\n\n\n\nLines 1 and 3 use the access list for the logical repo (\"alice/linux\") to\nallow or reject a push, while line 2, which is directly contacting the\n\"backing\" repo, use that repo's access rules.\n\n\nIn particular, Alice does \nnot\n need write access to the backing repo for\nthe push to succeed!\n\n\ngitolite functionality\n\uf0c1\n\n\nMost things you're used to in gitolite won't work with logical repos.  From\nthe client point of view, \nthe only features guaranteed to work on logical\nrepos are\n:\n\n\n\n\nnormal git operations (clone, fetch, push)\n\n\ncreating a new \nwild\n repo\n\n\nthe \nperms\n command (except the \"-c\" flag)\n\n\n\n\nFrom a server/admin point of view, \nthe following will not work for logical\nrepos, and may even fail silently!\n:\n\n\n\n\nsmart-http mode\n\n\nthe 'config' line in gitolite.conf\n\n\nany 'option's affecting a physical repo, like RepoUmask\n\n\nanything that expects to be recorded somewhere in the bare repo directory.\n\n\n...and anything else not explicitly listed as \"working\" in this doc ;-)\n\n\n\n\ngitolite functionality -- mirroring\n\uf0c1\n\n\nMirroring works, but \nall the logical repos and the backing repo should have\nthe same mirroring setup\n.  I.e., which server is the master, who are the\nslaves, are redirects allowed, if so from where, etc., etc., etc., should all\nhave the same values for all of them.  I cannot over-emphasise the importance\nof this for proper mirroring.\n\n\nother notes\n\uf0c1\n\n\nThe \"backing repo\" needs to exist.  If it is itself a \nwild\n repo, it must\nbe auto-created \nbefore\n a logical repo that hangs off of it is accessed.\n\n\nThe logical repo must also be mentioned in the gitolite.conf file in some way,\nas you saw in the example.  Access control decisions are made based on this\none, not the backing repo.\n\n\nOne \nquirk\n is that, if the logical repo is a wild repo, then an actual repo\nwith that name \nis\n created on disk.  Gitolite needs a place to keep its\nrepo-specific permissions so it has to do that.  You will find, however, that\nthe objects directory is pretty much empty, even after a lot of activity.", 
            "title": "using git namespaces"
        }, 
        {
            "location": "/namespaces/#namespace-support-in-gitolite", 
            "text": "This feature is only available in the 'namespaces' branch until enough people\ntest it and tell me it works fine .   AVOID NASTY SURPRISES!   Please read the entire page before attempting to\nuse or install this.  Most non-core features of gitolite do not work with\nnamespaces, and, worse, many of them will  fail silently .  There are also\nsecurity issues you need to be aware of.", 
            "title": "namespace support in gitolite"
        }, 
        {
            "location": "/namespaces/#background", 
            "text": "In many projects, developers need to push their work to some central place for\nothers to fetch.  Namespaces allow you to give each developer what looks like\nher own repo or set of repos, while combining all these logical repos into one\nphysical repo on the server.  This saves a lot of disk space if they all share\na lot of common history.  The logical repos look like normal repos to a git  client ; all the magic is\non the server side.  (But see the \"WARNINGS\" section).", 
            "title": "background"
        }, 
        {
            "location": "/namespaces/#terminology", 
            "text": "There is one repo that is special, and several others that depend upon it or\nuse it.  Depending on context, we use one of the following names:   Storage context: backing repo/real repo, and logical repos  Workflow  context: blessed repo and developer repos   In addition, in the gitolite context you could say that the\nblessed repo is a normal (not \"wild\") repo and the logical repos are  wild \nrepos, since that is the most convenient way to set this up.  However, it is\nnot mandatory -- you can have a wild repo as a backing repo, and/or a normal\nrepo as a logical repo if you wish.", 
            "title": "terminology"
        }, 
        {
            "location": "/namespaces/#setup", 
            "text": "First, add the following lines to the rc file, as indicated:  # add this line as the *last* item in the PRE_GIT trigger list.  In\n# particular, it should be *after* the Mirroring::pre_git line if you're\n# using mirroring.\n'Namespaces::pre_git',\n\n# add this line as the *first* item in the POST_GIT trigger list.  In\n# particular, it should be *before* the Mirroring::post_git line if you're\n# using mirroring.\n'Namespaces::post_git',  Then use the following example conf below as a guide and roll your own.  This\nexample is from a mail to the gitolite list by Javier Domingo (\"Mirroring\nforks\", 13-11-2012), modified slightly.   # backing repos, normal (non-wild), serving as blessed repos  repo     linux git gitolite  [...other   projects...]      RW+       =   integration-manager     R         =    @all  # logical repos, wild, created by devs as needed  repo      CREATOR /[a-zA-Z0-9].*     C         =    @all      RW+       =    CREATOR      R         =    READERS   @all \n    option namespace.pattern = %/* is @1 in @2", 
            "title": "setup"
        }, 
        {
            "location": "/namespaces/#use", 
            "text": "A developer doesn't have to do anything differently.  She will still run,\ne.g.,  git clone git@host:alice/linux  to auto-create and clone a  wild \nrepo for herself, then add a remote to the \"backing\" repo, fetch it, start\nworking, and eventually push her work to alice/linux.  However, she might notice some differences.  To begin with, her first push of\nan enormous code base, to what she thought was an empty repo on the server,\nmight go surprisingly fast :)  Secondly, a lot of  gitolite  commands (and other features) won't work.  See\nthe \"WARNINGS\" section below for more.", 
            "title": "use"
        }, 
        {
            "location": "/namespaces/#details", 
            "text": "The option line above has 3 parts separated by the words \"is\" and \"in\":  pattern  is  namespace  in  backing repo   When a user attempts to access a logical repo (say \"alice/linux\"), the\nnamespace pattern for that repo is applied to the repo name as follows:   a percent sign matches a single component in the repo name  an asterisk matches one or more components   Once the matching is done, each \"at-digit\" combination is replaced by the\ncorresponding matched segment to derive the namespace and the backing repo\nname.  Some examples may help:    Here's a simple one that separate the first component from the rest:  \n    option namespace.pattern = %/* is @1 in @2  A reponame of 'alice/linux' gives you a namespace of 'alice' and a backing\nreponame of 'linux'.  Similarly, 'alice/linux/2.2' gives you 'alice' and\n'linux/2.2' (which means a repo of that name has to exist!); notice how\nthe asterisk grabs up all the remaining components in the repo name.    This one separates the first, the second, and all the rest, but combines\n    them in a different order:  \n    option namespace.pattern = %/%/* is @1/@3 in @2  A reponame of 'alice/linux/2.2' gives you 'alice/2.2' and 'linux', while a\nreponame of 'alice/linux/2.2/smp' gives you 'alice/2.2/smp' and 'linux'.    Here's another example on the same lines:  \n    option namespace.pattern = %/%/%/* is @3/@2/@4 in @1  A reponame of 'linux/kernel/torvalds/linux-2.6' gives you a namespace of\n'torvalds/kernel/linux-2.6' and a backing repo name of 'linux'.    Here's an interesting example, given in full to explain better.  The basic\n    problem is that one of our backing repos is not a simple name (like 'git'\n    or 'linux'); it is 'sitaramc/gitolite'.  In addition, any developer-owned repo that has 3 or more components is not\na fork of anything at all, and should not be subject to namespace\nprocessing (i.e., it's just a normal repo)   # backing repos  repo  sitaramc/gitolite linux git\n    ...access rules for backing repos... # logical repos  repo  CREATOR /..      C     =    @team      RW+   =    CREATOR      R     =    @all \n    option namespace.pattern-1 = %/gitolite is @1 in sitaramc/gitolite\n    option namespace.pattern-2 = %/% is @1 in @2\n    option namespace.pattern-3 = %/%/  is none in @1/@2/@3  Firstly, this shows how to specify more than one namespace pattern.  Each\npattern is tried in  lexically  sorted order until a match is found.\n(Warning: \"lexically sorted\" means 'namespace.pattern-10' sorts before\n'namespace.pattern-2'!)  Secondly, the example shows that you can hardcode anything, like we did\nfor the backing reponame in pattern 1.  Thirdly, it shows how you can specify a pattern that disables namespacing,\nlike the last pattern.  When the backing repo name ends up being exactly\nthe same as the original repo name, gitolite notices this and treats it as\na real repo, not as a logical repo.  (If this confuses you, ignore it and\nuse some other pattern, say  CREATOR/personal/..*  for developers personal\nrepos, and don't give them namespace pattern options).  Here are some example results from this setup:  alice/gitolite              -   alice, sitaramc/gitolite (pattern 1)\nalice/linux                 -   alice, linux (pattern 2)\nalice/linux/2.2             -   (namespace processing disabled)\nalice/personal/foo          -   (namespace processing disabled)    Here's an example with some errors:  \n    option namespace.pattern-1 = %/gitolite is @1 in sitaramc/gitolite\n    option namespace.pattern-2 = %/% is @1 in @2\n    option namespace.pattern-3 = %/%/* is @1/@3 in @2  If you try 'alice/gitolite/foo' in this setup, it will only match the 3rd\npattern.  The backing repo name will be 'gitolite', which probably doesn't\nexist, and git will complain.  Also, without rule 3, trying a repo with more than 2 components won't\nwork.  Gitolite will complain that no namespace options matched.  This\nwould indicate a discrepancy between the  repo [...]  line governing those\noptions and the options themselves; you need to fine tune one or the\nothers to fix things.", 
            "title": "details"
        }, 
        {
            "location": "/namespaces/#warnings", 
            "text": "", 
            "title": "WARNINGS"
        }, 
        {
            "location": "/namespaces/#security", 
            "text": "First and most important , please read 'man gitnamespaces' for important\nsecurity information about namespaces.  Secondly, please note that gitolite's access control decisions are made based\non the repo name that the user supplies, even if that is only a logical repo.\nE.g., in a sequence like this:  git clone git@server:alice/linux                        # 1\ncd alice\ngit remote add backing git@server:linux\ngit fetch backing                                       # 2\ngit checkout master\ngit push origin master                                  # 3  Lines 1 and 3 use the access list for the logical repo (\"alice/linux\") to\nallow or reject a push, while line 2, which is directly contacting the\n\"backing\" repo, use that repo's access rules.  In particular, Alice does  not  need write access to the backing repo for\nthe push to succeed!", 
            "title": "SECURITY"
        }, 
        {
            "location": "/namespaces/#gitolite-functionality", 
            "text": "Most things you're used to in gitolite won't work with logical repos.  From\nthe client point of view,  the only features guaranteed to work on logical\nrepos are :   normal git operations (clone, fetch, push)  creating a new  wild  repo  the  perms  command (except the \"-c\" flag)   From a server/admin point of view,  the following will not work for logical\nrepos, and may even fail silently! :   smart-http mode  the 'config' line in gitolite.conf  any 'option's affecting a physical repo, like RepoUmask  anything that expects to be recorded somewhere in the bare repo directory.  ...and anything else not explicitly listed as \"working\" in this doc ;-)", 
            "title": "gitolite functionality"
        }, 
        {
            "location": "/namespaces/#gitolite-functionality-mirroring", 
            "text": "Mirroring works, but  all the logical repos and the backing repo should have\nthe same mirroring setup .  I.e., which server is the master, who are the\nslaves, are redirects allowed, if so from where, etc., etc., etc., should all\nhave the same values for all of them.  I cannot over-emphasise the importance\nof this for proper mirroring.", 
            "title": "gitolite functionality -- mirroring"
        }, 
        {
            "location": "/namespaces/#other-notes", 
            "text": "The \"backing repo\" needs to exist.  If it is itself a  wild  repo, it must\nbe auto-created  before  a logical repo that hangs off of it is accessed.  The logical repo must also be mentioned in the gitolite.conf file in some way,\nas you saw in the example.  Access control decisions are made based on this\none, not the backing repo.  One  quirk  is that, if the logical repo is a wild repo, then an actual repo\nwith that name  is  created on disk.  Gitolite needs a place to keep its\nrepo-specific permissions so it has to do that.  You will find, however, that\nthe objects directory is pretty much empty, even after a lot of activity.", 
            "title": "other notes"
        }, 
        {
            "location": "/locking/", 
            "text": "locking binary files\n\uf0c1\n\n\n\n\nLocking is useful to make sure that binary files (office docs, images, ...)\ndon't get into a merge state.  (\nIf you think it's not a big\ndeal, you have never manually merged independent changes to an ODT or\nsomething!\n)\n\n\nWhen git is used in a truly distributed fashion, locking is impossible.\n\nHowever, in most corporate setups, there is a single central server acting as\nthe canonical source of truth and collaboration point for all developers.  In\nthis situation it should be possible to at least prevent commits from being\npushed that contains changes to files locked by someone else.\n\n\nThe two \"lock\" programs (one a command that a user uses, and one a VREF that\nthe admin adds to a repo's access rules) together attempt to achieve this.\n\n\nOf course, locking by itself is not quite enough.  You may still get into\nmerge situations if you make changes in branches.  For best results you should\nactually keep all the binary files in their own branch, separate from the ones\ncontaining source code.\n\n\n\n\nproblem description\n\uf0c1\n\n\nOur users are alice, bob, and carol.  Our repo is foo.  It has some \"odt\"\nfiles in the \"doc/\" directory.  We want to make sure these odt files never get\ninto a \"merge\" situation.\n\n\nadmin/setup\n\uf0c1\n\n\nFirst, someone with shell access to the server must add 'lock' to the ENABLE\nlist in the rc file.\n\n\nNext, the gitolite.conf file should have something like this:\n\n\n\n\nrepo \nfoo\n    ...other rules...\n\n    -\n   VREF/lock      \n=\n   @all\n\n\n\n\n\nHowever, see below for the difference between \"RW\" and \"RW+\" from the point of\nview of this feature and adjust permissions accordingly.\n\n\nuser view\n\uf0c1\n\n\nHere's a summary:\n\n\n\n\nAny user with \"W\" permissions to any branch in the repo can \"lock\" any\n    file.  Once locked, no other user can push changes to that file, \nin any\n    branch\n, until it is unlocked.\n\n\nAny user with \"+\" permissions to any branch in the repo can \"break\" a lock\n    held by someone else if needed.\n\n\n\n\nFor best results, everyone on the team should:\n\n\n\n\nSwitch to the branch containing the binary files when wanting to make a\n    change.\n\n\nRun 'git pull' or eqvt, then lock the binary file(s) before editing them.\n\n\nFinish the editing task as quickly as possible, then commit, push, and\n    unlock the file(s) so others are not needlessly blocked.\n\n\nUnderstand that breaking a lock require additional, (out of band)\n    communication.  It is upto the team's policies what that entails.\n\n\n\n\ndetailed example\n\uf0c1\n\n\nAlice declares her intent to work on \"d1.odt\":\n\n\n$ git pull\n$ ssh git@host lock -l foo doc/d1.odt\n\n\n\nSimilarly Bob starts on \"d2.odt\"\n\n\n$ git pull\n$ ssh git@host lock -l foo doc/d2.odt\n\n\n\nCarol makes some changes to d2.odt (\nwithout attempting to lock the file or\nchecking to see if it is already locked\n) and pushes:\n\n\n$ ooffice doc/d2.odt\n$ git add doc/d2.odt\n$ git commit -m 'added footnotes to d2 in klingon'\n$ git push\n\n...normal push progress output...\n\nremote: FATAL: W VREF/lock testing carol DENIED by VREF/lock\nremote: 'doc/d2.odt' locked by 'bob'\nremote: error: hook declined to update refs/heads/master\nTo u2:testing\n ! [remote rejected] master -\n master (hook declined)\nerror: failed to push some refs to 'carol:foo'\n\n\n\nCarol backs out her changes, but saves them away for a \"manual merge\" later.\n\n\ngit reset HEAD^\ngit stash save 'klingon changes to d2.odt saved for possible manual merge later'\n\n\n\nNote that this still represents wasted work in some sense, because Carol would\nhave to somehow re-apply the same changes to the new version of d2.odt after\npulling it down.  \nThis is because she did not lock the file before making\nchanges on her local repo.  Educating users in doing this is important if this\nscheme is to help you.\n\n\nShe now decides to work on \"d1.odt\".  However, she has learned her lesson and\ndecides to follow the protocol described above:\n\n\n$ git pull\n$ ssh git@host lock -l foo doc/d1.odt\nFATAL: 'doc/d1.odt' locked by 'alice' since Sun May 27 17:59:59 2012\n\n\n\nOh damn; can't work on that either.\n\n\nCarol now decides to see what else there may be.  Instead of checking each\nfile to see if she can lock it, she starts with a list of what is already\nlocked:\n\n\n$ ssh git@host lock -ls foo\n\n# locks held:\n\nalice   doc/d1.odt      (Sun May 27 17:59:59 2012)\nbob     doc/d2.odt      (Sun May 27 18:00:06 2012)\n\n# locks broken:\n\n\n\nAha, looks like only d1 and d2 are locked.  She picks d3.odt to work on.  This\ntime, she starts by locking it:\n\n\n$ ssh git@host lock -l foo doc/d3.odt\n$ ooffice doc/d3.odt\n\n...etc...\n\n\n\n\nMeanwhile, in a parallel universe where d3.odt doesn't exist, and Alice has\ngone on vacation while keeping d1.odt locked, Carol breaks the lock.  Carol\ncan do this because she has RW+ permissions for the repository itself.\n\n\nHowever, protocol in this team requires that she get email approval from the\nteam lead before doing this and that Alice be in CC in those emails, so she\ndoes that first, and \nthen\n she breaks the lock:\n\n\n$ git pull\n$ ssh git@host lock --break foo doc/d1.odt\n\n\n\nShe then locks d1.odt for herself:\n\n\n$ ssh git@host lock -l foo doc/d1.odt\n\n\n\nWhen Alice comes back, she can tell who broke her lock and when:\n\n\n$ ssh git@host lock -ls foo\n\n# locks held:\n\ncarol   doc/d1.odt      (Sun May 27 18:17:29 2012)\nbob     doc/d2.odt      (Sun May 27 18:00:06 2012)\n\n# locks broken:\n\ncarol   doc/d1.odt      (Sun May 27 18:17:03 2012)      (locked by alice at Sun May 27 17:59:59 2012)", 
            "title": "locking binary files"
        }, 
        {
            "location": "/locking/#locking-binary-files", 
            "text": "Locking is useful to make sure that binary files (office docs, images, ...)\ndon't get into a merge state.  ( If you think it's not a big\ndeal, you have never manually merged independent changes to an ODT or\nsomething! )  When git is used in a truly distributed fashion, locking is impossible. \nHowever, in most corporate setups, there is a single central server acting as\nthe canonical source of truth and collaboration point for all developers.  In\nthis situation it should be possible to at least prevent commits from being\npushed that contains changes to files locked by someone else.  The two \"lock\" programs (one a command that a user uses, and one a VREF that\nthe admin adds to a repo's access rules) together attempt to achieve this.  Of course, locking by itself is not quite enough.  You may still get into\nmerge situations if you make changes in branches.  For best results you should\nactually keep all the binary files in their own branch, separate from the ones\ncontaining source code.", 
            "title": "locking binary files"
        }, 
        {
            "location": "/locking/#problem-description", 
            "text": "Our users are alice, bob, and carol.  Our repo is foo.  It has some \"odt\"\nfiles in the \"doc/\" directory.  We want to make sure these odt files never get\ninto a \"merge\" situation.", 
            "title": "problem description"
        }, 
        {
            "location": "/locking/#adminsetup", 
            "text": "First, someone with shell access to the server must add 'lock' to the ENABLE\nlist in the rc file.  Next, the gitolite.conf file should have something like this:   repo  foo\n    ...other rules...     -    VREF/lock       =    @all   However, see below for the difference between \"RW\" and \"RW+\" from the point of\nview of this feature and adjust permissions accordingly.", 
            "title": "admin/setup"
        }, 
        {
            "location": "/locking/#user-view", 
            "text": "Here's a summary:   Any user with \"W\" permissions to any branch in the repo can \"lock\" any\n    file.  Once locked, no other user can push changes to that file,  in any\n    branch , until it is unlocked.  Any user with \"+\" permissions to any branch in the repo can \"break\" a lock\n    held by someone else if needed.   For best results, everyone on the team should:   Switch to the branch containing the binary files when wanting to make a\n    change.  Run 'git pull' or eqvt, then lock the binary file(s) before editing them.  Finish the editing task as quickly as possible, then commit, push, and\n    unlock the file(s) so others are not needlessly blocked.  Understand that breaking a lock require additional, (out of band)\n    communication.  It is upto the team's policies what that entails.", 
            "title": "user view"
        }, 
        {
            "location": "/locking/#detailed-example", 
            "text": "Alice declares her intent to work on \"d1.odt\":  $ git pull\n$ ssh git@host lock -l foo doc/d1.odt  Similarly Bob starts on \"d2.odt\"  $ git pull\n$ ssh git@host lock -l foo doc/d2.odt  Carol makes some changes to d2.odt ( without attempting to lock the file or\nchecking to see if it is already locked ) and pushes:  $ ooffice doc/d2.odt\n$ git add doc/d2.odt\n$ git commit -m 'added footnotes to d2 in klingon'\n$ git push ...normal push progress output... \nremote: FATAL: W VREF/lock testing carol DENIED by VREF/lock\nremote: 'doc/d2.odt' locked by 'bob'\nremote: error: hook declined to update refs/heads/master\nTo u2:testing\n ! [remote rejected] master -  master (hook declined)\nerror: failed to push some refs to 'carol:foo'  Carol backs out her changes, but saves them away for a \"manual merge\" later.  git reset HEAD^\ngit stash save 'klingon changes to d2.odt saved for possible manual merge later'  Note that this still represents wasted work in some sense, because Carol would\nhave to somehow re-apply the same changes to the new version of d2.odt after\npulling it down.   This is because she did not lock the file before making\nchanges on her local repo.  Educating users in doing this is important if this\nscheme is to help you.  She now decides to work on \"d1.odt\".  However, she has learned her lesson and\ndecides to follow the protocol described above:  $ git pull\n$ ssh git@host lock -l foo doc/d1.odt\nFATAL: 'doc/d1.odt' locked by 'alice' since Sun May 27 17:59:59 2012  Oh damn; can't work on that either.  Carol now decides to see what else there may be.  Instead of checking each\nfile to see if she can lock it, she starts with a list of what is already\nlocked:  $ ssh git@host lock -ls foo\n\n# locks held:\n\nalice   doc/d1.odt      (Sun May 27 17:59:59 2012)\nbob     doc/d2.odt      (Sun May 27 18:00:06 2012)\n\n# locks broken:  Aha, looks like only d1 and d2 are locked.  She picks d3.odt to work on.  This\ntime, she starts by locking it:  $ ssh git@host lock -l foo doc/d3.odt\n$ ooffice doc/d3.odt ...etc...   Meanwhile, in a parallel universe where d3.odt doesn't exist, and Alice has\ngone on vacation while keeping d1.odt locked, Carol breaks the lock.  Carol\ncan do this because she has RW+ permissions for the repository itself.  However, protocol in this team requires that she get email approval from the\nteam lead before doing this and that Alice be in CC in those emails, so she\ndoes that first, and  then  she breaks the lock:  $ git pull\n$ ssh git@host lock --break foo doc/d1.odt  She then locks d1.odt for herself:  $ ssh git@host lock -l foo doc/d1.odt  When Alice comes back, she can tell who broke her lock and when:  $ ssh git@host lock -ls foo\n\n# locks held:\n\ncarol   doc/d1.odt      (Sun May 27 18:17:29 2012)\nbob     doc/d2.odt      (Sun May 27 18:00:06 2012)\n\n# locks broken:\n\ncarol   doc/d1.odt      (Sun May 27 18:17:03 2012)      (locked by alice at Sun May 27 17:59:59 2012)", 
            "title": "detailed example"
        }, 
        {
            "location": "/testing/", 
            "text": "testing gitolite\n\uf0c1\n\n\nWARNING: this will clobber \nthese files and\ndirectories\n in your \n$HOME\n.  Ideally, you should use a throwaway\nuserid\n.\n\n\n\n\nRunning gitolite's test suite is really just a superset of \ntrying it out\nsafely\n.\n\n\nTo run the full test suite, create a \nthrow-away userid\n, log in to it, then\nrun these commands:\n\n\ngit config --global include.path ~/.gitconfig.local\ngit clone git://github.com/sitaramc/gitolite\ncd gitolite\nprove\n\n\n\nYou will get an error that forces you to read \nt/README\n and set an env var\nbefore the test can proceed.  This is intentional; I've had people who don't\npay attention to the \"data loss\" warning, and then complain that it was not\nprominent enough.  Forcing them to read a much smaller page appears to focus\ntheir attention better!\n\n\nThe test suite should run fine on most recent Linuxes and Unixes.  Although\ngitolite itself should work fine with any git after 1.6.6 or so, the test\nsuite generally requires a more recent git.\n\n\nMake sure:\n\n\n\n\n$HOME/bin\n is in \n$PATH\n\n\nsshd allows incoming ssh to this userid, at least from localhost\n\n\n\n\nGitolite's test suite is mostly written using \ntsh\n -- the \"testing shell\".\nTake a look at some of the scripts and you will see what it looks like.  It\nhas a few quirks and nuances, but it's fine for what I need here.\n\n\nThe tests also use a somewhat convoluted system of environment variables in\norder to run \nentirely\n as a local user, without going through ssh at all.\nThis lets a complete test suite run in about a lot less time than it would\notherwise take.\n\n\nIf you think that defeats the purpose of the testing, you haven't read\n\nthis\n yet.\n\n\nappendix 1 -- the clobber list\n\uf0c1\n\n\nWhen you \ntry out gitolite\n or run the test suite, the following files\nand directories in your \\$HOME are potentially clobbered.\n\n\n.gitconfig\n.gitolite/\n.gitolite.rc\nprojects.list\nrepositories/\n.ssh/", 
            "title": "testing gitolite"
        }, 
        {
            "location": "/testing/#testing-gitolite", 
            "text": "WARNING: this will clobber  these files and\ndirectories  in your  $HOME .  Ideally, you should use a throwaway\nuserid .   Running gitolite's test suite is really just a superset of  trying it out\nsafely .  To run the full test suite, create a  throw-away userid , log in to it, then\nrun these commands:  git config --global include.path ~/.gitconfig.local\ngit clone git://github.com/sitaramc/gitolite\ncd gitolite\nprove  You will get an error that forces you to read  t/README  and set an env var\nbefore the test can proceed.  This is intentional; I've had people who don't\npay attention to the \"data loss\" warning, and then complain that it was not\nprominent enough.  Forcing them to read a much smaller page appears to focus\ntheir attention better!  The test suite should run fine on most recent Linuxes and Unixes.  Although\ngitolite itself should work fine with any git after 1.6.6 or so, the test\nsuite generally requires a more recent git.  Make sure:   $HOME/bin  is in  $PATH  sshd allows incoming ssh to this userid, at least from localhost   Gitolite's test suite is mostly written using  tsh  -- the \"testing shell\".\nTake a look at some of the scripts and you will see what it looks like.  It\nhas a few quirks and nuances, but it's fine for what I need here.  The tests also use a somewhat convoluted system of environment variables in\norder to run  entirely  as a local user, without going through ssh at all.\nThis lets a complete test suite run in about a lot less time than it would\notherwise take.  If you think that defeats the purpose of the testing, you haven't read this  yet.", 
            "title": "testing gitolite"
        }, 
        {
            "location": "/testing/#appendix-1-the-clobber-list", 
            "text": "When you  try out gitolite  or run the test suite, the following files\nand directories in your \\$HOME are potentially clobbered.  .gitconfig\n.gitolite/\n.gitolite.rc\nprojects.list\nrepositories/\n.ssh/", 
            "title": "appendix 1 -- the clobber list"
        }, 
        {
            "location": "/package/", 
            "text": "packaging gitolite\n\uf0c1\n\n\n\n\nGitolite has broad similarities to git in terms of packaging requirements.\n\n\n\n\n\n\nGit has 150 executables to marshal and put somewhere.  Gitolite has the\n    directories \ncommands\n, \nlib\n, \nsyntactic-sugar\n, \ntriggers\n, and \nVREF\n.\n\n\nIt doesn't matter what this directory is.  As an example, Fedora keeps\ngit's 150 executables in /usr/libexec/git-core, so /usr/libexec/gitolite\nmay be a good choice; it's upto you.\n\n\nThe rest of this section will assume you chose /usr/libexec/gitolite as\nthe location, and that this location contains the 5 directories named\nabove\n.\n\n\n\n\n\n\nGit has the \nGIT_EXEC_PATH\n env var to point to this directory.  Gitolite\n    has \nGL_BINDIR\n.  However, in git, the \"make\" process embeds a suitable\n    default into the binary, making the env var optional.\n\n\n\n\n\n\nWith that said, here's one way to package gitolite:\n\n\n\n\n\n\nPut the executable \ngitolite\n somewhere in PATH.  Put the executable\n    \ngitolite-shell\n in /usr/libexec/gitolite (along with those 5 directories).\n\n\nChange the 2 assignments to \n$ENV{GL_BINDIR}\n, one in 'gitolite', one in\n'gitolite-shell', to \"/usr/libexec/gitolite\" from \n$FindBin::RealBin\n.\nThis is equivalent to \"make\" embedding the exec-path into the executable.\n\n\nOR\n\n\nPut both executables \ngitolite\n and \ngitolite-shell\n also into\n/usr/libexec/gitolite (i.e., as siblings to the 5 directories mentioned\nabove).  Then \nsymlink\n \n/usr/libexec/gitolite/gitolite\n to some directory\nin the PATH.  Do not \ncopy\n it; it must be a symlink.\n\n\nGitolite will find the exec-path by following the symlink.\n\n\n\n\n\n\nThe \nGitolite\n subdirectory in \n/usr/libexec/gitolite/lib\n can stay right\n    there, \nOR\n, if your distro policies don't allow that, can be put in any\n    directory in perl's \n@INC\n path (such as \n/usr/share/perl5/vendor_perl\n).\n\n\n\n\n\n\nFinally, a file called \n/usr/libexec/gitolite/VERSION\n must contain a\n    suitable version string.", 
            "title": "packaging gitolite"
        }, 
        {
            "location": "/package/#packaging-gitolite", 
            "text": "Gitolite has broad similarities to git in terms of packaging requirements.    Git has 150 executables to marshal and put somewhere.  Gitolite has the\n    directories  commands ,  lib ,  syntactic-sugar ,  triggers , and  VREF .  It doesn't matter what this directory is.  As an example, Fedora keeps\ngit's 150 executables in /usr/libexec/git-core, so /usr/libexec/gitolite\nmay be a good choice; it's upto you.  The rest of this section will assume you chose /usr/libexec/gitolite as\nthe location, and that this location contains the 5 directories named\nabove .    Git has the  GIT_EXEC_PATH  env var to point to this directory.  Gitolite\n    has  GL_BINDIR .  However, in git, the \"make\" process embeds a suitable\n    default into the binary, making the env var optional.    With that said, here's one way to package gitolite:    Put the executable  gitolite  somewhere in PATH.  Put the executable\n     gitolite-shell  in /usr/libexec/gitolite (along with those 5 directories).  Change the 2 assignments to  $ENV{GL_BINDIR} , one in 'gitolite', one in\n'gitolite-shell', to \"/usr/libexec/gitolite\" from  $FindBin::RealBin .\nThis is equivalent to \"make\" embedding the exec-path into the executable.  OR  Put both executables  gitolite  and  gitolite-shell  also into\n/usr/libexec/gitolite (i.e., as siblings to the 5 directories mentioned\nabove).  Then  symlink   /usr/libexec/gitolite/gitolite  to some directory\nin the PATH.  Do not  copy  it; it must be a symlink.  Gitolite will find the exec-path by following the symlink.    The  Gitolite  subdirectory in  /usr/libexec/gitolite/lib  can stay right\n    there,  OR , if your distro policies don't allow that, can be put in any\n    directory in perl's  @INC  path (such as  /usr/share/perl5/vendor_perl ).    Finally, a file called  /usr/libexec/gitolite/VERSION  must contain a\n    suitable version string.", 
            "title": "packaging gitolite"
        }, 
        {
            "location": "/files/", 
            "text": "gitolite files and directories\n\uf0c1\n\n\n\n\ndirectories\n\uf0c1\n\n\nGitolite creates and uses the following files and directories:\n\n\n\n\n~/repositories\n -- the actual (bare) repositories are here\n\n\n~/.gitolite.rc\n -- configuration parameters that must be done directly on\n    the server\n\n\n~/.gitolite\n -- gitolite's \"working\" directory.  This contains everything\n    else that gitolite needs.  (Warning: you're not supposed to fiddle with\n    the files and directories within; instead, make changes in a clone of the\n    gitolite-admin repository and push, and those appear magically here).\n\n\n\n\nOnce the install/setup is done, any (or all) of these may be moved\nelsewhere and replaced by symlinks.  The most common reason for\nlocating \n~/repositories\n somewhere else is disk space, but FHS\ncompliance could also be a reason.\n\n\nIn addition, the following are of interest:\n\n\n\n\n~/.ssh\n -- if you're using ssh (as opposed to http), since this is where\n    the \nauthorized_keys\n file is kept\n\n\n\n\nspecial files\n\uf0c1\n\n\nYou may want to backup the contents of \n~/.gitolite/logs\n if you care about\nauditability etc.\n\n\ninside a \"gitolite repo\"\n\uf0c1\n\n\nA gitolite repo is just like a normal bare repo on any normal git server.\nThere are a few extra files placed in the repo directory whose names start\nwith \"gl-\", and there is also an update hook placed in the hooks subdirectory,\nbut that's about it, for the most part.\n\n\nIn other words, you can treat a gitolite-managed repo just like any other bare\nrepo as long as you leave those files alone.\n\n\ngitolite software\n\uf0c1\n\n\nThe above list does not include the gitolite software itself.\n\n\nGitolite offers you 3 ways to install software.  After cloning the gitolite\nsources, run the install command in it with a \n-h\n argument to see what they\nare.  Where the actual software is found depends on that.", 
            "title": "gitolite files & directories"
        }, 
        {
            "location": "/files/#gitolite-files-and-directories", 
            "text": "", 
            "title": "gitolite files and directories"
        }, 
        {
            "location": "/files/#directories", 
            "text": "Gitolite creates and uses the following files and directories:   ~/repositories  -- the actual (bare) repositories are here  ~/.gitolite.rc  -- configuration parameters that must be done directly on\n    the server  ~/.gitolite  -- gitolite's \"working\" directory.  This contains everything\n    else that gitolite needs.  (Warning: you're not supposed to fiddle with\n    the files and directories within; instead, make changes in a clone of the\n    gitolite-admin repository and push, and those appear magically here).   Once the install/setup is done, any (or all) of these may be moved\nelsewhere and replaced by symlinks.  The most common reason for\nlocating  ~/repositories  somewhere else is disk space, but FHS\ncompliance could also be a reason.  In addition, the following are of interest:   ~/.ssh  -- if you're using ssh (as opposed to http), since this is where\n    the  authorized_keys  file is kept", 
            "title": "directories"
        }, 
        {
            "location": "/files/#special-files", 
            "text": "You may want to backup the contents of  ~/.gitolite/logs  if you care about\nauditability etc.", 
            "title": "special files"
        }, 
        {
            "location": "/files/#inside-a-gitolite-repo", 
            "text": "A gitolite repo is just like a normal bare repo on any normal git server.\nThere are a few extra files placed in the repo directory whose names start\nwith \"gl-\", and there is also an update hook placed in the hooks subdirectory,\nbut that's about it, for the most part.  In other words, you can treat a gitolite-managed repo just like any other bare\nrepo as long as you leave those files alone.", 
            "title": "inside a \"gitolite repo\""
        }, 
        {
            "location": "/files/#gitolite-software", 
            "text": "The above list does not include the gitolite software itself.  Gitolite offers you 3 ways to install software.  After cloning the gitolite\nsources, run the install command in it with a  -h  argument to see what they\nare.  Where the actual software is found depends on that.", 
            "title": "gitolite software"
        }, 
        {
            "location": "/rc-33/", 
            "text": "the v3.0 to v3.3 \"rc\" file (\n$HOME/.gitolite.rc\n)\n\uf0c1\n\n\n\n\nNOTE 1\n: if you're using v3.4 and above, see \nthis\n.\n\n\nNOTE 2\n: if you're migrating from v2, there are some settings that MUST be\ndealt with \nbefore\n running \ngitolite setup\n; please read the\n\nmigration\n page and linked pages, and especially the one on \"presetting\nthe rc file\"\n\n\n\n\nThe rc file for v3 is \nquite\n different from that of v2.\n\n\nAs before, it is designed to be the only thing unique to your site for most\nsetups.  What is new is that it is easy to extend it when new needs come up,\nwithout having to touch core gitolite.\n\n\nThe rc file is perl code, but you do NOT need to know perl to edit it.  Just\nmind the commas, use single quotes unless you know what you're doing, and make\nsure the brackets and braces stay matched up!\n\n\nPlease look at the \n~/.gitolite.rc\n file that gets installed when you setup\ngitolite.  As you can see there are 3 types of variables in it:\n\n\n\n\nsimple variables (like \nUMASK\n)\n\n\nlists (like \nPOST_COMPILE\n, \nPOST_CREATE\n)\n\n\nhashes (like \nROLES\n, \nCOMMANDS\n)\n\n\n\n\nWhile some of the variables are documented in this file, many of them are not.\nTheir purposes are to be found in each of their individual documentation files\naround; start with \n\"non-core\" gitolite\n.  If a setting is used by a\ncommand then running that command with '-h' may give you additional\ninformation.\n\n\nspecific variables\n\uf0c1\n\n\n\n\n\n\n$UMASK\n, octal, default \n0077\n\n\nThe default UMASK that gitolite uses makes all the repos and their\ncontents have \nrwx------\n permissions.  People who want to run gitweb\nrealise that this will not do.\n\n\nThe correct way to deal with this is to give this variable a value like\n\n0027\n (note the syntax: the leading 0 is required), and then make the\nuser running the webserver (apache, www-data, whatever) a member of the\n'git' group.\n\n\nIf you've already installed gitolite then existing files will have to be\nfixed up manually (for a umask or 0027, that would be \nchmod -R g+rX\n).\nThis is because umask only affects permissions on newly created files, not\nexisting ones.\n\n\n\n\n\n\n$GIT_CONFIG_KEYS\n, string, default empty\n\n\nThis setting allows the repo admin to define acceptable gitconfig keys.\n\n\nGitolite allows you to set git config values using the \"config\" keyword;\nsee \nhere\n for details and syntax.\n\n\nHowever, if you are in an installation where the repo admin does not (and\nshould not) have shell access to the server, then allowing him to set\narbitrary repo config options \nmay\n be a security risk -- some config\nsettings allow executing arbitrary commands!\n\n\nYou have 3 choices.  By default \n$GIT_CONFIG_KEYS\n is left empty, which\ncompletely disables this feature (meaning you cannot set git configs via\nthe repo config).\n\n\nThe second choice is to give it a space separated list of settings you\nconsider safe.  (These are actually treated as a set of \nregular\nexpressions\n, and any one of them must match).\n\n\nFor example:\n\n\n$GIT_CONFIG_KEYS = 'core\\.logAllRefUpdates core\\..*compression';\n\n\n\nEach regex should match the \nwhole\n key (in other words, there\nis an implicit \n^\n at the start of each regex, and a \n$\n at the\nend).\n\n\nThe third choice (which you may have guessed already if you're familiar\nwith regular expressions) is to allow anything and everything:\n\n$GIT_CONFIG_KEYS = '.*';\n\n\n\n\n\n\nROLES\n, hash, default keys 'READERS' and 'WRITERS'\n\n\nThis specifies the role names allowed to be used by users running the\n\nperms\n command.  The \nwild\n repos doc has more info on roles.\n\n\n\n\n\n\nDEFAULT_ROLE_PERMS\n, string, default undef\n\n\nThis sets default wildcard permissions for newly created wildcard repos.\n\n\nIf set, this value will be used as the default role permissions for new\nwildcard repositories. The user can change this value with the perms\ncommand as desired after repository creation; it is only a default.\n\n\nPlease be aware this is potentially a multi-line variable.  In most\nsetups, it will be left undefined.  Some installations may benefit from\nsetting it to \nREADERS @all\n.\n\n\nIf you want multiple roles to be assigned by default, here is how.  Note\ndouble quotes this time, due to the embedded newline, which in turn\nrequire the '@' to be escaped:\n\n\nDEFAULT_ROLE_PERMS  =\n  \"READERS \\@all\\nWRITERS \\@senior_devs\",\n\n\n\n\n\n\n\nLOCAL_CODE\n, string\n\n\nThis is described in more detail \nhere\n.  Please be aware\n\nthis must be a FULL path\n, not a relative path.", 
            "title": "the 3.3 format rc file"
        }, 
        {
            "location": "/rc-33/#the-v30-to-v33-rc-file-homegitoliterc", 
            "text": "NOTE 1 : if you're using v3.4 and above, see  this .  NOTE 2 : if you're migrating from v2, there are some settings that MUST be\ndealt with  before  running  gitolite setup ; please read the migration  page and linked pages, and especially the one on \"presetting\nthe rc file\"   The rc file for v3 is  quite  different from that of v2.  As before, it is designed to be the only thing unique to your site for most\nsetups.  What is new is that it is easy to extend it when new needs come up,\nwithout having to touch core gitolite.  The rc file is perl code, but you do NOT need to know perl to edit it.  Just\nmind the commas, use single quotes unless you know what you're doing, and make\nsure the brackets and braces stay matched up!  Please look at the  ~/.gitolite.rc  file that gets installed when you setup\ngitolite.  As you can see there are 3 types of variables in it:   simple variables (like  UMASK )  lists (like  POST_COMPILE ,  POST_CREATE )  hashes (like  ROLES ,  COMMANDS )   While some of the variables are documented in this file, many of them are not.\nTheir purposes are to be found in each of their individual documentation files\naround; start with  \"non-core\" gitolite .  If a setting is used by a\ncommand then running that command with '-h' may give you additional\ninformation.", 
            "title": "the v3.0 to v3.3 \"rc\" file ($HOME/.gitolite.rc)"
        }, 
        {
            "location": "/rc-33/#specific-variables", 
            "text": "$UMASK , octal, default  0077  The default UMASK that gitolite uses makes all the repos and their\ncontents have  rwx------  permissions.  People who want to run gitweb\nrealise that this will not do.  The correct way to deal with this is to give this variable a value like 0027  (note the syntax: the leading 0 is required), and then make the\nuser running the webserver (apache, www-data, whatever) a member of the\n'git' group.  If you've already installed gitolite then existing files will have to be\nfixed up manually (for a umask or 0027, that would be  chmod -R g+rX ).\nThis is because umask only affects permissions on newly created files, not\nexisting ones.    $GIT_CONFIG_KEYS , string, default empty  This setting allows the repo admin to define acceptable gitconfig keys.  Gitolite allows you to set git config values using the \"config\" keyword;\nsee  here  for details and syntax.  However, if you are in an installation where the repo admin does not (and\nshould not) have shell access to the server, then allowing him to set\narbitrary repo config options  may  be a security risk -- some config\nsettings allow executing arbitrary commands!  You have 3 choices.  By default  $GIT_CONFIG_KEYS  is left empty, which\ncompletely disables this feature (meaning you cannot set git configs via\nthe repo config).  The second choice is to give it a space separated list of settings you\nconsider safe.  (These are actually treated as a set of  regular\nexpressions , and any one of them must match).  For example:  $GIT_CONFIG_KEYS = 'core\\.logAllRefUpdates core\\..*compression';  Each regex should match the  whole  key (in other words, there\nis an implicit  ^  at the start of each regex, and a  $  at the\nend).  The third choice (which you may have guessed already if you're familiar\nwith regular expressions) is to allow anything and everything: $GIT_CONFIG_KEYS = '.*';    ROLES , hash, default keys 'READERS' and 'WRITERS'  This specifies the role names allowed to be used by users running the perms  command.  The  wild  repos doc has more info on roles.    DEFAULT_ROLE_PERMS , string, default undef  This sets default wildcard permissions for newly created wildcard repos.  If set, this value will be used as the default role permissions for new\nwildcard repositories. The user can change this value with the perms\ncommand as desired after repository creation; it is only a default.  Please be aware this is potentially a multi-line variable.  In most\nsetups, it will be left undefined.  Some installations may benefit from\nsetting it to  READERS @all .  If you want multiple roles to be assigned by default, here is how.  Note\ndouble quotes this time, due to the embedded newline, which in turn\nrequire the '@' to be escaped:  DEFAULT_ROLE_PERMS  =   \"READERS \\@all\\nWRITERS \\@senior_devs\",    LOCAL_CODE , string  This is described in more detail  here .  Please be aware this must be a FULL path , not a relative path.", 
            "title": "specific variables"
        }, 
        {
            "location": "/perf/", 
            "text": "gitolite performance\n\uf0c1\n\n\n\n\nTOP TIP: If you have more than 2000 or so repos, then you should be using v3.2\nor later; there was a bit of code that went in there that makes a \nhuge\n\ndifference for really large sites.\n\n\ntips for performance worriers\n\uf0c1\n\n\nGitolite is pretty efficient in most cases, and generally nothing needs to be\ndone.  If you think you have a performance problem, let me know on the mailing\nlist.  Meanwhile, here are some tips:\n\n\n\n\n\n\nLook in the gitolite log file after any operation that you think ran\n    slowly.  In particular, pushing to the admin repo, or a user creating a\n    new wild repo, might be a little slow, and the log file will tell you a\n    bit more detail on what took time.\n\n\n\n\n\n\nIf you don't use gitweb or git-daemon, or use them but are perfectly happy\n    to control access to them from outside gitolite, you can comment out the\n    corresponding lines in the ENABLE list the rc file.\n\n\n\n\n\n\nIf you can't get rid of those scripts, and they are still taking too long,\n    you can make them run in the background.  They'll eventually finish but\n    the user doesn't have to wait.  See src/triggers/bg.  \nThis should not\n    normally be needed; if you feel you need it, please talk to me so I can\n    understand why and maybe help\n.\n\n\n\n\n\n\nIf you're more concerned about your users' time when they create a new\n    wild repo (and not so much about the admin push taking time), you can fix\n    a couple of scripts and send me a patch :)\n\n\nHere's the scoop:\n\n\nScripts invoked via \nPOST_CREATE\n \ndo\n get information about what repo has\njust been created.  However, the gitweb and daemon scripts are not set to\ntake advantage of this, only the git-config one is.  So use the git-config\nscript as an example, and/or read the \ntriggers\n page, and fix the other\ntwo programs.\n\n\n(This should be easy enough for the daemon update, but the gitweb update\nmay be a little more tricky, since it may involve \ndeleting\n lines from\nthe \"projects.list\" file.)\n\n\n\n\n\n\nwhy there's really no need to worry!\n\uf0c1\n\n\nIn general, gitolite has a constant overhead of about 0.2 seconds on my\nlaptop.  There really is nothing to optimise, but you can comment out some\ntriggers as the previous section said.\n\n\nHere's the big-O stuff:\n\n\n\n\nN = number of normal repos, each with its own set of rules.  In \nrepo r1\n    r2 r3\n, N = 3.  Add up all such lines.\n\n\nG = number of groups or repo regexes.  In \nrepo @g1 @g2 foo/[a-z]*\n, G =\n    3.\n\n\nM = number of members.  In \n@g1 = r1 r2 \nnl\n @g2 = r3 r4 r5\n, M = 5.\n\n\nA = average number of rule lines in each \"repo\" block.  Usually about 5,\n    maybe 10 sometimes.  You may have more.\n\n\n\n\nGitolite overheads compared to a normal ssh push are:\n\n\n\n\nperl startup time.  Fairly constant and fairly small.  I have generally\n    found it pretty hard to measure, especially with a hot cache.\n\n\nrule parse time.  Details below\n\n\nrule interpretation time.  Fairly constant, or at least subject to much\n    smaller variations than #2.\n\n\n\n\n\"rule parse time\" is where it makes a difference.  There are 2 files gitolite\nparses on each \"access\": \n~/.gitolite/conf/gitolite.conf-compiled.pm\n and\n\n~/repositories/your_repo.git/gl-conf\n.  The former contains O(N + M + G*A)\nlines.  In addition, the gl-conf files contains about \"A\" lines (remember we\ncalled it an average), which is negligible.\n\n\nIn practice, you can't measure this at a scale that a developer running a \"git\npush\" might even pretend to notice, unless you have more than, say, 5000 repos\nor so.  On my testbed of 11,100 repos, where the compiled.pm is almost 0.7 MB,\nit takes less than 0.2 seconds to do this.\n\n\nAnd on a busy system, when that file will be pretty much always in cache, it's\neven less.\n\n\nthe only thing that will take more time\n\uf0c1\n\n\nLiterally, the only thing that will take time is something like \"ssh git@host\ninfo\" because it finds all possible repos and for each of them it tries to\ncheck the access.  On that same test bed, therefore, this ends up reading all\n11,100 \"gl-conf\" files.\n\n\nOn my laptop this takes about 14 seconds.  In contrast, a normal git operation\n(clone, pull, push, etc) is so small it is hard to measure without software.", 
            "title": "performance"
        }, 
        {
            "location": "/perf/#gitolite-performance", 
            "text": "TOP TIP: If you have more than 2000 or so repos, then you should be using v3.2\nor later; there was a bit of code that went in there that makes a  huge \ndifference for really large sites.", 
            "title": "gitolite performance"
        }, 
        {
            "location": "/perf/#tips-for-performance-worriers", 
            "text": "Gitolite is pretty efficient in most cases, and generally nothing needs to be\ndone.  If you think you have a performance problem, let me know on the mailing\nlist.  Meanwhile, here are some tips:    Look in the gitolite log file after any operation that you think ran\n    slowly.  In particular, pushing to the admin repo, or a user creating a\n    new wild repo, might be a little slow, and the log file will tell you a\n    bit more detail on what took time.    If you don't use gitweb or git-daemon, or use them but are perfectly happy\n    to control access to them from outside gitolite, you can comment out the\n    corresponding lines in the ENABLE list the rc file.    If you can't get rid of those scripts, and they are still taking too long,\n    you can make them run in the background.  They'll eventually finish but\n    the user doesn't have to wait.  See src/triggers/bg.   This should not\n    normally be needed; if you feel you need it, please talk to me so I can\n    understand why and maybe help .    If you're more concerned about your users' time when they create a new\n    wild repo (and not so much about the admin push taking time), you can fix\n    a couple of scripts and send me a patch :)  Here's the scoop:  Scripts invoked via  POST_CREATE   do  get information about what repo has\njust been created.  However, the gitweb and daemon scripts are not set to\ntake advantage of this, only the git-config one is.  So use the git-config\nscript as an example, and/or read the  triggers  page, and fix the other\ntwo programs.  (This should be easy enough for the daemon update, but the gitweb update\nmay be a little more tricky, since it may involve  deleting  lines from\nthe \"projects.list\" file.)", 
            "title": "tips for performance worriers"
        }, 
        {
            "location": "/perf/#why-theres-really-no-need-to-worry", 
            "text": "In general, gitolite has a constant overhead of about 0.2 seconds on my\nlaptop.  There really is nothing to optimise, but you can comment out some\ntriggers as the previous section said.  Here's the big-O stuff:   N = number of normal repos, each with its own set of rules.  In  repo r1\n    r2 r3 , N = 3.  Add up all such lines.  G = number of groups or repo regexes.  In  repo @g1 @g2 foo/[a-z]* , G =\n    3.  M = number of members.  In  @g1 = r1 r2  nl  @g2 = r3 r4 r5 , M = 5.  A = average number of rule lines in each \"repo\" block.  Usually about 5,\n    maybe 10 sometimes.  You may have more.   Gitolite overheads compared to a normal ssh push are:   perl startup time.  Fairly constant and fairly small.  I have generally\n    found it pretty hard to measure, especially with a hot cache.  rule parse time.  Details below  rule interpretation time.  Fairly constant, or at least subject to much\n    smaller variations than #2.   \"rule parse time\" is where it makes a difference.  There are 2 files gitolite\nparses on each \"access\":  ~/.gitolite/conf/gitolite.conf-compiled.pm  and ~/repositories/your_repo.git/gl-conf .  The former contains O(N + M + G*A)\nlines.  In addition, the gl-conf files contains about \"A\" lines (remember we\ncalled it an average), which is negligible.  In practice, you can't measure this at a scale that a developer running a \"git\npush\" might even pretend to notice, unless you have more than, say, 5000 repos\nor so.  On my testbed of 11,100 repos, where the compiled.pm is almost 0.7 MB,\nit takes less than 0.2 seconds to do this.  And on a busy system, when that file will be pretty much always in cache, it's\neven less.", 
            "title": "why there's really no need to worry!"
        }, 
        {
            "location": "/perf/#the-only-thing-that-will-take-more-time", 
            "text": "Literally, the only thing that will take time is something like \"ssh git@host\ninfo\" because it finds all possible repos and for each of them it tries to\ncheck the access.  On that same test bed, therefore, this ends up reading all\n11,100 \"gl-conf\" files.  On my laptop this takes about 14 seconds.  In contrast, a normal git operation\n(clone, pull, push, etc) is so small it is hard to measure without software.", 
            "title": "the only thing that will take more time"
        }, 
        {
            "location": "/internals/", 
            "text": "gitolite internals\n\uf0c1\n\n\nThis page is for people who may want to hack on \ncore\n gitolite itself.\nThis is \nnot\n the page for people who merely want to customise their site\n(i.e., write their own VREFs, triggers, etc.); for that please start with the\n\nnon-core\n page.\n\n\n\n\nThis document assumes you're familiar with the material in the \nhow does it\nwork\n section in the \"overview\" document, as well\nas the \nconcepts\n page.  If you're not familiar with ssh, and in particular\nhow programs like gitolite use ssh to simulate many users over one Unix user,\nthe \nssh\n page has useful info.\n\n\n\n\n\nwhat is \"core\"\n\uf0c1\n\n\nThe core code consists mainly of \nsrc/gitolite\n, \nsrc/gitolite-shell\n, and all\nthe perl modules in \nsrc/lib/Gitolite\n except \nsrc/lib/Gitolite/Triggers\n.\n\n\nThat said, there are parts of non-core that, in a default (ssh) install, are\nused frequently enough to be important (for example if you are reviewing\ngitolite):\n\n\n\n\ncommands in \nsrc/commands\n: access, git-config, info, mirror, option,\n    owns, perms\n\n\ntriggers in \nsrc/lib/Gitolite/Triggers\n: Mirroring.pm, Shell.pm\n\n\ntriggers in \nsrc/triggers\n and \nsrc/triggers/post-compile\n: ssh-authkeys,\n    ssh-authkeys-shell-users, update-git-configs, set-default-roles, \n\n\n\n\nentry points\n\uf0c1\n\n\ngitolite\n\uf0c1\n\n\nMost server-side operations that gitolite supports are invoked via the\n\ngitolite\n command.  This includes initial setup and maintenance, some\nbuilt-in commands (run 'gitolite -h' to see them), and finally the commands in\n\nsrc/commands\n (run 'gitolite help' to get a list).\n\n\ngitolite-shell\n\uf0c1\n\n\nAll remote access is via the \ngitolite-shell\n command, (invoked, of course, by\nsshd).  This includes both git operations (clone, fetch, push) as well as\ngitolite commands that have been enabled for remote invocation.\n\n\nFor git operations, gitolite-shell does the initial access check (\"is the user\neven allowed to read/write this repo at all?\") and then calls git proper.\n\n\nMost of the code in this is housekeeping; the real action happens in one of\nthe modules.\n\n\nthe Conf module\n\uf0c1\n\n\nThe \nConf\n module and its child modules deal with the gitolite.conf file.\n\n\nConf\n is where the 'compile' command lands.  The parser for the conf file is\nalso in this module; each \"recognised\" line is passed to appropriate functions\nin \nConf::Store\n.\n\n\nPlease note the parser is a very simple line-oriented parser using simple\nregexes; the DSL for the gitolite.conf file is intentionally very simple.\n\n\nConf::Explode\n\uf0c1\n\n\nThis deals with \"exploding\" the main gitolite.conf file into a single perl\nlist with all 'include' files recursively expanded.\n\n\nConf::Sugar\n\uf0c1\n\n\nThis calls \nConf::Explode\n to get the full set of conf lines, then applies a\nseries of \"syntactic sugar\" transformations to them.  This keeps the main\nparser simple, while allowing the administrator to take some shortcuts in\nwriting the rules.\n\n\nSome transformations are built-in and hardcoded, but a site can add their own\nsite-local transformations if they like.\n\n\nConf::Store\n\uf0c1\n\n\nConf::Store\n is one of the two workhorses of gitolite.  It exports functions\nrelated to processing parsed lines and storing the parsed output for later\nuse.  It also exports functions that deal with creating and setting up new\nrepos.\n\n\n\n\nThe output of the compile step is essentially a set of perl hashes in\n\nData::Dumper\n format.  Rules that apply to more than one repo (i.e., the\nrepo name was a regex pattern or a group name) go into a \"common\" output\nfile (\n~/.gitolite/conf/gitolite.conf-compiled.pm\n), while rules that\napply to specific repos go into their own files\n(\n~/repositories/$REPONAME.git/gl-conf\n).\n\n\n\n\nFrom a security perspective, dealing with 'subconf' (see \ndelegation\n\nfor details) happens in this module.\n\n\nConf::Load\n\uf0c1\n\n\nConf::Load\n is the other of the two workhorses of gitolite.\n\n\nThe most important function it exports is \naccess\n, which is used by\n\ngitolite-shell\n as well as the update hook code to check for permissions.\nThis code has a few optimisations, including very simple, localised, caching\nof parsed conf files when needed.\n\n\nTODO: How the \naccess\n function does its thing will be written up in more\ndetail as I find time, but TLDR: it calls \nrules\n which builds up a list of\nthe rules that apply.  Also see \nthis\n until I\nmanage to write it up in more detail.\n\n\nOther functions are \ngit_config\n, which returns a list of config values\nspecified in the conf file.\n\n\nFinally, this is where all the \"list-\" commands that 'gitolite -h' shows you\n(e.g., 'gitolite list-repos') land up.\n\n\nthe Rc module\n\uf0c1\n\n\nThe rc file (\n~/.gitolite.rc\n) is processed here.  In addition, it also\ndeclares a bunch of constants (like the all-important regex patterns to\nvalidate user inputs of various kinds; all ending in \n_PATT\n).\n\n\nThe only complicated part of this is how the \nnon_core_expand\n function takes\nthe \n$non_core\n variable (currently 63 lines long!) and converts it into a set\nof arrays, one for each of the \ntriggers\n types.  You can see the effect of\nthis logic by uncommenting something in the ENABLE list in the rc file, then\nrunning \ngitolite query-rc PRE_GIT\n, etc.\n\n\n(From a security point of view this is irrelevant.  Any inputs it receives\ncome from totally trusted sources -- either the gitolite source code or the rc\nfile).\n\n\nFinally, the trigger function is also exported by this module.  This is the\nfunction that actually runs all the programs tied to each trigger.\n\n\nthe Hooks module\n\uf0c1\n\n\nThis is where the code for the update hook (all repos) and the post-update\nhook (gitolite-admin repo only) can be found.\n\n\nThe post-update hook code is fairly straightforward, consisting essentially of\nthree shell commands.\n\n\nThe update hook code has a lot more \"action\", since this is where all access\nchecking for 'git push' goes.  Even that would not be much if it weren't for\nVREFs, because then it's just one call to the access function (from the\n\nConf::Load\n module).\n\n\nThe only other thing of note in this module is how the \"attempted access\" is\ndetermined.  Externally, we only know it's a \"push\" (i.e., a \"W\" in gitolite\npermission terms).  We need to compare the old and the new SHAs in various\nways to determine if it's a rewind, or a delete, or a create, etc., which may\nmake a difference to the access.\n\n\nTODO: expand on VREF handling.  For now please read \nvref\n to get the\ngeneral idea of \nwhat\n it does, while I find time to write up the \nhow\n.\n\n\nthe rest...\n\uf0c1\n\n\n...is TBD (to be done).  Briefly, the Test module is for testing, the Common\nmodule contains a whole bunch of common routines used all over -- many of them\nnot gitolite specific at all, Cache is not to be used for now (sorry,\nbitrotted by now I think... I may need to take it out behind the woodshed one\nof these days).", 
            "title": "internals"
        }, 
        {
            "location": "/internals/#gitolite-internals", 
            "text": "This page is for people who may want to hack on  core  gitolite itself.\nThis is  not  the page for people who merely want to customise their site\n(i.e., write their own VREFs, triggers, etc.); for that please start with the non-core  page.   This document assumes you're familiar with the material in the  how does it\nwork  section in the \"overview\" document, as well\nas the  concepts  page.  If you're not familiar with ssh, and in particular\nhow programs like gitolite use ssh to simulate many users over one Unix user,\nthe  ssh  page has useful info.", 
            "title": "gitolite internals"
        }, 
        {
            "location": "/internals/#what-is-core", 
            "text": "The core code consists mainly of  src/gitolite ,  src/gitolite-shell , and all\nthe perl modules in  src/lib/Gitolite  except  src/lib/Gitolite/Triggers .  That said, there are parts of non-core that, in a default (ssh) install, are\nused frequently enough to be important (for example if you are reviewing\ngitolite):   commands in  src/commands : access, git-config, info, mirror, option,\n    owns, perms  triggers in  src/lib/Gitolite/Triggers : Mirroring.pm, Shell.pm  triggers in  src/triggers  and  src/triggers/post-compile : ssh-authkeys,\n    ssh-authkeys-shell-users, update-git-configs, set-default-roles,", 
            "title": "what is \"core\""
        }, 
        {
            "location": "/internals/#entry-points", 
            "text": "", 
            "title": "entry points"
        }, 
        {
            "location": "/internals/#gitolite", 
            "text": "Most server-side operations that gitolite supports are invoked via the gitolite  command.  This includes initial setup and maintenance, some\nbuilt-in commands (run 'gitolite -h' to see them), and finally the commands in src/commands  (run 'gitolite help' to get a list).", 
            "title": "gitolite"
        }, 
        {
            "location": "/internals/#gitolite-shell", 
            "text": "All remote access is via the  gitolite-shell  command, (invoked, of course, by\nsshd).  This includes both git operations (clone, fetch, push) as well as\ngitolite commands that have been enabled for remote invocation.  For git operations, gitolite-shell does the initial access check (\"is the user\neven allowed to read/write this repo at all?\") and then calls git proper.  Most of the code in this is housekeeping; the real action happens in one of\nthe modules.", 
            "title": "gitolite-shell"
        }, 
        {
            "location": "/internals/#the-conf-module", 
            "text": "The  Conf  module and its child modules deal with the gitolite.conf file.  Conf  is where the 'compile' command lands.  The parser for the conf file is\nalso in this module; each \"recognised\" line is passed to appropriate functions\nin  Conf::Store .  Please note the parser is a very simple line-oriented parser using simple\nregexes; the DSL for the gitolite.conf file is intentionally very simple.", 
            "title": "the Conf module"
        }, 
        {
            "location": "/internals/#confexplode", 
            "text": "This deals with \"exploding\" the main gitolite.conf file into a single perl\nlist with all 'include' files recursively expanded.", 
            "title": "Conf::Explode"
        }, 
        {
            "location": "/internals/#confsugar", 
            "text": "This calls  Conf::Explode  to get the full set of conf lines, then applies a\nseries of \"syntactic sugar\" transformations to them.  This keeps the main\nparser simple, while allowing the administrator to take some shortcuts in\nwriting the rules.  Some transformations are built-in and hardcoded, but a site can add their own\nsite-local transformations if they like.", 
            "title": "Conf::Sugar"
        }, 
        {
            "location": "/internals/#confstore", 
            "text": "Conf::Store  is one of the two workhorses of gitolite.  It exports functions\nrelated to processing parsed lines and storing the parsed output for later\nuse.  It also exports functions that deal with creating and setting up new\nrepos.   The output of the compile step is essentially a set of perl hashes in Data::Dumper  format.  Rules that apply to more than one repo (i.e., the\nrepo name was a regex pattern or a group name) go into a \"common\" output\nfile ( ~/.gitolite/conf/gitolite.conf-compiled.pm ), while rules that\napply to specific repos go into their own files\n( ~/repositories/$REPONAME.git/gl-conf ).   From a security perspective, dealing with 'subconf' (see  delegation \nfor details) happens in this module.", 
            "title": "Conf::Store"
        }, 
        {
            "location": "/internals/#confload", 
            "text": "Conf::Load  is the other of the two workhorses of gitolite.  The most important function it exports is  access , which is used by gitolite-shell  as well as the update hook code to check for permissions.\nThis code has a few optimisations, including very simple, localised, caching\nof parsed conf files when needed.  TODO: How the  access  function does its thing will be written up in more\ndetail as I find time, but TLDR: it calls  rules  which builds up a list of\nthe rules that apply.  Also see  this  until I\nmanage to write it up in more detail.  Other functions are  git_config , which returns a list of config values\nspecified in the conf file.  Finally, this is where all the \"list-\" commands that 'gitolite -h' shows you\n(e.g., 'gitolite list-repos') land up.", 
            "title": "Conf::Load"
        }, 
        {
            "location": "/internals/#the-rc-module", 
            "text": "The rc file ( ~/.gitolite.rc ) is processed here.  In addition, it also\ndeclares a bunch of constants (like the all-important regex patterns to\nvalidate user inputs of various kinds; all ending in  _PATT ).  The only complicated part of this is how the  non_core_expand  function takes\nthe  $non_core  variable (currently 63 lines long!) and converts it into a set\nof arrays, one for each of the  triggers  types.  You can see the effect of\nthis logic by uncommenting something in the ENABLE list in the rc file, then\nrunning  gitolite query-rc PRE_GIT , etc.  (From a security point of view this is irrelevant.  Any inputs it receives\ncome from totally trusted sources -- either the gitolite source code or the rc\nfile).  Finally, the trigger function is also exported by this module.  This is the\nfunction that actually runs all the programs tied to each trigger.", 
            "title": "the Rc module"
        }, 
        {
            "location": "/internals/#the-hooks-module", 
            "text": "This is where the code for the update hook (all repos) and the post-update\nhook (gitolite-admin repo only) can be found.  The post-update hook code is fairly straightforward, consisting essentially of\nthree shell commands.  The update hook code has a lot more \"action\", since this is where all access\nchecking for 'git push' goes.  Even that would not be much if it weren't for\nVREFs, because then it's just one call to the access function (from the Conf::Load  module).  The only other thing of note in this module is how the \"attempted access\" is\ndetermined.  Externally, we only know it's a \"push\" (i.e., a \"W\" in gitolite\npermission terms).  We need to compare the old and the new SHAs in various\nways to determine if it's a rewind, or a delete, or a create, etc., which may\nmake a difference to the access.  TODO: expand on VREF handling.  For now please read  vref  to get the\ngeneral idea of  what  it does, while I find time to write up the  how .", 
            "title": "the Hooks module"
        }, 
        {
            "location": "/internals/#the-rest", 
            "text": "...is TBD (to be done).  Briefly, the Test module is for testing, the Common\nmodule contains a whole bunch of common routines used all over -- many of them\nnot gitolite specific at all, Cache is not to be used for now (sorry,\nbitrotted by now I think... I may need to take it out behind the woodshed one\nof these days).", 
            "title": "the rest..."
        }, 
        {
            "location": "/contrib/ssh-and-http/", 
            "text": "Making repositories available to both ssh and http mode clients\n\uf0c1\n\n\nCopyright Thomas Hager (duke at sigsegv dot at).  Licensed under CC-BY-NC-SA\nunported 3.0, \nhttp://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\nAssumptions:\n\n\n\n\nApache 2.x with CGI and Suexec support installed.\n\n\nGit and Gitolite installed with user \"git\" and group \"git\", and pubkey SSH\n    access configured and working.\n\n\nGit plumbing installed to /usr/libexec/git-core\n\n\nGitolite base located at /opt/git\n\n\nApache \nDOCUMENT_ROOT\n set to /var/www\n\n\nApache runs with user www and group www\n\n\n\n\nPlease adjust the instructions below to reflect your setup (users and paths).\n\n\nEdit your .gitolite.rc and add\n\n\n$ENV{PATH} .= \":/opt/git/bin\";\n\n\n\nat the very top (as described in \nt/smart-http.root-setup\n).\n\n\nNext, check which document root your Apache's suexec accepts:\n\n\n# suexec -V\n -D AP_DOC_ROOT=\"/var/www\"\n -D AP_GID_MIN=100\n -D AP_HTTPD_USER=\"www\"\n -D AP_LOG_EXEC=\"/var/log/apache/suexec.log\"\n -D AP_SAFE_PATH=\"/usr/local/bin:/usr/bin:/bin\"\n -D AP_UID_MIN=100\n -D AP_USERDIR_SUFFIX=\"public_html\"\n\n\n\nWe're interested in \nAP_DOC_ROOT\n, which is set to \n/var/www\n in our case.\n\n\nCreate a \nbin\n and a \ngit\n directory in \nAP_DOC_ROOT\n:\n\n\ninstall -d -m 0755 -o git -g git /var/www/bin\ninstall -d -m 0755 -o www -g www /var/www/git\n\n\n\n/var/www/git\n is just a dummy directory used as Apache's document root (see below).\n\n\nNext, create a shell script inside \n/var/www/bin\n named \ngitolite-suexec-wrapper.sh\n,\nwith mode \n0700\n and owned by user and group \ngit\n. Add the following content:\n\n\n#!/bin/bash\n#\n# Suexec wrapper for gitolite-shell\n#\n\nexport GIT_PROJECT_ROOT=\"/opt/git/repositories\"\nexport GITOLITE_HTTP_HOME=\"/opt/git\"\n\nexec ${GITOLITE_HTTP_HOME}/gitolite-source/src/gitolite-shell\n\n\n\nEdit your Apache's config to add http pull/push support, preferably in\na dedicated \nVirtualHost\n section:\n\n\nVirtualHost *:80\n\n    ServerName        git.example.com\n    ServerAlias       git\n    ServerAdmin       you@example.com\n\n    DocumentRoot /var/www/git\n    \nDirectory /var/www/git\n\n        Options       None\n        AllowOverride none\n        Order         allow,deny\n        Allow         from all\n    \n/Directory\n\n\n    SuexecUserGroup git git\n    ScriptAlias /git/ /var/www/bin/gitolite-suexec-wrapper.sh/\n    ScriptAlias /gitmob/ /var/www/bin/gitolite-suexec-wrapper.sh/\n\n    \nLocation /git\n\n        AuthType Basic\n        AuthName \"Git Access\"\n        Require valid-user\n        AuthUserFile /etc/apache/git.passwd\n    \n/Location\n\n\n/VirtualHost\n\n\n\n\nThis Apache config is just an example, you probably should adapt the authentication\nsection and use https instead of http!\n\n\nFinally, add an \nR = daemon\n access rule to all repositories you want to\nmake available via http.", 
            "title": "Using both ssh and http"
        }, 
        {
            "location": "/contrib/ssh-and-http/#making-repositories-available-to-both-ssh-and-http-mode-clients", 
            "text": "Copyright Thomas Hager (duke at sigsegv dot at).  Licensed under CC-BY-NC-SA\nunported 3.0,  http://creativecommons.org/licenses/by-nc-sa/3.0/  Assumptions:   Apache 2.x with CGI and Suexec support installed.  Git and Gitolite installed with user \"git\" and group \"git\", and pubkey SSH\n    access configured and working.  Git plumbing installed to /usr/libexec/git-core  Gitolite base located at /opt/git  Apache  DOCUMENT_ROOT  set to /var/www  Apache runs with user www and group www   Please adjust the instructions below to reflect your setup (users and paths).  Edit your .gitolite.rc and add  $ENV{PATH} .= \":/opt/git/bin\";  at the very top (as described in  t/smart-http.root-setup ).  Next, check which document root your Apache's suexec accepts:  # suexec -V\n -D AP_DOC_ROOT=\"/var/www\"\n -D AP_GID_MIN=100\n -D AP_HTTPD_USER=\"www\"\n -D AP_LOG_EXEC=\"/var/log/apache/suexec.log\"\n -D AP_SAFE_PATH=\"/usr/local/bin:/usr/bin:/bin\"\n -D AP_UID_MIN=100\n -D AP_USERDIR_SUFFIX=\"public_html\"  We're interested in  AP_DOC_ROOT , which is set to  /var/www  in our case.  Create a  bin  and a  git  directory in  AP_DOC_ROOT :  install -d -m 0755 -o git -g git /var/www/bin\ninstall -d -m 0755 -o www -g www /var/www/git  /var/www/git  is just a dummy directory used as Apache's document root (see below).  Next, create a shell script inside  /var/www/bin  named  gitolite-suexec-wrapper.sh ,\nwith mode  0700  and owned by user and group  git . Add the following content:  #!/bin/bash\n#\n# Suexec wrapper for gitolite-shell\n#\n\nexport GIT_PROJECT_ROOT=\"/opt/git/repositories\"\nexport GITOLITE_HTTP_HOME=\"/opt/git\"\n\nexec ${GITOLITE_HTTP_HOME}/gitolite-source/src/gitolite-shell  Edit your Apache's config to add http pull/push support, preferably in\na dedicated  VirtualHost  section:  VirtualHost *:80 \n    ServerName        git.example.com\n    ServerAlias       git\n    ServerAdmin       you@example.com\n\n    DocumentRoot /var/www/git\n     Directory /var/www/git \n        Options       None\n        AllowOverride none\n        Order         allow,deny\n        Allow         from all\n     /Directory \n\n    SuexecUserGroup git git\n    ScriptAlias /git/ /var/www/bin/gitolite-suexec-wrapper.sh/\n    ScriptAlias /gitmob/ /var/www/bin/gitolite-suexec-wrapper.sh/\n\n     Location /git \n        AuthType Basic\n        AuthName \"Git Access\"\n        Require valid-user\n        AuthUserFile /etc/apache/git.passwd\n     /Location  /VirtualHost   This Apache config is just an example, you probably should adapt the authentication\nsection and use https instead of http!  Finally, add an  R = daemon  access rule to all repositories you want to\nmake available via http.", 
            "title": "Making repositories available to both ssh and http mode clients"
        }, 
        {
            "location": "/contrib/putty/", 
            "text": "putty and msysgit\n\uf0c1\n\n\nCopyright: Thomas Berezansky (tsbere (at) mvlc (dot) org).  Licensed under\nCC-BY-SA unported 3.0, \nhttp://creativecommons.org/licenses/by-sa/3.0/\n\n\nThis document is intended for those who wish to use Putty/Plink with msysgit.\n\n\nIf you need more help with putty or component programs I suggest looking at \nthe official putty documentation\n.\n\n\nIf you are not already using Putty for SSH it is recommended you do \nNOT\n use it with msysgit.\n\n\nPlease note that this only covers the client side of things, and does not involve server side components to troubleshooting. For that, please see the \nssh-troubleshooting document\n.\n\n\n\n\nmsysgit setup\n\uf0c1\n\n\nProvided you have putty sessions msysgit should give you the option of specifying a location to plink. If it did not then you will need to add an environment variable named \"GIT_SSH\" to point at plink.exe, wherever you have that sitting.\n\n\nHow to do that on your version of windows will likely vary, and is not covered here. For purposes of example, on a 64 bit Windows Vista machine the GIT_SSH value could be:\n\n\nC:\\Program Files (x86)\\PuTTY\\plink.exe\n\n\n\nNote the lack of quotes.\n\n\nTesting that msysgit is properly configured can be done from the git bash shell. Simply type (case sensitive, include the quotes):\n\n\n\"$GIT_SSH\" -V\n\n\n\nYou should get a response similar to this:\n\n\nplink: Release 0.60\n\n\n\nIf instead you get a \"command not found\" type error you likely have a typo in your environment variable.\n\n\n\n\nGoing back to OpenSSH\n\uf0c1\n\n\nIf you wish to go back to OpenSSH all you need to do is delete the GIT_SSH environment variable. This will vary by your version of windows and thus is not covered here.\n\n\n\n\nPutty keys\n\uf0c1\n\n\nIf you do not already have putty private key files (.ppk) you will need to make at least one. You can either make a new one or convert an existing key to putty private key format.\n\n\nEither way, you will want to use puttygen. Note that you can go the other way if you want to stop using putty but keep the key by exporting the key to OpenSSH format.\n\n\n\n\nCreating a new key\n\uf0c1\n\n\nTo make it simple, I suggest SSH-2 RSA and a bit size of at least 1024. Larger keys will take longer to generate and will take longer to authenticate you on most systems. Making the key is as simple at hitting \"Generate\".\n\n\nIt is recommended to give the key a meaningful comment.\n\n\n\n\nImporting an existing key\n\uf0c1\n\n\nIf you already have an OpenSSH or ssh.com key you can import it using the \"Import\" option on the \"Conversions\" menu.\n\n\nIf the key does not have a meaningful comment I would suggest adding one at this point.\n\n\n\n\nLoading an existing key\n\uf0c1\n\n\nIf you need to load an existing key to edit or view it you can do so from the File menu.\n\n\n\n\nPublic key\n\uf0c1\n\n\nTo get your public key for use with gitolite, load (or generate, or import) your key into puttygen. There is a box labeled \"Public key for pasting into OpenSSH \nauthorized_keys\n file\" there. Copy the text into your preferred text editor and save.\n\n\n\n\nPutty ageant\n\uf0c1\n\n\nThough not required in all cases you may wish to use the putty ageant, pageant, to load your key(s). This will allow for your key(s) to be passphrase protected but not have to enter the passphrase when you go to use them, provided you have already loaded the key into the ageant.\n\n\n\n\nSessionless or raw hostname usage\n\uf0c1\n\n\nWhen using plink without a putty session you pretty much have to load your keys with putty ageant, if only so that plink can find them.\n\n\n\n\nPutty sessions\n\uf0c1\n\n\nIn addition to hostnames msysgit can, when using putty, use putty sessions. This works in a manner similar to definitions in OpenSSH's \nssh_config\n file. All settings in the session that apply to plink usage will be loaded, including the key file to use and even the username to connect to. Thus, instead of:\n\n\nssh://user@host.example.ext:port/repo\n\n\n\nYou can use:\n\n\nssh://session_name/repo\n\n\n\n\n\nHost key authentication\n\uf0c1\n\n\nWhether you are using hostnames or sessions you still run into one potential problem. Plink currently wants to validate the server's SSH host key before allowing you to connect, and when git calls plink there is no way to tell it yes. Thus, you may get something like this:\n\n\nThe server's host key is not cached in the registry. You\nhave no guarantee that the server is the computer you\nthink it is.\nThe server's rsa2 key fingerprint is:\nssh-rsa 2048 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00\nConnection abandoned.\nfatal: The remote end hung up unexpectedly\n\n\n\nOr, in the case of the host key changing, something like this:\n\n\nWARNING - POTENTIAL SECURITY BREACH!\nThe server's host key does not match the one PuTTY has\ncached in the registry. This means that either the\nserver administrator has changed the host key, or you\nhave actually connected to another computer pretending\nto be the server.\nThe new rsa2 key fingerprint is:\nssh-rsa 2048 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00\nConnection abandoned.\nfatal: The remote end hung up unexpectedly\n\n\n\nThe solution is to call plink directly, or start putty and connect with it first. To use plink, open the Git Bash shell and enter:\n\n\n\"$GIT_SSH\" hostname_or_session_name\n\n\n\nWhen you do you will see something like this:\n\n\nThe server's host key is not cached in the registry. You\nhave no guarantee that the server is the computer you\nthink it is.\nThe server's rsa2 key fingerprint is:\nssh-rsa 2048 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00\nIf you trust this host, enter \"y\" to add the key to\nPuTTY's cache and carry on connecting.\nIf you want to carry on connecting just once, without\nadding the key to the cache, enter \"n\".\nIf you do not trust this host, press Return to abandon the\nconnection.\nStore key in cache? (y/n)\n\n\n\nOr, in the case of a changed key, a response like this:\n\n\nWARNING - POTENTIAL SECURITY BREACH!\nThe server's host key does not match the one PuTTY has\ncached in the registry. This means that either the\nserver administrator has changed the host key, or you\nhave actually connected to another computer pretending\nto be the server.\nThe new rsa2 key fingerprint is:\nssh-rsa 2048 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00\nIf you were expecting this change and trust the new key,\nenter \"y\" to update PuTTY's cache and continue connecting.\nIf you want to carry on connecting but without updating\nthe cache, enter \"n\".\nIf you want to abandon the connection completely, press\nReturn to cancel. Pressing Return is the ONLY guaranteed\nsafe choice.\nUpdate cached key? (y/n, Return cancels connection)\n\n\n\nIn either case hit y and the key will be stored.\n\n\n\n\nDebugging multiple putty ageant keys\n\uf0c1\n\n\nIn the event you are using putty ageant with multiple keys loaded you may see the wrong key being used. In general, pageant keys are tried in the order they were loaded into the ageant. If you have descriptive comment on each of your keys you can try connecting with plink in verbose mode to see what keys are being tried. Simply open the Git bash shell and run:\n\n\n\"$GIT_SSH\" -v user@hostname\n\n\n\nOr, if using sessions with a pre-entered username:\n\n\n\"$GIT_SSH\" -v session_name\n\n\n\nIn either case, you should look for lines like:\n\n\nTrying Pageant key #0\nAuthenticating with public key \"My Key\" from agent\n\n\n\nThe first says which (numerical) key the ageant is trying. The second tells you the key comment for the authenticating key. To my knowledge the second line should only show up once, for the valid key.\n\n\n\n\nSetperms and other commands\n\uf0c1\n\n\nWhen using wildcard repos the setperms command is very important, and other commands can come in handy as well. See their documentation for how to use them, but where they use:\n\n\nssh user@host command etc etc\n\n\n\nYou will want to use:\n\n\n\"$GIT_SSH\" user@host command etc etc\n\n\n\nOtherwise everything should be identical.\n\n\n\n\nAbout this document\n\uf0c1\n\n\nThis document was written by Thomas Berezansky (tsbere (at) mvlc (dot) org) in the hopes that it would be useful to those using putty on windows and wishing to use git/gitolite with their putty keys and sessions.", 
            "title": "Putty and Msysgit"
        }, 
        {
            "location": "/contrib/putty/#putty-and-msysgit", 
            "text": "Copyright: Thomas Berezansky (tsbere (at) mvlc (dot) org).  Licensed under\nCC-BY-SA unported 3.0,  http://creativecommons.org/licenses/by-sa/3.0/  This document is intended for those who wish to use Putty/Plink with msysgit.  If you need more help with putty or component programs I suggest looking at  the official putty documentation .  If you are not already using Putty for SSH it is recommended you do  NOT  use it with msysgit.  Please note that this only covers the client side of things, and does not involve server side components to troubleshooting. For that, please see the  ssh-troubleshooting document .", 
            "title": "putty and msysgit"
        }, 
        {
            "location": "/contrib/putty/#msysgit-setup", 
            "text": "Provided you have putty sessions msysgit should give you the option of specifying a location to plink. If it did not then you will need to add an environment variable named \"GIT_SSH\" to point at plink.exe, wherever you have that sitting.  How to do that on your version of windows will likely vary, and is not covered here. For purposes of example, on a 64 bit Windows Vista machine the GIT_SSH value could be:  C:\\Program Files (x86)\\PuTTY\\plink.exe  Note the lack of quotes.  Testing that msysgit is properly configured can be done from the git bash shell. Simply type (case sensitive, include the quotes):  \"$GIT_SSH\" -V  You should get a response similar to this:  plink: Release 0.60  If instead you get a \"command not found\" type error you likely have a typo in your environment variable.", 
            "title": "msysgit setup"
        }, 
        {
            "location": "/contrib/putty/#going-back-to-openssh", 
            "text": "If you wish to go back to OpenSSH all you need to do is delete the GIT_SSH environment variable. This will vary by your version of windows and thus is not covered here.", 
            "title": "Going back to OpenSSH"
        }, 
        {
            "location": "/contrib/putty/#putty-keys", 
            "text": "If you do not already have putty private key files (.ppk) you will need to make at least one. You can either make a new one or convert an existing key to putty private key format.  Either way, you will want to use puttygen. Note that you can go the other way if you want to stop using putty but keep the key by exporting the key to OpenSSH format.", 
            "title": "Putty keys"
        }, 
        {
            "location": "/contrib/putty/#creating-a-new-key", 
            "text": "To make it simple, I suggest SSH-2 RSA and a bit size of at least 1024. Larger keys will take longer to generate and will take longer to authenticate you on most systems. Making the key is as simple at hitting \"Generate\".  It is recommended to give the key a meaningful comment.", 
            "title": "Creating a new key"
        }, 
        {
            "location": "/contrib/putty/#importing-an-existing-key", 
            "text": "If you already have an OpenSSH or ssh.com key you can import it using the \"Import\" option on the \"Conversions\" menu.  If the key does not have a meaningful comment I would suggest adding one at this point.", 
            "title": "Importing an existing key"
        }, 
        {
            "location": "/contrib/putty/#loading-an-existing-key", 
            "text": "If you need to load an existing key to edit or view it you can do so from the File menu.", 
            "title": "Loading an existing key"
        }, 
        {
            "location": "/contrib/putty/#public-key", 
            "text": "To get your public key for use with gitolite, load (or generate, or import) your key into puttygen. There is a box labeled \"Public key for pasting into OpenSSH  authorized_keys  file\" there. Copy the text into your preferred text editor and save.", 
            "title": "Public key"
        }, 
        {
            "location": "/contrib/putty/#putty-ageant", 
            "text": "Though not required in all cases you may wish to use the putty ageant, pageant, to load your key(s). This will allow for your key(s) to be passphrase protected but not have to enter the passphrase when you go to use them, provided you have already loaded the key into the ageant.", 
            "title": "Putty ageant"
        }, 
        {
            "location": "/contrib/putty/#sessionless-or-raw-hostname-usage", 
            "text": "When using plink without a putty session you pretty much have to load your keys with putty ageant, if only so that plink can find them.", 
            "title": "Sessionless or raw hostname usage"
        }, 
        {
            "location": "/contrib/putty/#putty-sessions", 
            "text": "In addition to hostnames msysgit can, when using putty, use putty sessions. This works in a manner similar to definitions in OpenSSH's  ssh_config  file. All settings in the session that apply to plink usage will be loaded, including the key file to use and even the username to connect to. Thus, instead of:  ssh://user@host.example.ext:port/repo  You can use:  ssh://session_name/repo", 
            "title": "Putty sessions"
        }, 
        {
            "location": "/contrib/putty/#host-key-authentication", 
            "text": "Whether you are using hostnames or sessions you still run into one potential problem. Plink currently wants to validate the server's SSH host key before allowing you to connect, and when git calls plink there is no way to tell it yes. Thus, you may get something like this:  The server's host key is not cached in the registry. You\nhave no guarantee that the server is the computer you\nthink it is.\nThe server's rsa2 key fingerprint is:\nssh-rsa 2048 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00\nConnection abandoned.\nfatal: The remote end hung up unexpectedly  Or, in the case of the host key changing, something like this:  WARNING - POTENTIAL SECURITY BREACH!\nThe server's host key does not match the one PuTTY has\ncached in the registry. This means that either the\nserver administrator has changed the host key, or you\nhave actually connected to another computer pretending\nto be the server.\nThe new rsa2 key fingerprint is:\nssh-rsa 2048 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00\nConnection abandoned.\nfatal: The remote end hung up unexpectedly  The solution is to call plink directly, or start putty and connect with it first. To use plink, open the Git Bash shell and enter:  \"$GIT_SSH\" hostname_or_session_name  When you do you will see something like this:  The server's host key is not cached in the registry. You\nhave no guarantee that the server is the computer you\nthink it is.\nThe server's rsa2 key fingerprint is:\nssh-rsa 2048 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00\nIf you trust this host, enter \"y\" to add the key to\nPuTTY's cache and carry on connecting.\nIf you want to carry on connecting just once, without\nadding the key to the cache, enter \"n\".\nIf you do not trust this host, press Return to abandon the\nconnection.\nStore key in cache? (y/n)  Or, in the case of a changed key, a response like this:  WARNING - POTENTIAL SECURITY BREACH!\nThe server's host key does not match the one PuTTY has\ncached in the registry. This means that either the\nserver administrator has changed the host key, or you\nhave actually connected to another computer pretending\nto be the server.\nThe new rsa2 key fingerprint is:\nssh-rsa 2048 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00\nIf you were expecting this change and trust the new key,\nenter \"y\" to update PuTTY's cache and continue connecting.\nIf you want to carry on connecting but without updating\nthe cache, enter \"n\".\nIf you want to abandon the connection completely, press\nReturn to cancel. Pressing Return is the ONLY guaranteed\nsafe choice.\nUpdate cached key? (y/n, Return cancels connection)  In either case hit y and the key will be stored.", 
            "title": "Host key authentication"
        }, 
        {
            "location": "/contrib/putty/#debugging-multiple-putty-ageant-keys", 
            "text": "In the event you are using putty ageant with multiple keys loaded you may see the wrong key being used. In general, pageant keys are tried in the order they were loaded into the ageant. If you have descriptive comment on each of your keys you can try connecting with plink in verbose mode to see what keys are being tried. Simply open the Git bash shell and run:  \"$GIT_SSH\" -v user@hostname  Or, if using sessions with a pre-entered username:  \"$GIT_SSH\" -v session_name  In either case, you should look for lines like:  Trying Pageant key #0\nAuthenticating with public key \"My Key\" from agent  The first says which (numerical) key the ageant is trying. The second tells you the key comment for the authenticating key. To my knowledge the second line should only show up once, for the valid key.", 
            "title": "Debugging multiple putty ageant keys"
        }, 
        {
            "location": "/contrib/putty/#setperms-and-other-commands", 
            "text": "When using wildcard repos the setperms command is very important, and other commands can come in handy as well. See their documentation for how to use them, but where they use:  ssh user@host command etc etc  You will want to use:  \"$GIT_SSH\" user@host command etc etc  Otherwise everything should be identical.", 
            "title": "Setperms and other commands"
        }, 
        {
            "location": "/contrib/putty/#about-this-document", 
            "text": "This document was written by Thomas Berezansky (tsbere (at) mvlc (dot) org) in the hopes that it would be useful to those using putty on windows and wishing to use git/gitolite with their putty keys and sessions.", 
            "title": "About this document"
        }, 
        {
            "location": "/contrib/sskm/", 
            "text": "changing keys -- self service key management\n\uf0c1\n\n\nCopyright: Jeff Mitchell (jmitchell@kde.org).  Licensed under CC-BY-NC-SA\nunported 3.0, \nhttp://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n[Note on v3 version: this has been manually spot-tested; there is no test suite.  Changes from v2 version are minimal so it should all work fine but please report errors!]\n\n\nFollow this guide to add keys to or remove keys from your account. Note that you cannot use this method to add your \nfirst\n key to the account; you must still email your initial key to your admin.\n\n\nThe key management is done using a command called \nsskm\n.  This command must be enabled for remote use by the admin (see \nhere\n for more on this).\n\n\n\n\nImportant!\n\uf0c1\n\n\nThere are a few things that you should know before using the key management system. Please do not ignore this section!\n\n\nKey fingerprints\n\uf0c1\n\n\nKeys are identified in some of these subcommands by their fingerprints. To see the fingerprint for a public key on your computer, use the following syntax:\n\n\nssh-keygen -l -f \npath_to_public_key.pub\n\n\n\n\nYou'll get output like:\n\n\njeff@baklava ~  $  ssh-keygen -l -f .ssh/jeffskey.pub \n2048 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44 .ssh/jeffskey.pub (RSA)\n\n\n\nActive keys\n\uf0c1\n\n\nAny keys that you can use to interact with the system are active keys. (Inactive keys are keys that are, for instance, scheduled to be added or removed.) Keys are identified with their \nkeyid\n; see the section below on listing keys.\n\n\nIf you have no current active keys, you will be locked out of the system (in which case email your admin for help). Therefore, be sure that you are never removing your only active key!\n\n\nSelecting which key to use\n\uf0c1\n\n\nAlthough you can identify yourself to the Gitolite system with any of your active keys on the server, at times it is necessary to specifically pick which key you are identifying with. To pick the key to use, pass the \n-i\n flag into \nssh\n:\n\n\njeff@baklava ~  $  ssh -i .ssh/jeffskey git@git info\nhello jeff, the gitolite version here is v2.0.1-11-g1cd3414\nthe gitolite config gives you the following access:\n @C  R   W      [a-zA-Z0-9][a-zA-Z0-9_\\-\\.]+[a-zA-Z0-9]\n....\n\n\n\nN.B.\n: If you have any keys loaded into \nssh-agent\n (i.e., \nssh-add -l\n shows\nat least one key), then this may not work properly.  \nssh\n has a bug which\nmakes it ignore \n-i\n values when that key has not been loaded into the agent.\nOne solution is to add the key you want to use (e.g., \nssh-add\n.ssh/jeffskey\n).  The other is to remove \nall\n the keys from the agent or\ndisable the agent, using one of these commands:\n\n\n\n\nTerminate \nssh-agent\n or use \nssh-add -D\n flag to remove identities from it\n\n\nIf using \nkeychain\n, run \nkeychain --clear\n to remove identities\n\n\nUnset the \nSSH_AUTH_SOCK\n and \nSSH_AGENT_PID\n variables in the current shell\n\n\n\n\nPublic vs. private keys\n\uf0c1\n\n\nIn this guide, all keys are using their full suffix. In other words, if you see a \n.pub\n at the end of a key, it's the public key; if you don't, it's the private key. For instance, when using the \n-i\n flag with \nssh\n, you are specifying private keys to use. When you are submitting a key for addition to the system, you are using the public key.\n\n\nListing your existing keys\n\uf0c1\n\n\nTo see a list of your existing keys, use the \nlist\n argument to \nsskm\n:\n\n\njeff@baklava ~  $  ssh git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub\n\n\n\nNotice the \n@\n sign in each key's name? That sign and the text after that up until the \n.pub\n is the \nkeyid\n. This is what you will use when identifying keys to the system. Above, for instance, one of my keys has the \nkeyid\n of \n@key3\n.\n\n\nA keyid may be \nempty\n; in fact to start with you may only have a single\n\njeff.pub\n key, depending on how your admin added your initial key.  You can\nuse any keyid you wish when adding keys (like \n@home\n, \n@laptop\n, ...); the\nonly rules are that it must start with the \n@\n character and after that\ncontain only digits, letters, or underscores.\n\n\nAdding or Replacing a key\n\uf0c1\n\n\nStep 1: Adding the Key\n\uf0c1\n\n\nAdding and replacing a key is the same process. What matters is the \nkeyid\n. When adding a new key, use a new \nkeyid\n; when replacing a key, pass in the \nkeyid\n of the key you want to replace, as found by using the \nlist\n subcommand. Pretty simple!\n\n\nTo add a key, pipe in the text of your new key using \ncat\n to the \nadd\n subcommand. In the example below, I explicitly select which existing, active pubkey to identify with for the command (using the \n-i\n parameter to ssh) for clarity:\n\n\njeff@baklava ~  $  cat .ssh/newkey.pub | ssh -i .ssh/jeffskey git@git sskm add @key4\nhello jeff, you are currently using a normal (\"active\") key\nplease supply the new key on STDIN.  (I recommend you\n        don't try to do this interactively, but use a pipe)\n\n\n\nIf you now run the \nlist\n command you'll see that it's scheduled for addition:\n\n\njeff@baklava ~  $  ssh -i .ssh/jeffskey git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub\n== keys marked for addition/replacement ==\n1: ff:92:a2:20:6d:42:6b:cf:20:e8:a2:4a:3b:b0:32:3a  : jeff@key4.pub\n\n\n\nStep 2: Confirming the addition\n\uf0c1\n\n\nGitolite uses Git internally to store the keys. Just like with Git, where you commit locally before \npush\n-ing up to the server, you need to confirm the key addition (see the next section if you made a mistake). We use the \nconfirm-add\n subcommand to do this, \nbut\n: to verify that you truly have ownership of the corresponding private key, you \nmust\n use the key you are adding itself to do the confirmation! (Inconvenient like most security, but very necessary from a security perspective.) This is where using the \n-i\n flag of \nssh\n comes in handy:\n\n\njeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm confirm-add @key4\nhello jeff, you are currently using a key in the 'marked for add' state\n\n\n\nListing keys again shows that all four keys are now active:\n\n\njeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub\n4: ff:92:a2:20:6d:42:6b:cf:20:e8:a2:4a:3b:b0:32:3a  : jeff@key4.pub\n\n\n\nOptional: Undoing a mistaken add (before confirmation)\n\uf0c1\n\n\nAnother advantage of Gitolite using Git internally is that that if we mistakenly add the wrong key, we can undo it before it's confirmed by passing in the \nkeyid\n we want to remove into the \nundo-add\n subcommand:\n\n\njeff@baklava ~  $  ssh -i .ssh/jeffskey git@git sskm undo-add @key4\nhello jeff, you are currently using a normal (\"active\") key\n\n\n\nListing the keys shows that that new key has been removed:\n\n\njeff@baklava ~  $  ssh -i .ssh/jeffskey git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub\n\n\n\nRemoving a key\n\uf0c1\n\n\nStep 1: Mark the key for deletion\n\uf0c1\n\n\nDeleting a key works very similarly to adding a key, with \ndel\n substituted for \nadd\n.\n\n\nLet's say that I have my four keys from the example above:\n\n\njeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub\n4: ff:92:a2:20:6d:42:6b:cf:20:e8:a2:4a:3b:b0:32:3a  : jeff@key4.pub\n\n\n\nI would like to remove the key that on my box is called \nnewkey\n and in the Gitolite system is known as \n@key4\n.\n\n\nI simply pass in the identifier to the \ndel\n subcommand of \nsskm\n:\n\n\njeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm del @key4\nhello jeff, you are currently using a normal (\"active\") key\n\n\n\nListing the keys now shows that it is marked for deletion:\n\n\njeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm list\nhello jeff, you are currently using a key in the 'marked for del' state\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub\n== keys marked for deletion ==\n1: ff:92:a2:20:6d:42:6b:cf:20:e8:a2:4a:3b:b0:32:3a  : jeff@key4.pub\n\n\n\nStep 2: Confirming the deletion\n\uf0c1\n\n\nJust like with Git, where you commit locally before \npush\n-ing up to the server, you need to confirm the key addition (see the next section if you made a mistake). We use the \nconfirm-del\n subcommand to do this, \nbut\n: unlike the \nconfirm-add\n subcommand, you \nmust\n use a \ndifferent\n key than the key you are deleting to do the confirmation! This prevents you from accidentally locking yourself out of the system by removing all active keys:\n\n\njeff@baklava ~  $  ssh -i .ssh/jeffskey git@git sskm confirm-del @key4\nhello jeff, you are currently using a normal (\"active\") key\n\n\n\nListing keys again shows that the fourth key has been removed:\n\n\njeff@baklava ~  $  ssh -i .ssh/jeffskey git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub\n\n\n\nOptional: Undoing a mistaken delete (before confirmation)\n\uf0c1\n\n\nAnother advantage of Gitolite using Git internally is that that if we mistakenly delete the wrong key, we can undo it before it's confirmed by passing in the \nkeyid\n we want to keep into the \nundo-del\n subcommand. Note that this operation \nmust\n be performed using the private key that corresponds to the key you are trying to keep! (Security reasons, similar to the reason that you must confirm an addition this way; it prevents anyone from undoing a deletion, and therefore keeping in the system, a key that they cannot prove (by having the corresponding private key) should stay in the system):\n\n\njeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm undo-del @key4\nhello jeff, you are currently using a key in the 'marked for del' state\n\nYou're undeleting a key that is currently marked for deletion.\n    Hit ENTER to undelete this key\n    Hit Ctrl-C to cancel the undelete\nPlease see documentation for caveats on the undelete process as well as how to\nactually delete it.\n\n\n\n(Go ahead and hit ENTER there; the caveats are really only on the administrative side of things.)\n\n\nListing the keys shows that that new key is now marked active again:\n\n\njeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub\n4: ff:92:a2:20:6d:42:6b:cf:20:e8:a2:4a:3b:b0:32:3a  : jeff@key4.pub\n\n\n\n\n\nimportant notes for the admin\n\uf0c1\n\n\nThese are the things that can break if you allow your users to use this\ncommand:\n\n\n\n\n\n\n\"sskm\" clones, changes, and pushes back the gitolite-admin repo.  This\n    means, even if you're the only administrator, you should never 'git push\n    -f', in case you end up overwriting something sskm did.\n\n\n\n\n\n\nThere is no way to distinguish \nfoo/alice.pub\n from \nbar/alice.pub\n using\n    this command.  You can distinguish \nfoo/alice.pub\n from\n    \nbar/alice@home.pub\n, but that's not because of the foo and bar, it's\n    because the two files have different keyids.\n\n\nIn other words, sskm only works with the older style, not with the\n\"subdirectory\" style of \nmulti-key\n management.\n\n\n\n\n\n\nKeys placed in specific folders (for whatever reasons), will probably not\n    stay in those folders if this command is used.  Even a key delete, followed\n    by undoing the delete, will cause the key to effectively move to the root\n    of the key store (i.e., the \nkeydir\n directory in the gitolite-admin repo).", 
            "title": "Self-service key management"
        }, 
        {
            "location": "/contrib/sskm/#changing-keys-self-service-key-management", 
            "text": "Copyright: Jeff Mitchell (jmitchell@kde.org).  Licensed under CC-BY-NC-SA\nunported 3.0,  http://creativecommons.org/licenses/by-nc-sa/3.0/  [Note on v3 version: this has been manually spot-tested; there is no test suite.  Changes from v2 version are minimal so it should all work fine but please report errors!]  Follow this guide to add keys to or remove keys from your account. Note that you cannot use this method to add your  first  key to the account; you must still email your initial key to your admin.  The key management is done using a command called  sskm .  This command must be enabled for remote use by the admin (see  here  for more on this).", 
            "title": "changing keys -- self service key management"
        }, 
        {
            "location": "/contrib/sskm/#important", 
            "text": "There are a few things that you should know before using the key management system. Please do not ignore this section!", 
            "title": "Important!"
        }, 
        {
            "location": "/contrib/sskm/#key-fingerprints", 
            "text": "Keys are identified in some of these subcommands by their fingerprints. To see the fingerprint for a public key on your computer, use the following syntax:  ssh-keygen -l -f  path_to_public_key.pub   You'll get output like:  jeff@baklava ~  $  ssh-keygen -l -f .ssh/jeffskey.pub \n2048 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44 .ssh/jeffskey.pub (RSA)", 
            "title": "Key fingerprints"
        }, 
        {
            "location": "/contrib/sskm/#active-keys", 
            "text": "Any keys that you can use to interact with the system are active keys. (Inactive keys are keys that are, for instance, scheduled to be added or removed.) Keys are identified with their  keyid ; see the section below on listing keys.  If you have no current active keys, you will be locked out of the system (in which case email your admin for help). Therefore, be sure that you are never removing your only active key!", 
            "title": "Active keys"
        }, 
        {
            "location": "/contrib/sskm/#selecting-which-key-to-use", 
            "text": "Although you can identify yourself to the Gitolite system with any of your active keys on the server, at times it is necessary to specifically pick which key you are identifying with. To pick the key to use, pass the  -i  flag into  ssh :  jeff@baklava ~  $  ssh -i .ssh/jeffskey git@git info\nhello jeff, the gitolite version here is v2.0.1-11-g1cd3414\nthe gitolite config gives you the following access:\n @C  R   W      [a-zA-Z0-9][a-zA-Z0-9_\\-\\.]+[a-zA-Z0-9]\n....  N.B. : If you have any keys loaded into  ssh-agent  (i.e.,  ssh-add -l  shows\nat least one key), then this may not work properly.   ssh  has a bug which\nmakes it ignore  -i  values when that key has not been loaded into the agent.\nOne solution is to add the key you want to use (e.g.,  ssh-add\n.ssh/jeffskey ).  The other is to remove  all  the keys from the agent or\ndisable the agent, using one of these commands:   Terminate  ssh-agent  or use  ssh-add -D  flag to remove identities from it  If using  keychain , run  keychain --clear  to remove identities  Unset the  SSH_AUTH_SOCK  and  SSH_AGENT_PID  variables in the current shell", 
            "title": "Selecting which key to use"
        }, 
        {
            "location": "/contrib/sskm/#public-vs-private-keys", 
            "text": "In this guide, all keys are using their full suffix. In other words, if you see a  .pub  at the end of a key, it's the public key; if you don't, it's the private key. For instance, when using the  -i  flag with  ssh , you are specifying private keys to use. When you are submitting a key for addition to the system, you are using the public key.", 
            "title": "Public vs. private keys"
        }, 
        {
            "location": "/contrib/sskm/#listing-your-existing-keys", 
            "text": "To see a list of your existing keys, use the  list  argument to  sskm :  jeff@baklava ~  $  ssh git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub  Notice the  @  sign in each key's name? That sign and the text after that up until the  .pub  is the  keyid . This is what you will use when identifying keys to the system. Above, for instance, one of my keys has the  keyid  of  @key3 .  A keyid may be  empty ; in fact to start with you may only have a single jeff.pub  key, depending on how your admin added your initial key.  You can\nuse any keyid you wish when adding keys (like  @home ,  @laptop , ...); the\nonly rules are that it must start with the  @  character and after that\ncontain only digits, letters, or underscores.", 
            "title": "Listing your existing keys"
        }, 
        {
            "location": "/contrib/sskm/#adding-or-replacing-a-key", 
            "text": "", 
            "title": "Adding or Replacing a key"
        }, 
        {
            "location": "/contrib/sskm/#step-1-adding-the-key", 
            "text": "Adding and replacing a key is the same process. What matters is the  keyid . When adding a new key, use a new  keyid ; when replacing a key, pass in the  keyid  of the key you want to replace, as found by using the  list  subcommand. Pretty simple!  To add a key, pipe in the text of your new key using  cat  to the  add  subcommand. In the example below, I explicitly select which existing, active pubkey to identify with for the command (using the  -i  parameter to ssh) for clarity:  jeff@baklava ~  $  cat .ssh/newkey.pub | ssh -i .ssh/jeffskey git@git sskm add @key4\nhello jeff, you are currently using a normal (\"active\") key\nplease supply the new key on STDIN.  (I recommend you\n        don't try to do this interactively, but use a pipe)  If you now run the  list  command you'll see that it's scheduled for addition:  jeff@baklava ~  $  ssh -i .ssh/jeffskey git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub\n== keys marked for addition/replacement ==\n1: ff:92:a2:20:6d:42:6b:cf:20:e8:a2:4a:3b:b0:32:3a  : jeff@key4.pub", 
            "title": "Step 1: Adding the Key"
        }, 
        {
            "location": "/contrib/sskm/#step-2-confirming-the-addition", 
            "text": "Gitolite uses Git internally to store the keys. Just like with Git, where you commit locally before  push -ing up to the server, you need to confirm the key addition (see the next section if you made a mistake). We use the  confirm-add  subcommand to do this,  but : to verify that you truly have ownership of the corresponding private key, you  must  use the key you are adding itself to do the confirmation! (Inconvenient like most security, but very necessary from a security perspective.) This is where using the  -i  flag of  ssh  comes in handy:  jeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm confirm-add @key4\nhello jeff, you are currently using a key in the 'marked for add' state  Listing keys again shows that all four keys are now active:  jeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub\n4: ff:92:a2:20:6d:42:6b:cf:20:e8:a2:4a:3b:b0:32:3a  : jeff@key4.pub", 
            "title": "Step 2: Confirming the addition"
        }, 
        {
            "location": "/contrib/sskm/#optional-undoing-a-mistaken-add-before-confirmation", 
            "text": "Another advantage of Gitolite using Git internally is that that if we mistakenly add the wrong key, we can undo it before it's confirmed by passing in the  keyid  we want to remove into the  undo-add  subcommand:  jeff@baklava ~  $  ssh -i .ssh/jeffskey git@git sskm undo-add @key4\nhello jeff, you are currently using a normal (\"active\") key  Listing the keys shows that that new key has been removed:  jeff@baklava ~  $  ssh -i .ssh/jeffskey git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub", 
            "title": "Optional: Undoing a mistaken add (before confirmation)"
        }, 
        {
            "location": "/contrib/sskm/#removing-a-key", 
            "text": "", 
            "title": "Removing a key"
        }, 
        {
            "location": "/contrib/sskm/#step-1-mark-the-key-for-deletion", 
            "text": "Deleting a key works very similarly to adding a key, with  del  substituted for  add .  Let's say that I have my four keys from the example above:  jeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub\n4: ff:92:a2:20:6d:42:6b:cf:20:e8:a2:4a:3b:b0:32:3a  : jeff@key4.pub  I would like to remove the key that on my box is called  newkey  and in the Gitolite system is known as  @key4 .  I simply pass in the identifier to the  del  subcommand of  sskm :  jeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm del @key4\nhello jeff, you are currently using a normal (\"active\") key  Listing the keys now shows that it is marked for deletion:  jeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm list\nhello jeff, you are currently using a key in the 'marked for del' state\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub\n== keys marked for deletion ==\n1: ff:92:a2:20:6d:42:6b:cf:20:e8:a2:4a:3b:b0:32:3a  : jeff@key4.pub", 
            "title": "Step 1: Mark the key for deletion"
        }, 
        {
            "location": "/contrib/sskm/#step-2-confirming-the-deletion", 
            "text": "Just like with Git, where you commit locally before  push -ing up to the server, you need to confirm the key addition (see the next section if you made a mistake). We use the  confirm-del  subcommand to do this,  but : unlike the  confirm-add  subcommand, you  must  use a  different  key than the key you are deleting to do the confirmation! This prevents you from accidentally locking yourself out of the system by removing all active keys:  jeff@baklava ~  $  ssh -i .ssh/jeffskey git@git sskm confirm-del @key4\nhello jeff, you are currently using a normal (\"active\") key  Listing keys again shows that the fourth key has been removed:  jeff@baklava ~  $  ssh -i .ssh/jeffskey git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub", 
            "title": "Step 2: Confirming the deletion"
        }, 
        {
            "location": "/contrib/sskm/#optional-undoing-a-mistaken-delete-before-confirmation", 
            "text": "Another advantage of Gitolite using Git internally is that that if we mistakenly delete the wrong key, we can undo it before it's confirmed by passing in the  keyid  we want to keep into the  undo-del  subcommand. Note that this operation  must  be performed using the private key that corresponds to the key you are trying to keep! (Security reasons, similar to the reason that you must confirm an addition this way; it prevents anyone from undoing a deletion, and therefore keeping in the system, a key that they cannot prove (by having the corresponding private key) should stay in the system):  jeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm undo-del @key4\nhello jeff, you are currently using a key in the 'marked for del' state\n\nYou're undeleting a key that is currently marked for deletion.\n    Hit ENTER to undelete this key\n    Hit Ctrl-C to cancel the undelete\nPlease see documentation for caveats on the undelete process as well as how to\nactually delete it.  (Go ahead and hit ENTER there; the caveats are really only on the administrative side of things.)  Listing the keys shows that that new key is now marked active again:  jeff@baklava ~  $  ssh -i .ssh/newkey git@git sskm list\nhello jeff, you are currently using a normal (\"active\") key\nyou have the following keys:\n== active keys ==\n1: 72:ef:a3:e0:f5:06:f8:aa:6f:a2:88:9d:50:86:25:4e  : jeff@key1.pub\n2: 61:38:a7:9f:ba:cb:99:81:4f:49:2c:8b:c8:63:8e:33  : jeff@key2.pub\n3: 2d:78:d4:2c:b1:6d:9a:dc:d9:0d:94:3c:d8:c2:65:44  : jeff@key3.pub\n4: ff:92:a2:20:6d:42:6b:cf:20:e8:a2:4a:3b:b0:32:3a  : jeff@key4.pub", 
            "title": "Optional: Undoing a mistaken delete (before confirmation)"
        }, 
        {
            "location": "/contrib/sskm/#important-notes-for-the-admin", 
            "text": "These are the things that can break if you allow your users to use this\ncommand:    \"sskm\" clones, changes, and pushes back the gitolite-admin repo.  This\n    means, even if you're the only administrator, you should never 'git push\n    -f', in case you end up overwriting something sskm did.    There is no way to distinguish  foo/alice.pub  from  bar/alice.pub  using\n    this command.  You can distinguish  foo/alice.pub  from\n     bar/alice@home.pub , but that's not because of the foo and bar, it's\n    because the two files have different keyids.  In other words, sskm only works with the older style, not with the\n\"subdirectory\" style of  multi-key  management.    Keys placed in specific folders (for whatever reasons), will probably not\n    stay in those folders if this command is used.  Even a key delete, followed\n    by undoing the delete, will cause the key to effectively move to the root\n    of the key store (i.e., the  keydir  directory in the gitolite-admin repo).", 
            "title": "important notes for the admin"
        }, 
        {
            "location": "/contrib/ukm/", 
            "text": "user key management\n\uf0c1\n\n\nCopyright 2012-2013  Ralf Hemmecke \n.\n\n\nLicensed under the \nCreative Commons\nAttribution-NonCommercial-ShareAlike 3.0 Unported\nLicense\n\n\nUser key management allows certain users to add and remove keys.\n\n\nThe key management is done using a command called \nukm\n. This command\nmust be enabled for remote use by both the \nsysadmin\n and the\n\ngitolite-admin\n (see \nhere\n for more on this) or look\nbelow.\n\n\n\n\nImportant Warning!\n\uf0c1\n\n\nUser key management undermines the fundamental principle of gitolite\n(see \nauthentication versus authorisation\n) by allowing certain\nusers to juggle with ssh public keys. Make sure someone (sysadmin?)\ncan login to the server with a \npassword\n, just in case something\nbreaks and the \n.ssh/authorized_keys\n file for the user running\ngitolite on the server is messed up.\n\n\nGeneral note\n\uf0c1\n\n\nAlthough gitolite deals in its core only with authorisation, by\ndefault it uses ssh as its authentication mechanism. Sure, ssh is\nnot at all part of gitolite and it can be replaced by other means, but\nstill there is a directory \ngitolite-admin/keydir\n that is reserved\nfor public ssh keys.\n\n\nIn fact, management of \nusers\n and \nmultiple keys\n per\nuser is not actually a gitolite administration stuff. It's external to\ngitolite. In a future version, \nukm\n could be used as an equivalent of\nthe \nkeydir/\n directory from the \ngitolite-admin\n repo (currently it\njust manages that directory) and thus \nukm\n could be seen as such an\nexternal tool that does what its name suggests: user (key) management.\n\n\nIn the following description we assume that there is an entry like\n\n\nHost gitserver\n     IdentityFile ~/.ssh/id_rsa    # choose your gitolite key here\n     HostName gitolite.example.org # location where gitolite is installed\n     User git                      # user that runs gitolite\n\n\n\nin the client's \n~/.ssh/config\n file.\n\n\nWho might be interested?\n\uf0c1\n\n\nThe gitolite admin\n\uf0c1\n\n\nAdding a new public key to the system means to copy the key into\n\ngitolite/keydir\n commit and push.\n\n\nWith \nukm\n it would be\n\n\ncat FOO.PUB | ssh gitserver ukm add KEYID\n\n\n\nThis would be a setup where only the \ngitolite administrator\n\nuses \nukm\n. Not a big benefit, but \nukm\n prevents adding identical\nkeys under different userids. This consistency check might be an\nadvantage. Furthermore, \nukm\n does not allow the\n\ngitolite administrator\n to remove his/her last, i.e., it\nprevents the administrator from locking him-/herself out of the\nsystem. (Note, we assume that the \ngitolite administrator\n has no\nshell access to the server; only the \nsysadmin\n has shell\naccess.)\n\n\nUsers that want more control over who can access their repositories\n\uf0c1\n\n\nSuppose the \ngitolite administrator\n of a research institute has\nset up gitolite to provide \nwild repositories\n for example with\na \ngitolite.conf\n like this.\n\n\nrepo gitolite-admin\n    RW+ = gitadmin\n\n# These people are allowed to create wild repositories.\n@creators = alice bob ...\n\n# wildcard repositories for the users\nrepo CREATOR/..*\n    C   = @creators\n    RW+ = CREATOR\n    RW  = WRITERS\n    R   = READERS\n\n\n\nResearchers Alice and Bob want to write an article together. Alice\ncreates a wild repository \nalice/article\n and adds Bob via the\n\nperms\n command to the WRITERS of her repository. After a while they\nrealize that Otto from another institute would be a reasonable third\nauthor. However, if they cannot give him write access to the\nrepository, they would have to exchange the article via email. Back to\nthe stone age? Better, Alice asks Otto to send her his public ssh key.\nAlice then forwards that key to the \ngitolite administrator\n and\nasks him to include that key into the system. (Hopefully, all that\ndidn't happen on a holiday or on the weekend.) After 3 days the\ngitolite administrater finds some time. Since he doesn't know Otto, he\nsimply trusts Alice and adds the public key into the system.\n\n\nWith \nukm\n Alice can save bothering the gitolite administrator and is\nperhaps even faster in saying:\n\n\ncat otto.pub | ssh gitserver ukm add otto@other.institute.edu\nssh gitserver perms alice/article + WRITERS otto@other.institute.edu\n\n\n\nThe effect would be the same.\n\n\nUsers that want to manage multiple keys\n\uf0c1\n\n\nSuppose, you have different computers and a different ssh key for each\nof them. You would like to tell gitolite that all these different keys\nbelong to just one gitolite identity.\n\n\nYour \ngitolite administrator\n creates your gitolite identity with\none of your keys as your initial key. This key can only be managed by\nthe gitolite administrator, not by you. It basically determines under\nwhich name you are known to gitolite.\n\n\nYou can add new keys to this identity and remove them at your will.\n\n\nHow to enable user key management?\n\uf0c1\n\n\nThe \nukm\n command is contributed code and lives under\n\ncontrib/commands/ukm\n in the gitolite source tree.\nA \nsysadmin\n of the gitserver has to copy or link this\nscript to the right location.\n\n\ncd src/commands\nln -s ../../contrib/commands/ukm .\n\n\n\nFurthermore, a \nsysadmin\n must add the string \n'ukm'\n to\nthe \nENABLE\n array, i.e.,\n\n\nENABLE =\n [ ..., 'ukm', ... ],\n\n\n\nin \n.gitolite.rc\n. (That's the preferred way for gitolite starting\nwith version v3.4.)\n\n\nInstead of the above (in particular in gitolite v3.0-v3.3), add\n\n'ukm' =\n 1\n to the \nCOMMANDS\n hash.\n\n\nCOMMANDS =\n {..., 'ukm' =\n 1, ... },\n\n\n\nHow to configure user key management and who can use it?\n\uf0c1\n\n\nAs described above there are three main use cases for \nukm\n. Each of\nthem requires different values in the respective config files.\n\n\nThere are two files where \nukm\n must be configured.\n\n\n\n\n.gitolite.rc\n (managed by a \nsysadmin\n of the gitserver)\n\n\ngitolite-admin/conf/gitolite.conf\n (managed by a\n    \ngitolite administrator\n)\n\n\n\n\nBesides \nsysadmin\n and \ngitolite administrator\n, \nukm\n\nknows 3 roles.\n\n\n\n\nsuper key manager\n\n\nguest key manager\n\n\nself key manager\n\n\n\n\nSuper key managers\n\uf0c1\n\n\nWhen \nukm\n is enabled, nothing else must be configured.\n\n\nGuest key managers\n\uf0c1\n\n\nThe \ngitolite administrator\n defines guest key managers by\ncreating a group \n@guest-key-managers\n in\n\ngitolite-admin/conf/gitolite.conf\n and adding (trusted) users to this\ngroup.\n\n\nWARNING\n: If the gitolite administrator includes \n@all\n into this\nlist, it allows guests to add new public keys. If, additionally, there\nis \n@creators=@all\n, it basically allows the initial guest key\nmanagers to start a hierarchy of new users with the same rights as the\ninitial users.\n\n\nThe \nsystem administrator\n must configure \nukm\n for\n\nguest key managers\n in \n.gitolite.rc\n by adding something\nlike\n\n\nUKM_CONFIG =\n { FORBIDDEN_GUEST_PATTERN =\n qr(FORBIDDEN-PATTERN), },\n\n\n\nto the \n%RC\n hash.\n\n\nIf \nFORBIDDEN_GUEST_PATTERN\n is missing, it defaults to the following.\n\n\nFORBIDDEN_GUEST_PATTERN =\n qr(.)\n\n\n\nAny \nKEYID\n that matches this pattern is rejected, i.e., the\ndefault value basically allows only the \nsuper key managers\n to\nadd/del keys.\n\n\nIf \nukm\n is supposed to work for \nguest key managers\n,\n\nFORBIDDEN_GUEST_PATTERN\n must be set to some reasonable value.\n\n\nIf your company has email addresses of the form\n\nfirst.last@company.com\n you might want to write something like this\n\n\nUKM_CONFIG =\n { FORBIDDEN_GUEST_PATTERN =\n qr(@company.com$) },\n\n\n\nwhich would only allow \nKEYIDs\n in the form of email addresses\nthat do not come from your company.\n\n\nFor the very brave only!!!\n\n\nThe variable \nREQUIRED_GUEST_PATTERN\n is optional. It is strongly\ndiscouraged to set it. However, if you know, what you are doing, it\nallows for a bit more flexibility.\n\n\nDon't complain if you modify the default\nvalue!!!\n\n\nREQUIRED_GUEST_PATTERN\n defaults to a regular expression that only\nallows \nKEYIDs\n in the form of email addresses (see the source\ncode if you want to see this regular expression).\n\n\nYou can write\n\n\nUKM_CONFIG =\n {\n    REQUIRED_GUEST_PATTERN  =\n qr(REQUIRED-PATTERN),\n    FORBIDDEN_GUEST_PATTERN =\n qr(FORBIDDEN-PATTERN),\n},\n\n\n\nwith the meaning that the \nKEYID\n \nmust match\n\n\nqr(^(REQUIRED-PATTERN)$)\n\n\n\n(note that \n^\n and \n$\n are automatically added to the pattern) and\n\nmust not match\n\n\nqr(FORBIDDEN-PATTERN)\n\n\n\nin order for \nukm\n to proceed with this \nKEYID\n for a\n\nguest key manager\n.\n\n\nGitolite's namespace for \nUSERIDs\n is flat. The\n\nREQUIRED_GUEST_PATTERN\n and \nFORBIDDEN_GUEST_PATTERN\n serve two\npurposes.\n\n\n\n\n\n\nRestrict permissions for what \nguest key managers\n can\n     do.\n\n\n\n\n\n\nPatterns that cannot be used for guests can still be used by\n     \nsuper key managers\n. In other words, those patterns are\n     reserved for in-house \nUSERIDs\n.\n\n\n\n\n\n\nSelf key managers\n\uf0c1\n\n\nThe \ngitolite administrator\n defines \nself key managers\n by\ncreating a group \n@self-key-managers\n in\n\ngitolite-admin/conf/gitolite.conf\n and adding (trusted) users to this\ngroup.\n\n\nWARNING\n: A \ngitolite administrator\n shouldn't include \n@all\n\ninto this list. If guest key management is enabled, then also guests\nwould be allowed to add their own keys. Since\n\nguest key managers\n would have no access to those keys, only\n\ngitolite administrators\n would be able to remove those\nadditional keys. In fact, \nukm\n was designed to allow only \none\n key\nper guest. Don't complain, if you enable a setup where guests can have\nmultiple keys. It's a security issue. (Suppose Alice has added a guest\n\nfoo@example.org\n and MrBad generates a new ssh key and adds it under\n\nfoo@example.org@attacker\n to the list of his guests. That would give\nMrBad all the permissions that \nfoo@example.org\n has.)\n\n\nThe \nsystem administrator\n must enable \nukm\n for\n\nself key managers\n in \n.gitolite.rc\n by adding\n\n\nUKM_CONGFIG =\n { SELFKEY_MANAGEMENT =\n 1, },\n\n\n\nto the \n%RC\n hash.\n\n\nSince by design self keys start with an \n@\n sign, and thus cannot\nconflict with guest keys (which are not allowed to start with an \n@\n),\nthere is no problem to enable self key and guest key management at the\nsame time.\n\n\nUKM_CONFIG =\n {\n    FORBIDDEN_GUEST_PATTERN =\n qr(FORBIDDEN-PATTERN),\n    SELFKEY_MANAGEMENT =\n 1,\n},\n\n\n\nHow to use user key management? {#how-to-use-user-key-management}\n\uf0c1\n\n\nThere are three subcommands of \nukm\n, namely \nlist\n (the default),\nadd\n, and \ndel\n.\n\n\nDepending on whether or not the respective \nKEYID\n starts with\nan \n@\n sign, \nukm\n distinguishes between guest and self key management.\nSelf keys start with \n@\n and are followed by letters and/or digits.\n\n\nFor \nsuper key managers\n there is not such a distinction.\nRather, the \nKEYID\n is the full path of the actual public key\nfile relative to \ngitolite-admin/keydir/\n with the \n.pub\n file\nextension removed.\n\n\nBy convention, take as guest key the proper email address of the\nguest. That not only makes for a unique ID, it also gives you a hint\nto whom this key belongs.\n\n\nList managed keys\n\uf0c1\n\n\nA \nguest key manager\n and \nself key manager\n can list all\ntheir personally managed keys via:\n\n\nssh gitserver ukm\n\n\n\nor\n\n\nssh gitserver ukm list\n\n\n\nIf this command is issued by a \nsuper key manager\n, it lists all\nkeys that are stored under \nkeydir/\n.\n\n\nThe result will show the fingerprints of the keys, the corresponding\n\nUSERID\n and the \nKEYID\n by which one can refer to\nthe key on the commandline.\n\n\nAdd a new public key\n\uf0c1\n\n\nAdd a new key as a super key manager\n\uf0c1\n\n\nA \nsuper key manager\n can nearly add any key, but \nukm\n does not\naccept a different key, i.e., different fingerprint, for the same\n\nKEYID\n. Also a double dot is not allowed in the\n\nKEYID\n.\n\n\nAdd a new key as a guest key manager\n\uf0c1\n\n\nThe command for this is:\n\n\ncat foo.pub | ssh gitserver ukm add foo@example.com\n\n\n\nThere are several situations when the above command fails, i.e.,\nrejects to add the key.\n\n\n\n\n\n\nThe \nKEYID\n \nfoo@example.com\n does not match the pattern\n    given by \nREQUIRED_GUEST_PATTERN\n in \n.gitolite.rc\n.\n\n\n\n\n\n\nThe \nKEYID\n \nfoo@example.com\n matches the pattern given by\n    \nFORBIDDEN_GUEST_PATTERN\n in \n.gitolite.rc\n.\n\n\n\n\n\n\nThe public key \nfoo.pub\n is already known to the system and does\n    not belong to the \nUSERID\n \nfoo@example.com\n.\n\n\n\n\n\n\nThe \nKEYID\n \nfoo@example.com\n is already in use and it\n    corresponds to a key with another public key. In other words,\n    \nukm\n will not simply override a key. One has to delete the old\n    key first and then add a new one.\n\n\n\n\n\n\nThe \nKEYID\n contains a \n/\n character or two \n@\n\n    characters, i.e., guest key managers are not allowed to add\n    \nmultiple keys\n for one user.\n\n\n\n\n\n\nAdd a new key as a self key manager\n\uf0c1\n\n\nAdding a self key is a bit more complicated, since the user must\nconfirm that he/she is in possession of the corresponding private key.\nThe command sequence is as follows. Note that the second call of ssh\nis done with the key \nfoo\n and not the default ssh key.\n\n\ncat foo.pub | ssh gitserver ukm add @two \n session\ncat session | ssh -i foo gitserver ukm\n\n\n\nIf you don't want to create an intermediate file call it like this:\n\n\ncat foo.pub | ssh gitserver ukm add @two | (sleep 2; ssh -i foo gitserver ukm)\n\n\n\nMake sure that the second ssh call only happens after the fist one has\ndone its job. Otherwise you might be asked for a password of the \ngit\n\nuser on the \ngitserver\n.\n\n\nAfter successfully completing the first ssh call, the new key is\nscheduled for addition and a session key is returned on stdin. That\nsession key must be used to confirm the addition of the new public key\nas shown above.\n\n\nDelete a key\n\uf0c1\n\n\nA \nsuper key manager\n can delete any key by simply giving its\n\nKEYID\n in a command like this\n\n\nssh gitserver ukm del some/dir/foo@example.com\n\n\n\nThe \nukm\n command, however, prevents a \nsuper key manager\n from\nremoving his/her last key.\n\n\nDelete a guest key\n\uf0c1\n\n\nThe command for this is:\n\n\nssh gitserver ukm del foo@example.com\n\n\n\nIf the given \nKEYID\n is not among the managed keys of the user\nwho issues the \ndel\n command, the command will fail.\n\n\nIMPORTANT!\n You should not forget to remove from all of your\nrepositories all the permissions you gave to \nfoo@example.com\n,\nbecause this key might still be managed by another\n\nguest key manager\n.\n\n\nYou might want to run\n\n\nssh gitserver info -lc \\\n| perl -e 'chomp($u=\n);$u=~s/hello //;$u=~s/,.*$//;' \\\n       -e 'while(\n){if(/\\s(\\S+)\\s+$u$/){print \"$1\\n\"}}' \\\n| while read r; do ssh gitserver perms $r - WRITERS foo@example.com; done\n\n\n\nRepeat this for other roles such as \nREADERS\n instead of \nWRITERS\n.\n\n\nDelete a self key\n\uf0c1\n\n\nThe command for this is:\n\n\nssh gitserver ukm del @two\nssh gitserver ukm del @two\n\n\n\nYes, you have to give that command twice. The first call will bring\nthe key \n@two\n into a \"pending-del\" state. The second time, the\ncommand will only delete the key \n@two\n, if the login was \nnot\n done\nwith exactly that key. If logging in with the key corresponding to\n\n@two\n, it will bring back the \n@two\n key from its \"pending-del\" state\nto a non-pending state.\n\n\nNote:\n This safety net is not absolutely necessary, since a\n\nself key manager\n is not allowed to delete his/her initial key\n(added by the \ngitolite administrator\n). The command \nukm\n wants\nto make sure that the user still has a key that can be used for\nlogin. (Think about having lost the passphrase for the initial key. --\nMaybe this over complication will be simplified in the future. Losing\na passphrase is not a good excuse and should result in removal of the\ncorresponding key from the system, i.e., contacting the\n\ngitolite administrator\n.)\n\n\nGeneric Errors\n\uf0c1\n\n\nKey management is done via creating a temporary clone of the\n\ngitolite-admin\n repository, changing, committing, and pushing back.\nIn cases where two people are trying to modify the \ngitolite-admin\n\nrepository at the same time, one of the push commands will most\nprobably fail. Then simply redo the command after a while.\n\n\nGlossary\n\uf0c1\n\n\n\n\n\n\nsysadmin\n:\n  A person who is able to edit the \n.gitolite.rc\n file on\n  the server machine.\n\n\n\n\n\n\ngitolite administrator\n:\n  A user with write access to the \ngitolite-admin\n repositoriy.\n\n\n\n\n\n\nsuper key manager\n:\n  A user who has write access to the \nkeydir/\n inside the\n  \ngitolite-admin\n repository.\n  A \ngitolite administrator\n is always a super key manager.\n\n\n\n\n\n\nSuper key managers have no restriction on how \nKEYIDs\n must\n  look like. They can do (nearly) everything inside \nkeydir/\n that a\n  \ngitolite administrator\n can do when pushing to the\n  \ngitolite-admin\n repository directly.\n\n\n\n\nguest key manager\n:\n  A user who is a member of the \n@guest-key-managers\n group.\n\n\n\n\nA guest key manager can manage a set of guest keys.\n\n\n\n\nself key manager\n:\n  A user who is a member of the \n@self-key-managers\n group.\n\n\n\n\nA self key manager can manage a set of his/her own keys.\n\n\n\n\nKEYID\n:\n  an identifier for a key given on the command line\n\n\n\n\nThe KEYID is normalized to lowercase letters.\n\n\nIf the script is called by one of the super key managers, then the\n  KEYID is the path to the pubkey file relative to the \nkeydir/\n\n  without the \n.pub\n extension.\n\n\nIf called by a guest key manager it's an email address and if called\n  by a self key manager, it's an alphanumeric identifier allowed to with an \n@\n\n  prepended.\n\n\n\n\nUSERID\n:\n  The \nKEYID\n given on the command line will be translated\n  into a USERID which is used inside \nconf/gitolite.conf\n or for the\n  \nperms\n \ncommand\n of gitolite.\n\n\n\n\nSecurity note\n\uf0c1\n\n\n\n\nSuper key managers\n can basically add any key.\n\nGuest key managers\n are not allowed to add\n\nmultiple keys\n and this restriction is hardcoded.\n\n\nSuppose Alice adds \nbob.pub\n as \nbob@example.org\n and David adds\n\neve.pub\n under the keyid \nbob@example.org@foo\n. (Of course, only Eve\nand not Bob has the private key correspoinding to \neve.pub\n.) This\nbasically gives Eve the same rights as Bob.\n\n\nImportant notes for the admin\n\uf0c1\n\n\nNote that \nukm\n clones, changes, and pushes back the \ngitolite-admin\n\nrepo. This means, even if you are the only administrator, you should\nnever \ngit push -f\n, because that might override something \nukm\n\ndid.\n\n\nIdeas\n\uf0c1\n\n\nThe command \nukm\n has been created with also having the\n\nkeysubdirs-as-groups\n \nsyntactic sugar\n in mind. If a\n\nsuper key manager\n manages the respective keys in\nsub-directories with names \nguest-key-managers/\n and\n\nself-key-managers/\n, respectively, he/she can use the \nukm\n command\nto control who is allowed to manage keys.", 
            "title": "User key management"
        }, 
        {
            "location": "/contrib/ukm/#user-key-management", 
            "text": "Copyright 2012-2013  Ralf Hemmecke  .  Licensed under the  Creative Commons\nAttribution-NonCommercial-ShareAlike 3.0 Unported\nLicense  User key management allows certain users to add and remove keys.  The key management is done using a command called  ukm . This command\nmust be enabled for remote use by both the  sysadmin  and the gitolite-admin  (see  here  for more on this) or look\nbelow.", 
            "title": "user key management"
        }, 
        {
            "location": "/contrib/ukm/#important-warning", 
            "text": "User key management undermines the fundamental principle of gitolite\n(see  authentication versus authorisation ) by allowing certain\nusers to juggle with ssh public keys. Make sure someone (sysadmin?)\ncan login to the server with a  password , just in case something\nbreaks and the  .ssh/authorized_keys  file for the user running\ngitolite on the server is messed up.", 
            "title": "Important Warning!"
        }, 
        {
            "location": "/contrib/ukm/#general-note", 
            "text": "Although gitolite deals in its core only with authorisation, by\ndefault it uses ssh as its authentication mechanism. Sure, ssh is\nnot at all part of gitolite and it can be replaced by other means, but\nstill there is a directory  gitolite-admin/keydir  that is reserved\nfor public ssh keys.  In fact, management of  users  and  multiple keys  per\nuser is not actually a gitolite administration stuff. It's external to\ngitolite. In a future version,  ukm  could be used as an equivalent of\nthe  keydir/  directory from the  gitolite-admin  repo (currently it\njust manages that directory) and thus  ukm  could be seen as such an\nexternal tool that does what its name suggests: user (key) management.  In the following description we assume that there is an entry like  Host gitserver\n     IdentityFile ~/.ssh/id_rsa    # choose your gitolite key here\n     HostName gitolite.example.org # location where gitolite is installed\n     User git                      # user that runs gitolite  in the client's  ~/.ssh/config  file.", 
            "title": "General note"
        }, 
        {
            "location": "/contrib/ukm/#who-might-be-interested", 
            "text": "", 
            "title": "Who might be interested?"
        }, 
        {
            "location": "/contrib/ukm/#the-gitolite-admin", 
            "text": "Adding a new public key to the system means to copy the key into gitolite/keydir  commit and push.  With  ukm  it would be  cat FOO.PUB | ssh gitserver ukm add KEYID  This would be a setup where only the  gitolite administrator \nuses  ukm . Not a big benefit, but  ukm  prevents adding identical\nkeys under different userids. This consistency check might be an\nadvantage. Furthermore,  ukm  does not allow the gitolite administrator  to remove his/her last, i.e., it\nprevents the administrator from locking him-/herself out of the\nsystem. (Note, we assume that the  gitolite administrator  has no\nshell access to the server; only the  sysadmin  has shell\naccess.)", 
            "title": "The gitolite admin"
        }, 
        {
            "location": "/contrib/ukm/#users-that-want-more-control-over-who-can-access-their-repositories", 
            "text": "Suppose the  gitolite administrator  of a research institute has\nset up gitolite to provide  wild repositories  for example with\na  gitolite.conf  like this.  repo gitolite-admin\n    RW+ = gitadmin\n\n# These people are allowed to create wild repositories.\n@creators = alice bob ...\n\n# wildcard repositories for the users\nrepo CREATOR/..*\n    C   = @creators\n    RW+ = CREATOR\n    RW  = WRITERS\n    R   = READERS  Researchers Alice and Bob want to write an article together. Alice\ncreates a wild repository  alice/article  and adds Bob via the perms  command to the WRITERS of her repository. After a while they\nrealize that Otto from another institute would be a reasonable third\nauthor. However, if they cannot give him write access to the\nrepository, they would have to exchange the article via email. Back to\nthe stone age? Better, Alice asks Otto to send her his public ssh key.\nAlice then forwards that key to the  gitolite administrator  and\nasks him to include that key into the system. (Hopefully, all that\ndidn't happen on a holiday or on the weekend.) After 3 days the\ngitolite administrater finds some time. Since he doesn't know Otto, he\nsimply trusts Alice and adds the public key into the system.  With  ukm  Alice can save bothering the gitolite administrator and is\nperhaps even faster in saying:  cat otto.pub | ssh gitserver ukm add otto@other.institute.edu\nssh gitserver perms alice/article + WRITERS otto@other.institute.edu  The effect would be the same.", 
            "title": "Users that want more control over who can access their repositories"
        }, 
        {
            "location": "/contrib/ukm/#users-that-want-to-manage-multiple-keys", 
            "text": "Suppose, you have different computers and a different ssh key for each\nof them. You would like to tell gitolite that all these different keys\nbelong to just one gitolite identity.  Your  gitolite administrator  creates your gitolite identity with\none of your keys as your initial key. This key can only be managed by\nthe gitolite administrator, not by you. It basically determines under\nwhich name you are known to gitolite.  You can add new keys to this identity and remove them at your will.", 
            "title": "Users that want to manage multiple keys"
        }, 
        {
            "location": "/contrib/ukm/#how-to-enable-user-key-management", 
            "text": "The  ukm  command is contributed code and lives under contrib/commands/ukm  in the gitolite source tree.\nA  sysadmin  of the gitserver has to copy or link this\nscript to the right location.  cd src/commands\nln -s ../../contrib/commands/ukm .  Furthermore, a  sysadmin  must add the string  'ukm'  to\nthe  ENABLE  array, i.e.,  ENABLE =  [ ..., 'ukm', ... ],  in  .gitolite.rc . (That's the preferred way for gitolite starting\nwith version v3.4.)  Instead of the above (in particular in gitolite v3.0-v3.3), add 'ukm' =  1  to the  COMMANDS  hash.  COMMANDS =  {..., 'ukm' =  1, ... },", 
            "title": "How to enable user key management?"
        }, 
        {
            "location": "/contrib/ukm/#how-to-configure-user-key-management-and-who-can-use-it", 
            "text": "As described above there are three main use cases for  ukm . Each of\nthem requires different values in the respective config files.  There are two files where  ukm  must be configured.   .gitolite.rc  (managed by a  sysadmin  of the gitserver)  gitolite-admin/conf/gitolite.conf  (managed by a\n     gitolite administrator )   Besides  sysadmin  and  gitolite administrator ,  ukm \nknows 3 roles.   super key manager  guest key manager  self key manager", 
            "title": "How to configure user key management and who can use it?"
        }, 
        {
            "location": "/contrib/ukm/#super-key-managers", 
            "text": "When  ukm  is enabled, nothing else must be configured.", 
            "title": "Super key managers"
        }, 
        {
            "location": "/contrib/ukm/#guest-key-managers", 
            "text": "The  gitolite administrator  defines guest key managers by\ncreating a group  @guest-key-managers  in gitolite-admin/conf/gitolite.conf  and adding (trusted) users to this\ngroup.  WARNING : If the gitolite administrator includes  @all  into this\nlist, it allows guests to add new public keys. If, additionally, there\nis  @creators=@all , it basically allows the initial guest key\nmanagers to start a hierarchy of new users with the same rights as the\ninitial users.  The  system administrator  must configure  ukm  for guest key managers  in  .gitolite.rc  by adding something\nlike  UKM_CONFIG =  { FORBIDDEN_GUEST_PATTERN =  qr(FORBIDDEN-PATTERN), },  to the  %RC  hash.  If  FORBIDDEN_GUEST_PATTERN  is missing, it defaults to the following.  FORBIDDEN_GUEST_PATTERN =  qr(.)  Any  KEYID  that matches this pattern is rejected, i.e., the\ndefault value basically allows only the  super key managers  to\nadd/del keys.  If  ukm  is supposed to work for  guest key managers , FORBIDDEN_GUEST_PATTERN  must be set to some reasonable value.  If your company has email addresses of the form first.last@company.com  you might want to write something like this  UKM_CONFIG =  { FORBIDDEN_GUEST_PATTERN =  qr(@company.com$) },  which would only allow  KEYIDs  in the form of email addresses\nthat do not come from your company.  For the very brave only!!!  The variable  REQUIRED_GUEST_PATTERN  is optional. It is strongly\ndiscouraged to set it. However, if you know, what you are doing, it\nallows for a bit more flexibility.  Don't complain if you modify the default\nvalue!!!  REQUIRED_GUEST_PATTERN  defaults to a regular expression that only\nallows  KEYIDs  in the form of email addresses (see the source\ncode if you want to see this regular expression).  You can write  UKM_CONFIG =  {\n    REQUIRED_GUEST_PATTERN  =  qr(REQUIRED-PATTERN),\n    FORBIDDEN_GUEST_PATTERN =  qr(FORBIDDEN-PATTERN),\n},  with the meaning that the  KEYID   must match  qr(^(REQUIRED-PATTERN)$)  (note that  ^  and  $  are automatically added to the pattern) and must not match  qr(FORBIDDEN-PATTERN)  in order for  ukm  to proceed with this  KEYID  for a guest key manager .  Gitolite's namespace for  USERIDs  is flat. The REQUIRED_GUEST_PATTERN  and  FORBIDDEN_GUEST_PATTERN  serve two\npurposes.    Restrict permissions for what  guest key managers  can\n     do.    Patterns that cannot be used for guests can still be used by\n      super key managers . In other words, those patterns are\n     reserved for in-house  USERIDs .", 
            "title": "Guest key managers"
        }, 
        {
            "location": "/contrib/ukm/#self-key-managers", 
            "text": "The  gitolite administrator  defines  self key managers  by\ncreating a group  @self-key-managers  in gitolite-admin/conf/gitolite.conf  and adding (trusted) users to this\ngroup.  WARNING : A  gitolite administrator  shouldn't include  @all \ninto this list. If guest key management is enabled, then also guests\nwould be allowed to add their own keys. Since guest key managers  would have no access to those keys, only gitolite administrators  would be able to remove those\nadditional keys. In fact,  ukm  was designed to allow only  one  key\nper guest. Don't complain, if you enable a setup where guests can have\nmultiple keys. It's a security issue. (Suppose Alice has added a guest foo@example.org  and MrBad generates a new ssh key and adds it under foo@example.org@attacker  to the list of his guests. That would give\nMrBad all the permissions that  foo@example.org  has.)  The  system administrator  must enable  ukm  for self key managers  in  .gitolite.rc  by adding  UKM_CONGFIG =  { SELFKEY_MANAGEMENT =  1, },  to the  %RC  hash.  Since by design self keys start with an  @  sign, and thus cannot\nconflict with guest keys (which are not allowed to start with an  @ ),\nthere is no problem to enable self key and guest key management at the\nsame time.  UKM_CONFIG =  {\n    FORBIDDEN_GUEST_PATTERN =  qr(FORBIDDEN-PATTERN),\n    SELFKEY_MANAGEMENT =  1,\n},", 
            "title": "Self key managers"
        }, 
        {
            "location": "/contrib/ukm/#how-to-use-user-key-management-how-to-use-user-key-management", 
            "text": "There are three subcommands of  ukm , namely  list  (the default), add , and  del .  Depending on whether or not the respective  KEYID  starts with\nan  @  sign,  ukm  distinguishes between guest and self key management.\nSelf keys start with  @  and are followed by letters and/or digits.  For  super key managers  there is not such a distinction.\nRather, the  KEYID  is the full path of the actual public key\nfile relative to  gitolite-admin/keydir/  with the  .pub  file\nextension removed.  By convention, take as guest key the proper email address of the\nguest. That not only makes for a unique ID, it also gives you a hint\nto whom this key belongs.", 
            "title": "How to use user key management? {#how-to-use-user-key-management}"
        }, 
        {
            "location": "/contrib/ukm/#list-managed-keys", 
            "text": "A  guest key manager  and  self key manager  can list all\ntheir personally managed keys via:  ssh gitserver ukm  or  ssh gitserver ukm list  If this command is issued by a  super key manager , it lists all\nkeys that are stored under  keydir/ .  The result will show the fingerprints of the keys, the corresponding USERID  and the  KEYID  by which one can refer to\nthe key on the commandline.", 
            "title": "List managed keys"
        }, 
        {
            "location": "/contrib/ukm/#add-a-new-public-key", 
            "text": "", 
            "title": "Add a new public key"
        }, 
        {
            "location": "/contrib/ukm/#add-a-new-key-as-a-super-key-manager", 
            "text": "A  super key manager  can nearly add any key, but  ukm  does not\naccept a different key, i.e., different fingerprint, for the same KEYID . Also a double dot is not allowed in the KEYID .", 
            "title": "Add a new key as a super key manager"
        }, 
        {
            "location": "/contrib/ukm/#add-a-new-key-as-a-guest-key-manager", 
            "text": "The command for this is:  cat foo.pub | ssh gitserver ukm add foo@example.com  There are several situations when the above command fails, i.e.,\nrejects to add the key.    The  KEYID   foo@example.com  does not match the pattern\n    given by  REQUIRED_GUEST_PATTERN  in  .gitolite.rc .    The  KEYID   foo@example.com  matches the pattern given by\n     FORBIDDEN_GUEST_PATTERN  in  .gitolite.rc .    The public key  foo.pub  is already known to the system and does\n    not belong to the  USERID   foo@example.com .    The  KEYID   foo@example.com  is already in use and it\n    corresponds to a key with another public key. In other words,\n     ukm  will not simply override a key. One has to delete the old\n    key first and then add a new one.    The  KEYID  contains a  /  character or two  @ \n    characters, i.e., guest key managers are not allowed to add\n     multiple keys  for one user.", 
            "title": "Add a new key as a guest key manager"
        }, 
        {
            "location": "/contrib/ukm/#add-a-new-key-as-a-self-key-manager", 
            "text": "Adding a self key is a bit more complicated, since the user must\nconfirm that he/she is in possession of the corresponding private key.\nThe command sequence is as follows. Note that the second call of ssh\nis done with the key  foo  and not the default ssh key.  cat foo.pub | ssh gitserver ukm add @two   session\ncat session | ssh -i foo gitserver ukm  If you don't want to create an intermediate file call it like this:  cat foo.pub | ssh gitserver ukm add @two | (sleep 2; ssh -i foo gitserver ukm)  Make sure that the second ssh call only happens after the fist one has\ndone its job. Otherwise you might be asked for a password of the  git \nuser on the  gitserver .  After successfully completing the first ssh call, the new key is\nscheduled for addition and a session key is returned on stdin. That\nsession key must be used to confirm the addition of the new public key\nas shown above.", 
            "title": "Add a new key as a self key manager"
        }, 
        {
            "location": "/contrib/ukm/#delete-a-key", 
            "text": "A  super key manager  can delete any key by simply giving its KEYID  in a command like this  ssh gitserver ukm del some/dir/foo@example.com  The  ukm  command, however, prevents a  super key manager  from\nremoving his/her last key.", 
            "title": "Delete a key"
        }, 
        {
            "location": "/contrib/ukm/#delete-a-guest-key", 
            "text": "The command for this is:  ssh gitserver ukm del foo@example.com  If the given  KEYID  is not among the managed keys of the user\nwho issues the  del  command, the command will fail.  IMPORTANT!  You should not forget to remove from all of your\nrepositories all the permissions you gave to  foo@example.com ,\nbecause this key might still be managed by another guest key manager .  You might want to run  ssh gitserver info -lc \\\n| perl -e 'chomp($u= );$u=~s/hello //;$u=~s/,.*$//;' \\\n       -e 'while( ){if(/\\s(\\S+)\\s+$u$/){print \"$1\\n\"}}' \\\n| while read r; do ssh gitserver perms $r - WRITERS foo@example.com; done  Repeat this for other roles such as  READERS  instead of  WRITERS .", 
            "title": "Delete a guest key"
        }, 
        {
            "location": "/contrib/ukm/#delete-a-self-key", 
            "text": "The command for this is:  ssh gitserver ukm del @two\nssh gitserver ukm del @two  Yes, you have to give that command twice. The first call will bring\nthe key  @two  into a \"pending-del\" state. The second time, the\ncommand will only delete the key  @two , if the login was  not  done\nwith exactly that key. If logging in with the key corresponding to @two , it will bring back the  @two  key from its \"pending-del\" state\nto a non-pending state.  Note:  This safety net is not absolutely necessary, since a self key manager  is not allowed to delete his/her initial key\n(added by the  gitolite administrator ). The command  ukm  wants\nto make sure that the user still has a key that can be used for\nlogin. (Think about having lost the passphrase for the initial key. --\nMaybe this over complication will be simplified in the future. Losing\na passphrase is not a good excuse and should result in removal of the\ncorresponding key from the system, i.e., contacting the gitolite administrator .)", 
            "title": "Delete a self key"
        }, 
        {
            "location": "/contrib/ukm/#generic-errors", 
            "text": "Key management is done via creating a temporary clone of the gitolite-admin  repository, changing, committing, and pushing back.\nIn cases where two people are trying to modify the  gitolite-admin \nrepository at the same time, one of the push commands will most\nprobably fail. Then simply redo the command after a while.", 
            "title": "Generic Errors"
        }, 
        {
            "location": "/contrib/ukm/#glossary", 
            "text": "sysadmin :\n  A person who is able to edit the  .gitolite.rc  file on\n  the server machine.    gitolite administrator :\n  A user with write access to the  gitolite-admin  repositoriy.    super key manager :\n  A user who has write access to the  keydir/  inside the\n   gitolite-admin  repository.\n  A  gitolite administrator  is always a super key manager.    Super key managers have no restriction on how  KEYIDs  must\n  look like. They can do (nearly) everything inside  keydir/  that a\n   gitolite administrator  can do when pushing to the\n   gitolite-admin  repository directly.   guest key manager :\n  A user who is a member of the  @guest-key-managers  group.   A guest key manager can manage a set of guest keys.   self key manager :\n  A user who is a member of the  @self-key-managers  group.   A self key manager can manage a set of his/her own keys.   KEYID :\n  an identifier for a key given on the command line   The KEYID is normalized to lowercase letters.  If the script is called by one of the super key managers, then the\n  KEYID is the path to the pubkey file relative to the  keydir/ \n  without the  .pub  extension.  If called by a guest key manager it's an email address and if called\n  by a self key manager, it's an alphanumeric identifier allowed to with an  @ \n  prepended.   USERID :\n  The  KEYID  given on the command line will be translated\n  into a USERID which is used inside  conf/gitolite.conf  or for the\n   perms   command  of gitolite.", 
            "title": "Glossary"
        }, 
        {
            "location": "/contrib/ukm/#security-note", 
            "text": "Super key managers  can basically add any key. Guest key managers  are not allowed to add multiple keys  and this restriction is hardcoded.  Suppose Alice adds  bob.pub  as  bob@example.org  and David adds eve.pub  under the keyid  bob@example.org@foo . (Of course, only Eve\nand not Bob has the private key correspoinding to  eve.pub .) This\nbasically gives Eve the same rights as Bob.", 
            "title": "Security note"
        }, 
        {
            "location": "/contrib/ukm/#important-notes-for-the-admin", 
            "text": "Note that  ukm  clones, changes, and pushes back the  gitolite-admin \nrepo. This means, even if you are the only administrator, you should\nnever  git push -f , because that might override something  ukm \ndid.", 
            "title": "Important notes for the admin"
        }, 
        {
            "location": "/contrib/ukm/#ideas", 
            "text": "The command  ukm  has been created with also having the keysubdirs-as-groups   syntactic sugar  in mind. If a super key manager  manages the respective keys in\nsub-directories with names  guest-key-managers/  and self-key-managers/ , respectively, he/she can use the  ukm  command\nto control who is allowed to manage keys.", 
            "title": "Ideas"
        }, 
        {
            "location": "/contrib/README-emacs/", 
            "text": "Emacs major mode for gitolite.conf\n\uf0c1\n\n\nEmacs\n major mode for \ngitolite.conf\n can be found here:\n\n\n\n\nGitHub", 
            "title": "Emacs major mode"
        }, 
        {
            "location": "/contrib/README-emacs/#emacs-major-mode-for-gitoliteconf", 
            "text": "Emacs  major mode for  gitolite.conf  can be found here:   GitHub", 
            "title": "Emacs major mode for gitolite.conf"
        }, 
        {
            "location": "/no-way/", 
            "text": "no way!\n\uf0c1\n\n\n\n\nFor the entertainment of the sensible majority, and as a way of thanking all\nof you, here are some examples of requests (demands in some cases) I have\nreceived over the last couple of years.\n\n\n\n\n\n\ndeleting environment variables copied from client session\n\n\ndemand: add code to delete certain environment variables at startup\nbecause \"the openssh servers in the linux distribution that [he] use[s],\nare configured to copy \nGIT_*\n variables to the remote session\".\n\n\nThis is wrong on so many levels it's almost plonk-able!\n\n\n\n\n\n\nusing \ncp\n instead of \nln\n\n\nGuy has an NTFS file system mounted on Linux.  So... no symlinks (an NTFS\nfile system on Windows works fine because msysgit/cygwin manage to\n\nsimulate\n them.  NTFS mounted on Linux won't do that!)\n\n\nHe wanted all the symlink stuff to be replaced by copies.\n\n\nNo. Way.\n\n\n\n\n\n\nnon-bare repos on the server\n\n\nSome guy gave me a complicated spiel about git-svn not liking bare repos\nor whatever.  I tuned off at the first mention of those 3 letters so I\ndon't really know what the actual problem was.\n\n\nBut it doesn't matter.  Even if someone (Ralf H) had not chipped in with a\nworkable solution, I still would not do it.  A server repo should be bare.\nPeriod.\n\n\n\n\n\n\nincomplete ownership of \nGL_REPO_BASE\n\n\nThis guy had a repo-base directory where not all of the files were owned\nby the git user.  As a result, some of the hooks did not get created.  He\nclaimed my code should detect OS-permissions issues while it's doing its\nstuff.\n\n\nNo.  I refuse to have the code constantly look over its shoulder making\nsure fundamental assumptions are being met.\n\n\n\n\n\n\nempty template directory\n\n\n(See man git-init for what a template directory is).\n\n\nThe same guy with the environment variables had an empty template\ndirectory because he \"does not like to have sample hooks in every\nrepository\".  So naturally, the hooks directory does not get created when\nyou run a \ngit init\n.  He expects gitolite to compensate for it.\n\n\nGranted, it's only a 1-line change.  But again, this falls under\n\"constantly looking over your shoulder to double check fundamental\nassumptions\".  Where does it end?\n\n\n[update 2014-07: I believe I read somewhere that git itself may be\nremoving those \"sample\" hooks.  If that also means the hooks directory\nwill not be created when you \"git init --bare\", then I guess I'd have to\ndo something!]", 
            "title": "no way!"
        }, 
        {
            "location": "/no-way/#no-way", 
            "text": "For the entertainment of the sensible majority, and as a way of thanking all\nof you, here are some examples of requests (demands in some cases) I have\nreceived over the last couple of years.    deleting environment variables copied from client session  demand: add code to delete certain environment variables at startup\nbecause \"the openssh servers in the linux distribution that [he] use[s],\nare configured to copy  GIT_*  variables to the remote session\".  This is wrong on so many levels it's almost plonk-able!    using  cp  instead of  ln  Guy has an NTFS file system mounted on Linux.  So... no symlinks (an NTFS\nfile system on Windows works fine because msysgit/cygwin manage to simulate  them.  NTFS mounted on Linux won't do that!)  He wanted all the symlink stuff to be replaced by copies.  No. Way.    non-bare repos on the server  Some guy gave me a complicated spiel about git-svn not liking bare repos\nor whatever.  I tuned off at the first mention of those 3 letters so I\ndon't really know what the actual problem was.  But it doesn't matter.  Even if someone (Ralf H) had not chipped in with a\nworkable solution, I still would not do it.  A server repo should be bare.\nPeriod.    incomplete ownership of  GL_REPO_BASE  This guy had a repo-base directory where not all of the files were owned\nby the git user.  As a result, some of the hooks did not get created.  He\nclaimed my code should detect OS-permissions issues while it's doing its\nstuff.  No.  I refuse to have the code constantly look over its shoulder making\nsure fundamental assumptions are being met.    empty template directory  (See man git-init for what a template directory is).  The same guy with the environment variables had an empty template\ndirectory because he \"does not like to have sample hooks in every\nrepository\".  So naturally, the hooks directory does not get created when\nyou run a  git init .  He expects gitolite to compensate for it.  Granted, it's only a 1-line change.  But again, this falls under\n\"constantly looking over your shoulder to double check fundamental\nassumptions\".  Where does it end?  [update 2014-07: I believe I read somewhere that git itself may be\nremoving those \"sample\" hooks.  If that also means the hooks directory\nwill not be created when you \"git init --bare\", then I guess I'd have to\ndo something!]", 
            "title": "no way!"
        }
    ]
}